<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>凤凰架构笔记</title>
      <link href="/2021/12/01/%E5%87%A4%E5%87%B0%E6%9E%B6%E6%9E%84%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/12/01/%E5%87%A4%E5%87%B0%E6%9E%B6%E6%9E%84%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="凤凰架构笔记"><a class="markdownIt-Anchor" href="#凤凰架构笔记"></a> 凤凰架构笔记</h1><h2 id="什么是凤凰架构"><a class="markdownIt-Anchor" href="#什么是凤凰架构"></a> 什么是“凤凰架构”</h2><blockquote><p>这其中的关键点便是承认细胞等这些零部件可能会出错，某个具体的零部件可能会崩溃消亡，但在存续生命的微生态系统中一定会有其后代的出现，重新代替该零部件的作用，以维持系统的整体稳定。在这个微生态里，每一个部件都可以看作一只不死鸟（Phoenix），它会老迈，而之后又能涅槃重生。</p></blockquote><blockquote><p>只要在整体架构设计有恰当的、自动化的错误熔断、服务淘汰和重建的机制，在系统外部来观察，整体上仍然有可能表现出稳定和健壮的服务能力。</p></blockquote><p>将一个系统看作是一个像人一样的生物。每一刻内部都有细胞老去凋零，也有新细胞的诞生 ，将细胞（部件）的“死去“看作是正常生理过程，并为之设计恰当的容错机制，使得内部的错误得到处理，在内部这种不断迭代情况下，从整体上看依旧具有健壮性。</p><h2 id="演进中的架构"><a class="markdownIt-Anchor" href="#演进中的架构"></a> <strong>演进中的架构</strong></h2><h3 id="原始分布式时代"><a class="markdownIt-Anchor" href="#原始分布式时代"></a> 原始分布式时代</h3><p>探索过程中的产物</p><ul><li>NCA是未来远程服务调用的雏形</li><li><a href="https://en.wikipedia.org/wiki/Andrew_File_System">AFS 文件系统</a></li><li><a href="https://en.wikipedia.org/wiki/Kerberos_(protocol)">Kerberos 协议</a>服务认证和访问控制的基础性协议</li><li>DCE规范( 包含 RPC  DFS等等)</li></ul><p>失败的原因</p><ul><li>机器硬件条件下性能上的差异</li><li><a href="https://zh.wikipedia.org/wiki/%E6%91%A9%E5%B0%94%E5%AE%9A%E5%BE%8B">摩尔定律</a>稳定发挥作用</li><li>分布式架构尚未成熟</li></ul><blockquote><p>“如同本地调用一般简单透明的”分布式系统这个目标，是软件开发者对分布式系统最初的美好愿景</p></blockquote><p>原始的分布式时代比我猜想的要早太多太多，而且怀揣着美好的愿景对分布式进行了比较全面的尝试探索。</p><h3 id="单体巨石系统时代"><a class="markdownIt-Anchor" href="#单体巨石系统时代"></a> 单体(巨石)系统时代</h3><p>非缺点</p><ul><li>单体不仅易于开发、易于测试、易于部署，且由于系统中各个功能、模块、方法的调用过程都是进程内调用，不会发生<a href="https://zh.wikipedia.org/wiki/%E8%A1%8C%E7%A8%8B%E9%96%93%E9%80%9A%E8%A8%8A">进程间通信</a>（Inter-Process Communication，IPC。</li><li>在纵向分层上完全不会展露出丝毫的弱势。</li><li>在以横向扩展（Scale Horizontally）的上可以，在负载均衡器之后同时部署若干个相同的单体系统副本(多个 JAR、WAR、DLL、Assembly 或者其他模块格式来构成)，以达到分摊流量压力的效果。</li></ul><p>缺点</p><ul><li>隔离（难以阻断错误传播）与自治能力的欠缺</li><li>可维护性的欠缺（修改缺陷往往需要制定专门的停机更新计划，做灰度发布、A/B 测试也相对更复杂。）</li><li>无法达到技术异构</li><li>单体系统很难兼容“<a href="https://icyfenix.cn/introduction/about-the-fenix-project.html#%E6%9E%B6%E6%9E%84%E7%9A%84%E6%BC%94%E8%BF%9B">Phoenix</a>”的特性。</li></ul><blockquote><p>单体系统很难兼容“<a href="https://icyfenix.cn/introduction/about-the-fenix-project.html#%E6%9E%B6%E6%9E%84%E7%9A%84%E6%BC%94%E8%BF%9B">Phoenix</a>”的特性。这种架构风格潜在的观念是希望系统的每一个部件，每一处代码都尽量可靠，靠不出或少出缺陷来构建可靠系统。然而战术层面再优秀，也很难弥补战略层面的不足，单体靠高质量来保证高可靠性的思路，在小规模软件上还能运作良好，但系统规模越大，交付一个可靠的单体系统就变得越来越具有挑战性。如本书的前言开篇《<a href="https://icyfenix.cn/introduction/about-the-fenix-project.html">什么是&quot;凤凰架构&quot;</a>》所说，正是随着软件架构演进，构筑可靠系统从“追求尽量不出错”，到正视“出错是必然”的观念转变，才是微服务架构得以挑战并逐步开始取代运作了数十年的单体架构的底气所在。</p></blockquote><p>单体架构并不是完全是缺点，只有在项目足够复杂成为一个“<strong>大型的</strong>单体系统”，项目开发人员较多时，对项目可靠性，可维护性具有一定要求时，使用分布式系统才具体有意义。</p><h3 id="soa时代"><a class="markdownIt-Anchor" href="#soa时代"></a> SOA时代</h3><blockquote><p>SOA 架构（Service-Oriented Architecture）面向服务的架构是一次具体地、系统性地成功解决分布式服务主要问题的架构模式。</p></blockquote><ul><li><p><a href="https://en.wikipedia.org/wiki/Information_silo">烟囱式架构</a>（Information Silo Architecture）：信息烟囱又名信息孤岛（Information Island），使用这种架构的系统也被称为孤岛式信息系统或者烟囱式信息系统。它指的是一种<strong>完全不与其他相关信息系统进行互操作或者协调工作</strong>的设计模式。</p></li><li><p><a href="https://en.wikipedia.org/wiki/Microkernel">微内核架构</a>（Microkernel Architecture）：微内核架构也被称为插件式架构（Plug-in Architecture）。将这些主数据，连同其他可能被各子系统使用到的公共服务、数据、资源集中到一块，成为一个被所有业务系统共同依赖的核心（Kernel，也称为 Core System），具体的业务系统以插件模块（Plug-in Modules）的形式存在，这样也可提供可扩展的、灵活的、天然隔离的功能特性，即微内核架构，如图 1-2 所示。</p></li><li><p><a href="https://en.wikipedia.org/wiki/Event-driven_architecture">事件驱动架构</a>（Event-Driven Architecture）：为了能让子系统互相通信，一种可行的方案是在子系统之间建立一套事件队列管道（Event Queues）每一个消息的处理者都是独立的，高度解耦的，但又能与其他处理者（如果存在该消息处理者的话）通过事件管道进行互动</p></li></ul><p>SOA</p><p>“更具体”体现在尽管 SOA 本身还是属抽象概念,可以称为一套软件设计的基础平台了。有清晰软件设计的指导原则，譬如服务的封装性、自治、松耦合、可重用、可组合、无状态，等等；若仅从技术可行性这一个角度来评判的话，SOA 可以算是成功地解决了分布式环境下出现的主要技术问题。</p><ul><li>明确了采用 SOAP 作为远程调用的协议，依靠 SOAP 协议族（WSDL、UDDI 和一大票 WS-*协议）来完成服务的发布、发现和治理；</li><li>利用一个被称为<a href="https://zh.wikipedia.org/zh-hans/%E4%BC%81%E4%B8%9A%E6%9C%8D%E5%8A%A1%E6%80%BB%E7%BA%BF">企业服务总线</a>（Enterprise Service Bus，ESB）的消息管道来实现各个子系统之间的通信交互</li><li>使用<a href="https://zh.wikipedia.org/wiki/%E6%9C%8D%E5%8A%A1%E6%95%B0%E6%8D%AE%E5%AF%B9%E8%B1%A1">服务数据对象</a>（Service Data Object，SDO）来访问和表示数据</li><li>使用<a href="https://zh.wikipedia.org/wiki/%E6%9C%8D%E5%8A%A1%E7%BB%84%E4%BB%B6%E6%9E%B6%E6%9E%84">服务组件架构</a>（Service Component Architecture，SCA）来定义服务封装的形式和服务运行的容器</li></ul><p>“更系统”指的是 SOA 的宏大理想，SOA 不仅关注技术，还关注研发过程中涉及到的需求、管理、流程和组织。写出符合客户需求的软件会像写八股文一样有迹可循、有法可依.</p><p>SOAP 协议被逐渐边缘化的本质原因：过于严格的规范定义带来<strong>过度的复杂性</strong>。</p><p>软件架构从烟囱式架构到事件驱动,再到后来的SOA中ESB~ 有一个很明显的痛点就是在一步一步地完善架构之间组件的信息的传递交互，这点也是跟单体比较区别大的点。另外到SOA时代也进行了更加全面的探索。不过很多组件之前…几乎没有听闻，从功能性来看跟工作中接触的很多微服务组件几乎相同的功能，似乎技术的迭代更应该倾向于减少单个组件的复杂性？</p><h3 id="微服务时代"><a class="markdownIt-Anchor" href="#微服务时代"></a> 微服务时代</h3><blockquote><p>微服务架构（Microservices）</p><p>微服务是一种通过多个小型服务组合来构建单个应用的架构风格，这些服务围绕业务能力而非特定的技术标准来构建。各个服务可以采用不同的编程语言，不同的数据存储技术，运行在不同的进程之中。服务采取轻量级的通信机制和自动化的部署机制实现通信与运维。</p></blockquote><p>微服务的九个核心的业务与技术特征</p><ul><li><strong>围绕业务能力构建</strong> 有怎样结构、规模、能力的团队，就会产生出对应结构、规模、能力的产品。</li><li>**分散治理 **微服务更加强调的是确实有必要技术异构时，应能够有选择“不统一”的权利</li><li><strong>通过服务来实现独立自治的组件</strong> 为组件带来隔离与自治能力</li><li><strong>产品化思维</strong> 避免把软件研发视作要去完成某种功能，而是视作一种持续改进、提升的过程。在微服务下，要求开发团队中每个人都具有产品化思维，关心整个产品的全部方面是具有可行性的。</li><li><strong>数据去中心化</strong> 微服务明确地提倡数据应该按领域分散管理、更新、维护、存储 同一个数据实体在不同服务的视角里，它的抽象形态往往也是不同的。</li><li><strong>强终端弱管道</strong> 如果服务需要额外通信能力，就应该在服务自己的 Endpoint 上解决，而不是在通信管道上一揽子处理。微服务提倡类似于经典 UNIX 过滤器那样简单直接的通信方式，RESTful 风格的通信在微服务中会是更加合适的选择。</li><li><strong>容错性设计</strong> 不再虚幻地追求服务永远稳定，而是接受服务总会出错的现实.，要求在微服务的设计中，有自动的机制对其依赖的服务能够进行<strong>快速故障检测</strong>，在持续出错的时候进行<strong>隔离</strong>，在服务恢复的时候重新联通。可靠系统完全可能由会出错的服务组成，这是微服务最大的价值所在.</li><li><strong>演进式设计</strong>（Evolutionary Design）。容错性设计承认服务会出错，演进式设计则是承认服务会被<strong>报废淘汰</strong>。</li><li><strong>基础设施自动化</strong>（Infrastructure Automation）。微服务下运维的对象比起单体架构要有数量级的增长，使用微服务的团队更加依赖于基础设施的自动化</li></ul><p>微服务追求的是更加自由的架构风格，摒弃了几乎所有 SOA 里可以抛弃的约束和规定，提倡以“实践标准”代替“规范标准”。在微服务中不再会有统一的解决方案，需要解决什么问题，就引入什么工具；团队熟悉什么技术，就使用什么框架。</p><p>技术架构者的第一职责就是做决策权衡，有利有弊才需要决策，有取有舍才需要权衡，如果架构者本身的知识面不足以覆盖所需要决策的内容，不清楚其中利弊，恐怕也就无可避免地陷入选择困难症的困境之中。</p><p><strong>微服务时代充满着自由的气息，微服务时代充斥着迷茫的选择。</strong></p><p>从SOA到微服务~从一个复杂的技术标准到开发自由的多种多样解决方案的微服务生态圈，减少了开发过程的繁琐却对于技术的选型权衡利弊有了更高的要求。</p><h3 id="后微服务时代"><a class="markdownIt-Anchor" href="#后微服务时代"></a> 后微服务时代</h3><p>Kubernetes 登基加冕是容器发展中一个时代的终章，也将是软件架构发展下一个纪元的开端。</p><p>传统 Spring Cloud 与 Kubernetes 提供的解决方案对比</p><table><thead><tr><th></th><th>Kubernetes</th><th>Spring Cloud</th></tr></thead><tbody><tr><td>弹性伸缩</td><td>Autoscaling</td><td>N/A</td></tr><tr><td>服务发现</td><td>KubeDNS / CoreDNS</td><td>Spring Cloud Eureka</td></tr><tr><td>配置中心</td><td>ConfigMap / Secret</td><td>Spring Cloud Config</td></tr><tr><td>服务网关</td><td>Ingress Controller</td><td>Spring Cloud Zuul</td></tr><tr><td>负载均衡</td><td>Load Balancer</td><td>Spring Cloud Ribbon</td></tr><tr><td>服务安全</td><td>RBAC API</td><td>Spring Cloud Security</td></tr><tr><td>跟踪监控</td><td>Metrics API / Dashboard</td><td>Spring Cloud Turbine</td></tr><tr><td>降级熔断</td><td>N/A</td><td>Spring Cloud Hystrix</td></tr></tbody></table><p>从软件层面独力应对分布式架构所带来的各种问题，发展到应用代码与基础设施软、硬一体，合力应对架构问题的时代，现在常被媒体冠以“云原生”这个颇为抽象的名字加以宣传。云原生时代与此前微服务时代中追求的目标并没有本质改变，在服务架构演进的历史进程中，笔者更愿意称其为“后微服务时代”。</p><p>Kubernetes 成为容器战争胜利者标志着后微服务时代的开端，但 Kubernetes 仍然没有能够完美解决全部的分布式问题——“不完美”的意思是，仅从功能上看，单纯的 Kubernetes 反而不如之前的 Spring Cloud 方案。这是因为有一些问题处于应用系统与基础设施的边缘，使得完全在基础设施层面中确实很难精细化地处理。</p><p>基础设施是针对整个容器来管理的，粒度相对粗旷，只能到容器层面，对单个远程服务就很难有效管控。</p><p>虚拟化的基础设施很快完成了第二次进化，引入了今天被称为“<a href="https://en.wikipedia.org/wiki/Service_mesh">服务网格</a>”（Service Mesh）的“边车代理模式”（Sidecar Proxy）在应用毫无感知的情况下，悄然接管应用所有对外通信。这个代理除了实现正常的服务间通信外（称为数据平面通信），还接收来自控制器的指令（称为控制平面通信），根据控制平面中的配置，对数据平面通信的内容进行分析处理，以实现熔断、认证、度量、监控、负载均衡等各种附加功能。这样便实现了既不需要在应用层面加入额外的处理代码，也提供了几乎不亚于程序代码的精细管理能力。</p><p>服务网格将会成为微服务之间通信交互的主流模式，把“选择什么通信协议”、“怎样调度流量”、“如何认证授权”之类的技术问题隔离于程序代码之外，取代今天 Spring Cloud 全家桶中大部分组件的功能，微服务只需要考虑业务本身的逻辑，这才是最理想的<a href="https://martinfowler.com/articles/microservices.html#SmartEndpointsAndDumbPipes">Smart Endpoints</a>解决方案。</p><p><strong>业务与技术完全分离，远程与本地完全透明，也许这就是最好的时代了吧？</strong></p><p>从微服务到后微服务时代，以虚拟化容器设备让软硬界限模糊，提供的新的服务之间管理方式，业务于技术完全分离，之间的跨越不亚于从先前看的单体到微服务的进程层次的差距。又是一种质的改变~~ 。</p><h3 id="无服务时代"><a class="markdownIt-Anchor" href="#无服务时代"></a> 无服务时代</h3><blockquote><p>如果说微服务架构是分布式系统这条路的极致，那无服务架构，也许就是“不分布式”的云端系统这条路的起点。</p></blockquote><p>无服务现在还没有一个特别权威的“官方”定义，但它的概念并没有前面各种架构那么复杂，本来无服务也是以“简单”为主要卖点的，它只涉及两块内容：后端设施（Backend）和函数（Function）。</p><ul><li><strong>后端设施</strong>是指数据库、消息队列、日志、存储，等等这一类用于支撑业务逻辑运行，但本身无业务含义的技术组件，这些后端设施都运行在云中，无服务中称其为“后端即服务”（Backend as a Service，BaaS）。</li><li><strong>函数</strong>是指业务逻辑代码，这里函数的概念与粒度，都已经很接近于程序编码角度的函数了，其区别是无服务中的函数运行在云端，不必考虑算力问题，不必考虑容量规划（从技术角度可以不考虑，从计费的角度你的钱包够不够用还是要掂量一下的），无服务中称其为“函数即服务”（Function as a Service，FaaS）</li></ul><p>无服务的愿景是让开发者只需要纯粹地关注业务，不需要考虑技术组件只涉及两块内容：后端设施（Backend）和函数（Function）。</p><ul><li><strong>后端设施</strong>是指数据库、消息队列、日志、存储，等等这一类用于支撑业务逻辑运行，但本身无业务含义的技术组件，这些后端设施都运行在云中，</li><li><strong>函数</strong>是指业务逻辑代码，这里函数的概念与粒度，都已经很接近于程序编码角度的函数了，其区别是无服务中的函数运行在云端.</li></ul><p>优点</p><ul><li>不需要考虑技术组件，技术组件是现成的</li><li>不需要考虑如何部署，部署过程完全是托管到云端的，</li><li>不需要考虑算力，算力可以认为是无限的；</li><li>不需要操心运维，维护系统持续平稳运行是云计算服务商的责任</li></ul><p>缺点</p><p>函数不便依赖服务端状态，也导致了函数会有冷启动时间，响应的性能不可能太好。函数不便依赖服务端状态，也导致了函数会有冷启动时间，响应的性能不可能太好</p><p>多种架构风格将会融合互补，“分布式”与“不分布式”的边界将逐渐模糊，两条路线在云端的数据中心中交汇。</p><h2 id="架构师的视角"><a class="markdownIt-Anchor" href="#架构师的视角"></a> 架构师的视角</h2><h3 id="rpc访问远程服务"><a class="markdownIt-Anchor" href="#rpc访问远程服务"></a> RPC（访问远程服务）</h3><p>RPC 出现的最初目的，就是<strong>为了让计算机能够跟调用本地方法一样去调用远程方法</strong>.</p><p>两个进程之间如何交换数据？</p><ul><li><p><strong>管道</strong>（Pipe）或者<strong>具名管道</strong>（Named Pipe）管道类似于两个进程间的桥梁，可通过管道在进程间传递少量的字符流或字节流。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep java</span><br></pre></td></tr></table></figure></li><li><p><strong>信号</strong>（Signal）：信号用于通知目标进程有某种事件发生，除了用于进程间通信外，进程还可以发送信号给进程自身。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 pid</span><br></pre></td></tr></table></figure><ul><li><p><strong>信号量</strong>（Semaphore）：信号量用于两个进程之间同步协作手段，它相当于操作系统提供的一个特殊变量，程序可以在上面进行<code>wait()</code>和<code>notify()</code>操作。</p></li><li><p><strong>消息队列</strong>（Message Queue）</p></li><li><p><strong>共享内存</strong></p></li><li><p><strong>套接字接口</strong>（Socket）</p><p>通信的成本</p></li></ul><p>这种基于套接字接口的通信方式透明的调用形式却反而造成了程序员误以为<strong>通信是无成本的假象</strong>，因而被滥用以致于显著降低了分布式系统的性能。本地调用与远程调用当做一样处理，这是犯了方向性的错误，把系统间的调用做成透明，反而会增加程序员工作的复杂度。</p><p>网络编程中经常被忽略的八大问题</p><ul><li>网络是可靠的。</li><li>延迟是不存在的。</li><li>带宽是无限的。</li><li>网络是安全的。</li><li>拓扑结构是一成不变的。</li><li>总会有一个管理员。</li><li>不必考虑传输成本。</li><li>网络是同质化的。</li></ul><p>RPC 应该是一种高层次的或者说<strong>语言层次</strong>的特征，而不是像 IPC 那样，是低层次的或者说系统层次的特征成为工业界、学术界的主流观点。</p><blockquote><p>远程服务调用是指位于互不重合的内存地址空间中的两个程序，在语言层面上，以同步的方式使用带宽有限的信道来传输程序控制信息。</p></blockquote><p>RPC 协议解决三个基本问题</p><ul><li><strong>如何表示数据</strong>：将交互双方所涉及的数据转换为某种事先约定好的中立数据流格式来进行传输，将数据流转换回不同语言中对应的数据类型来进行使用，（序列化与反序列化）</li><li><strong>如何传递数据</strong>：如何通过网络，在两个服务的 Endpoint 之间相互操作、交换数据（应用层协议）。<strong>两个服务交互不是只扔个序列化数据流来表示参数和结果就行的</strong>，许多在此之外信息，譬如异常、超时、安全、认证、授权、事务，等等，都可能产生双方需要交换信息的需求。</li><li><strong>如何确定方法</strong>：一套语言无关的<a href="https://en.wikipedia.org/wiki/Interface_description_language">接口描述语言</a> （没想到UUID是这样出现的）</li></ul><p>统一的的RPC</p><blockquote><p>但无奈 CORBA 本身设计得实在是太过于啰嗦繁琐，甚至有些规定简直到了荒谬的程度——写一个对象请求代理（ORB，这是 CORBA 中的核心概念）大概要 200 行代码，其中大概有 170 行都是纯粹无用的废话——这句带有鞭尸性质的得罪人的评价不是笔者写的，是 CORBA 的首席科学家 Michi Henning 在文章《<a href="https://dl.acm.org/doi/pdf/10.1145/1142031.1142044">The Rise and Fall of CORBA</a>》的愤怒批评。另一方面，为 CORBA 制定规范的专家逐渐脱离实际，做出 CORBA 规范晦涩难懂，各家语言的厂商都有自己的解读，结果各门语言最终出来的 CORBA 实现互不兼容，实在是对 CORBA 号称支持众多异构语言的莫大讽刺。</p></blockquote><p>这段看着笑到我了~</p><p>CORBA ：支持多种编程语言，由多家软件提供商共同参与的分布式规范;本身设计得实在是太过于<strong>啰嗦繁琐</strong></p><p>Web Service:数据交互都包含大量的冗余信息，性能奇差。过于严谨。贪婪。</p><p>那些面向透明的、简单的 RPC 协议要么依赖于操作系统，要么依赖于特定语言，总有一些先天约束；那些面向通用的、普适的 RPC 协议；如 CORBA，就无法逃过使用复杂性的困扰，而那些意图通过技术手段来屏蔽复杂性的 RPC 协议，如 Web Service，又不免受到性能问题的束缚。简单、普适、高性能这三点，似乎真的难以同时满足。</p><p>分裂的 RPC</p><p>由于一直没有一个同时满足以上三点的“完美 RPC 协议”出现，所以远程服务器调用这个小小的领域里，逐渐进入了群雄混战、百家争鸣的战国时代</p><p>发展方向</p><ul><li>朝着<strong>面向对象</strong>发展</li><li>朝着<strong>性能</strong>发展 （序列化效率和信息密度） 信息密度则取决于协议中有效荷载（Payload）所占总传输数据的比例大小，使用传输协议的层次越高，信息密度就越低</li><li>朝着<strong>简化</strong>发展</li></ul><p>到了最近几年，RPC 框架有明显的朝着更高层次（不仅仅负责调用远程服务，还管理远程服务）与插件化方向发展的趋势，不再追求独立地解决 RPC 的全部三个问题（表示数据、传递数据、表示方法），而是将一部分功能设计成扩展点，让用户自己去选择。<strong>框架聚焦于提供核心的、更高层次的能力</strong>，譬如提供负载均衡、服务注册、可观察性等方面的支持。</p><h3 id="rest-设计风格"><a class="markdownIt-Anchor" href="#rest-设计风格"></a> REST 设计风格</h3><p>REST 与 RPC 在思想上差异的核心是抽象的目标不一样，即<strong>面向资源</strong>的编程思想与面向过程的编程思想两者之间的区别。</p><p>“REST”（<strong>Re</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer）实际上是“HTT”（<strong>H</strong>yper<strong>t</strong>ext <strong>T</strong>ransfer）的进一步抽象，两者就如同接口与实现类的关系一般.</p><p>REST 中关键概念</p><ul><li><strong>资源</strong> 譬如你现在正在阅读一篇名为《REST 设计风格》的文章，这篇文章的内容本身（你可以将其理解为其蕴含的信息、数据）我们称之为“资源”。无论你是购买的书籍、是在浏览器看的网页、是打印出来看的文稿、是在电脑屏幕上阅读抑或是手机上浏览，尽管呈现的样子各不相同，但其中的信息是不变的，你所阅读的仍是同一份“资源”。</li><li><strong>表征</strong>  当你通过电脑浏览器阅读此文章时，浏览器向服务端发出请求“我需要这个资源的 HTML 格式”，服务端向浏览器返回的这个 HTML 就被称之为“表征”，你可能通过其他方式拿到本文的 PDF、Markdown、RSS 等其他形式的版本，它们也同样是一个资源的多种表征。</li><li><strong>状态</strong>（State）：当你读完了这篇文章，想看后面是什么内容时，你向服务器发出请求“给我下一篇文章”。但是“下一篇”是个相对概念，必须依赖“当前你正在阅读的文章是哪一篇”才能正确回应，这类在特定语境中才能产生的上下文信息即被称为“状态”。我们所说的有状态（Stateful）抑或是无状态（Stateless），都是只相对于服务端来说的，服务器要完成“取下一篇”的请求，要么自己记住用户的状态：这个用户现在阅读的是哪一篇文章，这称为有状态；要么客户端来记住状态，在请求的时候明确告诉服务器：我正在阅读某某文章，现在要读它的下一篇，这称为无状态。</li><li><strong>转移</strong>（Transfer）：无论状态是由服务端还是客户端来提供的，“取下一篇文章”这个行为逻辑必然只能由服务端来提供，因为只有服务端拥有该资源及其表征形式。服务器通过某种方式，把“用户当前阅读的文章”转变成“下一篇文章”，这就被称为“表征状态转移”。</li><li><strong>统一接口</strong>（Uniform Interface）：上面说的服务器“通过某种方式”让表征状态发生转移，具体是什么方式？如果你真的是用浏览器阅读本文电子版的话，请把本文滚动到结尾处，右下角有下一篇文章的 URI 超链接地址，这是服务端渲染这篇文章时就预置好的，点击它让页面跳转到下一篇，就是所谓“某种方式”的其中一种方式。任何人都不会对点击超链接网页会出现跳转感到奇怪，但你细想一下，URI 的含义是统一资源标识符，是一个名词，如何能表达出“转移”动作的含义呢？答案是 HTTP 协议中已经提前约定好了一套“统一接口”，它包括：GET、HEAD、POST、PUT、DELETE、TRACE、OPTIONS 七种基本操作，任何一个支持 HTTP 协议的服务器都会遵守这套规定，对特定的 URI 采取这些操作，服务器就会触发相应的表征状态转移。</li><li><strong>超文本驱动</strong>（Hypertext Driven）：尽管表征状态转移是由浏览器主动向服务器发出请求所引发的，该请求导致了“在浏览器屏幕上显示出了下一篇文章的内容”这个结果的出现。但是，你我都清楚这不可能真的是浏览器的主动意图，浏览器是根据用户输入的 URI 地址来找到网站首页，服务器给予的首页超文本内容后，浏览器再通过超文本内部的链接来导航到了这篇文章，阅读结束时，也是通过超文本内部的链接来再导航到下一篇。浏览器作为所有网站的通用的客户端，任何网站的导航（状态转移）行为都不可能是预置于浏览器代码之中，而是由服务器发出的请求响应信息（超文本）来驱动的。这点与其他带有客户端的软件有十分本质的区别，在那些软件中，业务逻辑往往是预置于程序代码之中的，有专门的页面控制器（无论在服务端还是在客户端中）来驱动页面的状态转移。</li><li><strong>自描述消息</strong>（Self-Descriptive Messages）：由于资源的表征可能存在多种不同形态，在消息中应当有明确的信息来告知客户端该消息的类型以及应如何处理这条消息。一种被广泛采用的自描述方法是在名为“Content-Type”的 HTTP Header 中标识出<a href="https://en.wikipedia.org/wiki/Media_type">互联网媒体类型</a>（MIME type），譬如“Content-Type : application/json; charset=utf-8”，则说明该资源会以 JSON 的格式来返回，请使用 UTF-8 字符集进行处理。</li></ul><p>RESTful 的系统</p><p>一套理想的、完全满足 REST 风格的系统应该满足以下六大原则</p><ul><li><strong>服务端与客户端分离</strong></li><li><strong>无状态</strong> （在服务端的内存、会话、数据库或者缓存等地方持有一定的状态成为一种是事实上存在，并将长期存在、被广泛使用的主流的方案。）</li><li><strong>可缓存</strong>REST 希望软件系统能够如同万维网一样，允许客户端和中间的通讯传递者（譬如代理）将部分服务端的应答缓存起来。运作良好的缓存机制可以减少客户端、服务器之间的交互，甚至有些场景中可以完全避免交互，这就进一步提高了性能。</li><li><strong>分层系统</strong>（Layered System）客户端一般不需要知道是否直接连接到了最终的服务器，抑或连接到路径上的中间服务器。中间服务器可以通过负载均衡和共享缓存的机制提高系统的可扩展性，这样也便于缓存、伸缩和安全策略的部署。该原则的典型的应用是内容分发网络（Content Distribution Network，CDN）。</li><li><strong>统一接口</strong> : 这是 REST 的另一条核心原则，REST 希望开发者面向资源编程，希望软件系统设计的重点放在抽象系统该有哪些资源上，而不是抽象系统该有哪些行为（服务）上。</li><li><strong>按需代码</strong>指任何按照客户端（譬如浏览器）的请求，将可执行的软件程序从服务器发送到客户端的技术，按需代码赋予了客户端无需事先知道所有来自服务端的信息应该如何处理、如何运行的宽容度。</li></ul><p>REST 好处</p><ul><li>降低的服务接口的学习成本。</li><li>资源天然具有集合与层次结构。以资源为中心抽象的接口，由于资源是名词，天然就可以产生集合与层次结构。</li><li>REST 绑定于 HTTP 协议。</li></ul><p>RMM 成熟度</p><ol><li>The Swamp of <a href="https://en.wikipedia.org/wiki/Plain_Old_XML">Plain Old XML</a>：完全不 REST。</li><li>Resources：开始引入资源的概念。</li><li>HTTP Verbs：引入统一接口，映射到 HTTP 协议的方法上。</li><li>Hypermedia Controls：超媒体控制在本文里面的说法是“超文本驱动”，在 Fielding 论文里的说法是“Hypertext As The Engine Of Application State，HATEOAS”，其实都是指同一件事情。</li></ol><p>不足与争议</p><p><strong>面向资源的编程思想只适合做 CRUD，面向过程、面向对象编程才能处理真正复杂的业务逻辑</strong></p><p><strong>REST 与 HTTP 完全绑定，不适合应用于要求高性能传输的场景中</strong></p><p><strong>REST 不利于事务支持</strong></p><p><strong>REST 没有传输可靠性支持</strong></p><p><strong>REST 缺乏对资源进行“部分”和“批量”的处理能力</strong></p><h2 id="事务处理"><a class="markdownIt-Anchor" href="#事务处理"></a> 事务处理</h2><h4 id="acid"><a class="markdownIt-Anchor" href="#acid"></a> ACID</h4><ul><li><strong>原子性</strong>（<strong>A</strong>tomic）：在同一项业务处理过程中，事务保证了对多个数据的修改，要么同时成功，要么同时被撤销。</li><li><strong>隔离性</strong>（<strong>I</strong>solation）：在不同的业务处理过程中，事务保证了各自业务正在读、写的数据互相独立，不会彼此影响。</li><li><strong>持久性</strong>（<strong>D</strong>urability）：事务应当保证所有成功被提交的数据修改都能够正确地被持久化，不丢失数据。</li></ul><p>目的</p><p>​保证系统中所有的数据都是符合期望的，且相互关联的数据之间不会产生矛盾，即数据状态的<strong>一致性</strong>（<strong>C</strong>onsistency）。</p><h3 id="本地事务"><a class="markdownIt-Anchor" href="#本地事务"></a> 本地事务</h3><p>仅仅适用于<strong>单个服务使用单个数据源</strong></p><p>实现原子性和持久性的最大困难是“写入磁盘”这个操作并不是原子的，不仅有“写入”与“未写入”状态，还客观地存在着“正在写”的中间状态。正因为写入中间状态与崩溃都不可能消除，所以如果不做额外保障措施的话，将内存中的数据写入磁盘，并不能保证原子性与持久性。</p><h4 id="原子性持久性"><a class="markdownIt-Anchor" href="#原子性持久性"></a> 原子性持久性</h4><p>实现原子性于持久性的两个方案</p><ul><li>提交日志 （Commit Logging ） 将修改数据这个操作所需的全部信息（修改后数据，数据物理块位置，什么改成什么等）日志落盘后才会开始修改数据</li><li>影子分页 （Commit Logging ）将拷贝的数据复制一份副本，然后对副本进行操作最后将数据的引用指针<strong>指向</strong>（原子性）修改后的数据</li></ul><p>按照事务提交时点为界划分</p><ul><li><strong>FORCE</strong>：当事务提交后，要求变动数据必须同时完成写入则称为 FORCE</li><li><strong>STEAL</strong>：在事务提交前，允许变动数据提前写入则称为 STEAL</li></ul><p>Write-Ahead Logging （NO-FORCE STEAL）</p><p>添加回滚日志UndoLog ，记录已经修改的数据，可以一边写写事务日志一般修改数据解决日志写入后才能一次性修改数据 占用大量内存</p><p>崩溃恢复</p><ul><li><strong>分析阶段</strong>（Analysis）：找出待恢复的事务集合 （已经commit完的与未commit的）</li><li><strong>重做阶段</strong>（Redo）：根据待恢复的事务（已经commit完的）集合来重演历史（幂等）</li><li><strong>回滚阶段</strong>（Undo）：根据 Undo Log 中的信息，回滚未commit完的数据（幂等）</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211213231725473.png" alt="image-20211213231725473" /></p><h4 id="隔离性"><a class="markdownIt-Anchor" href="#隔离性"></a> 隔离性</h4><p>实现方案 加锁</p><ul><li><strong>写锁</strong>（Write Lock）</li><li><strong>读锁</strong>（Read Lock）</li><li><strong>范围锁</strong>（Range Lock）：对于某个范围直接加排他锁，在这个范围内的数据不能被写入。如下语句是典型的加范围锁的例子：</li></ul><p><a href="https://en.wikipedia.org/wiki/Concurrency_control">并发控制理论</a>（Concurrency Control）决定了隔离程度与并发能力是相互抵触的，<strong>隔离程度越高，并发访问时的吞吐量就越低</strong>。</p><p>隔离级别</p><ul><li><p>可串行化： 强度最高的隔离性</p></li><li><p>可重复读： 读写锁，无范围锁    会产生<a href="https://en.wikipedia.org/wiki/Isolation_(database_systems)#Phantom_reads">幻读问题</a> 在事务执行过程中，两个完全相同的范围查询得到了不同的结果集。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">FROM</span> books <span class="keyword">WHERE</span> price <span class="operator">&lt;</span> <span class="number">100</span><span class="comment">/* 时间顺序：1，事务： T1 */</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> books(name,price) <span class="keyword">VALUES</span> (<span class="string">&#x27;深入理解Java虚拟机&#x27;</span>,<span class="number">90</span>)<span class="comment">/* 时间顺序：2，事务： T2 */</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">FROM</span> books <span class="keyword">WHERE</span> price <span class="operator">&lt;</span> <span class="number">100</span><span class="comment">/* 时间顺序：3，事务： T1 */</span></span><br></pre></td></tr></table></figure></li><li><p>读已提交：读锁在查询操作完成后就马上会释放。 <a href="https://en.wikipedia.org/wiki/Isolation_(database_systems)#Non-repeatable_reads">不可重复读问题</a> 在事务执行过程中，对同一行数据的两次查询得到了不同的结果。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> books <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;   <span class="comment">/* 时间顺序：1，事务： T1 */</span></span><br><span class="line">UPDATE books <span class="keyword">SET</span> price <span class="operator">=</span> <span class="number">110</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>; <span class="keyword">COMMIT</span>;<span class="comment">/* 时间顺序：2，事务： T2 */</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> books <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>; <span class="keyword">COMMIT</span>;   </span><br></pre></td></tr></table></figure></li><li><p>读未提交 完全不加读锁。 <a href="https://en.wikipedia.org/wiki/Isolation_(database_systems)#Dirty_reads">脏读问题</a> 在事务执行过程中，一个事务读取到了另一个事务未提交的数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> books <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;   <span class="comment">/* 时间顺序：1，事务： T1 */</span></span><br><span class="line"><span class="comment">/* 注意没有COMMIT */</span></span><br><span class="line">UPDATE books <span class="keyword">SET</span> price <span class="operator">=</span> <span class="number">90</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;<span class="comment">/* 时间顺序：2，事务： T2 */</span></span><br><span class="line"><span class="comment">/* 这条SELECT模拟购书的操作的逻辑 */</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> books <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;  <span class="comment">/* 时间顺序：3，事务： T1 */</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;  <span class="comment">/* 时间顺序：4，事务： T2 */</span></span><br></pre></td></tr></table></figure></li><li><p>完全不隔离  脏写问题 即一个事务的没提交之前的修改可以被另外一个事务的修改覆盖掉，(没有原子性 所以不讨论)</p></li></ul><p>无锁优化方案</p><p>“<a href="https://en.wikipedia.org/wiki/Multiversion_concurrency_control">多版本并发控制</a>”（Multi-Version Concurrency Control，MVCC）</p><p>MVCC 的基本思路是对数据库的任何修改都不会直接覆盖之前的数据，而是产生一个新版副本与老版本共存，以此达到读取时可以完全不加锁的目的。（CREATE_VERSION 和 DELETE_VERSION，这两个字段记录的值都是事务 ID）</p><ul><li>插入数据时：CREATE_VERSION 记录插入数据的事务 ID，DELETE_VERSION 为空。</li><li>删除数据时：DELETE_VERSION 记录删除数据的事务 ID，CREATE_VERSION 为空。</li><li>修改数据时：将修改数据视为“删除旧数据，插入新数据”的组合，即先将原有数据复制一份，原有数据的 DELETE_VERSION 记录修改数据的事务 ID，CREATE_VERSION 为空。复制出来的新数据的 CREATE_VERSION 记录修改数据的事务 ID，DELETE_VERSION 为空。</li></ul><p>将根据隔离级别来决定到底应该读取哪个版本的数据。</p><ul><li>隔离级别是<code>可重复读</code>：总是读取 CREATE_VERSION 小于或等于当前事务 ID 的记录，在这个前提下，如果数据仍有多个版本，则取最新（事务 ID 最大）的。</li><li>隔离级别是<code>读已提交</code>：总是取最新的版本即可，即最近被 Commit 的那个版本的数据记录。</li></ul><p>MVCC 是只针对“读+写”场景的优化，如果是两个事务同时修改数据，即“写+写”的情况</p><h3 id="全局事务"><a class="markdownIt-Anchor" href="#全局事务"></a> 全局事务</h3><p>一种适用于单个服务使用多个数据源场景</p><p><a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4">两段式提交</a>”（2 Phase Commit，2PC）协议</p><ul><li><strong>准备阶段</strong>：又叫作投票阶段，在这一阶段，协调者询问事务的所有参与者是否准备好提交，参与者如果已经准备好提交则回复 Prepared，否则回复 Non-Prepared。准备操作是在重做日志中记录全部事务提交操作所要做的内容，它与本地事务中真正提交的区别只是暂不写入最后一条 Commit Record 而已，这意味着在做完数据持久化后并不立即释放隔离性，即仍继续持有锁，维持数据对其他非事务内观察者的隔离状态。</li><li><strong>提交阶段</strong>：又叫作执行阶段，协调者如果在上一阶段收到所有事务参与者回复的 Prepared 消息，则先自己在本地持久化事务状态为 Commit，在此操作完成后向所有参与者发送 Commit 指令，所有参与者立即执行提交操作；否则，任意一个参与者回复了 Non-Prepared 消息，或任意一个参与者超时未回复，协调者将自己的事务状态持久化为 Abort 之后，向所有参与者发送 Abort 指令，参与者立即执行回滚操作。对于数据库来说，这个阶段的提交操作应是很轻量的，仅仅是持久化一条 Commit Record 而已，通常能够快速完成，只有收到 Abort 指令时，才需要根据回滚日志清理已提交的数据，这可能是相对重负载的操作。</li></ul><p>上面所说的协调者、参与者都是可以由数据库自己来扮演的，</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211214231409011.png" alt="image-20211214231409011" /></p><p>XA的前提：</p><ul><li>必须假设网络在提交阶段的短时间内是可靠的，即提交阶段不会丢失消息。同时也假设网络通信在全过程都不会出现误差，即可以丢失消息，但不会传递错误的消息.XA 的设计目标并不是解决诸如<a href="https://en.wikipedia.org/wiki/Byzantine_fault">拜占庭将军</a>一类的问题。</li><li>必须假设因为网络分区、机器崩溃或者其他原因而导致失联的节点最终能够恢复，不会永久性地处于失联状态。</li></ul><blockquote><p>拜占庭将军:In a Byzantine fault, a component such as a <a href="https://en.wikipedia.org/wiki/Server_(computing)">server</a> can inconsistently appear both failed and functioning to failure-detection systems, presenting different symptoms to different observers. It is difficult for the other components to declare it failed and shut it out of the network, because they need to first reach a <a href="https://en.wikipedia.org/wiki/Consensus_(computer_science)">consensus</a> regarding which component has failed in the first place.</p></blockquote><p>缺点</p><ul><li><strong>单点问题</strong> 协调者宕机，没有正常发送 Commit 或者 Rollback 的指令，那所有参与者都必须一直等待。</li><li><strong>性能问题</strong>：两次远程服务调用，三次数据持久化（准备阶段写重做日志，协调者做状态持久化，提交阶段在日志写入 Commit Record），性能由参与者集群中最慢决定,故而性能比较差。</li><li><strong>一致性风险</strong>：前面已经提到，两段式提交的成立是有前提条件的，当网络稳定性和宕机恢复能力的假设不成立时，仍可能出现一致性问题。</li></ul><blockquote><p>“<a href="https://en.wikipedia.org/wiki/Consensus_(computer_science)#Solvability_results_for_some_agreement_problems">FLP 不可能原理</a>”，证明了如果宕机最后不能恢复，那就不存在任何一种分布式协议可以正确地达成一致性结果。</p></blockquote><p><a href="https://zh.wikipedia.org/wiki/%E4%B8%89%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4">三段式提交</a>”（3 Phase Commit，3PC）协议</p><p>三段式提交把原本的两段式提交的准备阶段再细分为两个阶段，分别称为</p><ul><li>CanCommit（协调者让每个参与的数据库根据自身状态，评估该事务是否有可能顺利完成。）、</li><li>PreCommit，原准备阶段</li><li>DoCommit ，提交阶段 ，如果在 PreCommit 阶段之后发生了协调者宕机，即参与者没有能等到 DoCommit 的消息的话，默认的操作策略将是提交事务而不是回滚事务或者持续等待，这就相当于避免了协调者单点问题的风险。</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211215220806915.png" alt="image-20211215220806915" /></p><p>三段式提交对<strong>单点问题</strong>和回滚时的<strong>性能问题</strong>有所改善，但是它对<strong>一致性风险问题</strong>风险甚至反而是略有增加了的。回滚时超时反而提交了。</p><h3 id="共享事务"><a class="markdownIt-Anchor" href="#共享事务"></a> 共享事务</h3><p>多个服务共用同一个数据源。</p><p>实现共享事务，就必须新增一个“交易服务器”的中间角色，无论是用户服务、商家服务还是仓库服务，它们都通过同一台交易服务器来与数据库打交道。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211215221913321.png" alt="image-20211215221913321" /></p><p>该方案是与实际生产系统中的压力方向相悖的，一个服务集群里数据库才是压力最大而又最不容易伸缩拓展的重灾区，所以现实中只有类似<a href="https://www.proxysql.com/">ProxySQL</a>、<a href="https://mariadb.com/kb/en/maxscale/">MaxScale</a>这样用于对多个数据库实例做负载均衡的数据库代理（其实用 ProxySQL 代理单个数据库，再启用 Connection Multiplexing，已经接近于前面所提及的交易服务器方案了）</p><p>使用消息队列服务器来代替交易服务器。用户、商家、仓库的服务操作业务时，通过消息将所有对数据库的改动传送到消息队列服务器，通过消息的消费者来统一处理，实现由本地事务保障的持久化操作。这被称作“<a href="https://www.infoworld.com/article/2077963/distributed-transactions-in-spring--with-and-without-xa.html">单个数据库的消息驱动更新</a></p><h3 id="分布式事务"><a class="markdownIt-Anchor" href="#分布式事务"></a> 分布式事务</h3><p>多个服务同时访问多个数据源的事务处理机制</p><h4 id="cap"><a class="markdownIt-Anchor" href="#cap"></a> CAP</h4><p>彻底地击碎了XA 的事务机制可以在本节所说的分布式环境中也能良好地应用的美好的愿望</p><p>三个特性最多只能同时满足其中两个，<strong>由于一般不放弃分区容错性，故而只有AP(主流)跟CP</strong></p><ul><li><strong>一致性</strong>（<strong>C</strong>onsistency）：代表数据在任何时刻、任何分布式节点中所看到的都是符合预期的。一致性在分布式研究中是有严肃定义、有多种细分类型的概念，以后讨论分布式共识算法时，我们还会再提到一致性，那种面向副本复制的一致性与这里面向数据库状态的一致性严格来说并不完全等同，具体差别我们将在后续分布式共识算法中再作探讨。</li><li><strong>可用性</strong>（<strong>A</strong>vailability）：代表系统不间断地提供服务的能力，理解可用性要先理解与其密切相关两个指标：可靠性（Reliability）和可维护性（Serviceability）。可靠性使用平均无故障时间（Mean Time Between Failure，MTBF）来度量；可维护性使用平均可修复时间（Mean Time To Repair，MTTR）来度量。可用性衡量系统可以正常使用的时间与总时间之比，其表征为：A=MTBF/（MTBF+MTTR），即可用性是由可靠性和可维护性计算得出的比例值，譬如 99.9999%可用，即代表平均年故障修复时间为 32 秒。</li><li><strong>分区容忍性</strong>（<strong>P</strong>artition Tolerance）：代表分布式环境中部分节点因网络原因而彼此失联后，即与其他节点形成“网络分区”时，系统仍能正确地提供服务的能力。</li></ul><p>本章讨论的话题“事务”原本的目的就是获得“一致性”，而在分布式环境中，“一致性”却不得不成为通常被牺牲、被放弃的那一项属性。</p><p><a href="https://en.wikipedia.org/wiki/Eventual_consistency">最终一致性</a>”（Eventual Consistency），它是指：如果数据在一段时间之内没有被另外的操作所更改，那它最终将会达到与强一致性过程相同的结果，有时候面向最终一致性的算法也被称为“乐观复制算法”。</p><h4 id="base"><a class="markdownIt-Anchor" href="#base"></a> BASE</h4><ul><li>基本可用性（<strong>B</strong>asically <strong>A</strong>vailable）</li><li>-柔性事务（<strong>S</strong>oft State）</li><li>最终一致性（<strong>E</strong>ventually Consistent）</li></ul><h4 id="柔性事务实现方式"><a class="markdownIt-Anchor" href="#柔性事务实现方式"></a> 柔性事务实现方式</h4><h5 id="可靠事件队列"><a class="markdownIt-Anchor" href="#可靠事件队列"></a> 可靠事件队列</h5><p>靠着持续重试来保证可靠性的解决方案。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211215232245727.png" alt="image-20211215232245727" /></p><p>顺序</p><ul><li>事务排序：顺序就应该安排成最容易出错的最先进行。顺序就应该安排成最容易出错的最先进行</li><li>执行第一个事务：账号服务进行扣款业务，如扣款成功，则在自己的数据库建立一张消息表，里面存入一条消息。</li><li>信息服务轮询 ：根据消息表 轮询 重发 执行未成功事务 直到全部成功。在系统中建立一个消息服务，定时轮询消息表，将状态是“进行中”的消息同时发送到库存和商家服务节点中去。</li></ul><p>信息服务轮询的可重复性决定了所有被消息服务器发送的消息都必须具备幂等性，通常的设计是让消息带上一个唯一的事务 ID。</p><p>可靠事件队列只要第一步业务完成了，后续就没有失败回滚的概念，只许成功，不许失败。</p><p>消息服务可以由支持分布式事务的消息框架替代。</p><p>缺点</p><p><strong>整个过程完全没有任何隔离性可言</strong></p><h5 id="tcc-事务"><a class="markdownIt-Anchor" href="#tcc-事务"></a> TCC 事务</h5><p>Try-Confirm-Cancel”</p><p>步骤</p><ul><li><strong>Try</strong>：尝试执行阶段，完成所有业务可执行性的检查（保障一致性），并且预留好全部需用到的业务资源（保障隔离性）。</li><li><strong>Confirm</strong>：确认执行阶段，不进行任何业务检查，直接使用 Try 阶段准备的资源来完成业务处理。Confirm 阶段可能会重复执行，因此本阶段所执行的操作需要具备幂等性。</li><li><strong>Cancel</strong>：取消执行阶段，释放 Try 阶段预留的业务资源。Cancel 阶段可能会重复执行，也需要满足幂等性。</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211215232220122.png" alt="image-20211215232220122" /></p><p>实际步骤</p><ol><li>生成事务ID，记录到日志中</li><li>Try  遍历每一个服务 检查业务可行性，可行的话冻结资源 进入Confirm  否则 进入Cancel</li><li>Confirm  遍历每一个服务 完成业务操作 失败时重复Confirm 操作即进行最大努力交付。</li><li>Cancel 取消所有业务操作 释放冻结支援</li></ol><p>好处</p><ul><li>于用户代码层面，较高的灵活性，可以根据需要设计资源锁定的粒度。</li><li>业务执行时只操作预留资源，几乎不会涉及锁和资源的争用，具有很高的性能潜力。</li></ul><p>坏处</p><ul><li>更高的开发成本和更换事务实现方案的替换成本</li><li>业务侵入性</li></ul><p>基于某些分布式事务中间件（譬如阿里开源的<a href="https://seata.io/zh-cn/">Seata</a>）去完成</p><h5 id="saga-事务"><a class="markdownIt-Anchor" href="#saga-事务"></a> SAGA 事务</h5><p>将一个分布式环境中的大事务分解为一系列本地事务的设计模式。（通过数据补偿进行）</p><ul><li>大事务拆分若干个小事务，将整个分布式事务 T 分解为 n 个子事务，命名为 T1，T2，…，Ti，…，Tn。每个子事务都应该是或者能被视为是原子行为。如果分布式事务能够正常提交，其对数据的影响（最终一致性）应与连续按顺序成功提交 Ti等价。</li><li>为每一个子事务设计对应的补偿动作，命名为 C1，C2，…，Ci，…，Cn。Ti与 Ci必须满足以下条件：<ul><li>Ti与 Ci都具备幂等性。</li><li>Ti与 Ci满足交换律（Commutative），即先执行 Ti还是先执行 Ci，其效果都是一样的。</li><li>Ci必须能成功提交，即不考虑 Ci本身提交失败被回滚的情形，如出现就必须持续重试直至成功，或者要人工介入。</li></ul></li></ul><p>如果 T1到 Tn均成功提交，那事务顺利完成，否则，要采取以下两种恢复策略之一：</p><ul><li><strong>正向恢复</strong>（Forward Recovery）：如果 Ti事务提交失败，则一直对 Ti进行重试，直至成功为止（最大努力交付）。这种恢复方式不需要补偿，适用于事务最终都要成功的场景，譬如在别人的银行账号中扣了款，就一定要给别人发货。正向恢复的执行模式为：T1，T2，…，Ti（失败），Ti（重试）…，Ti+1，…，Tn。</li><li><strong>反向恢复</strong>（Backward Recovery）：如果 Ti事务提交失败，则一直执行 Ci对 Ti进行补偿，直至成功为止（最大努力交付）。这里要求 Ci必须（在持续重试后）执行成功。反向恢复的执行模式为：T1，T2，…，Ti（失败），Ci（补偿），…，C2，C1。</li></ul><p>SAGA 必须保证所有子事务都得以提交或者补偿，但 SAGA 系统本身也有可能会崩溃，所以它必须设计成与数据库类似的日志机制（被称为 SAGA Log）以保证系统恢复后可以追踪到子事务的执行情况，譬如执行至哪一步或者补偿至哪一步了。</p><p>SAGA 事务通常也不会直接靠裸编码来实现，一般也是在事务中间件的基础上完成，前面提到的 Seata 就同样支持 SAGA 事务模式。</p><h5 id="at-事务模式"><a class="markdownIt-Anchor" href="#at-事务模式"></a> <a href="https://seata.io/zh-cn/docs/overview/what-is-seata.html">AT 事务模式</a></h5><p>AT 事务是参照了 XA 两段提交协议实现的但在业务数据提交时自动拦截所有 SQL，将 SQL 对数据修改前、修改后的结果分别保存快照，生成行锁，通过本地事务一起提交到操作的数据源中，相当于自动记录了重做和回滚日志。如果分布式事务成功提交，那后续清理每个数据源中对应的日志数据即可；</p><p>大幅度地牺牲了隔离性，甚至直接影响到了原子性。会出现脏写。</p><p>脏写解决方式：</p><p>GTS 增加了一个“全局锁”（Global Lock）的机制来实现写隔离，要求本地事务提交之前，一定要先拿到针对修改记录的全局锁后才允许提交，没有获得全局锁之前就必须一直等待，这种设计以牺牲一定性能为代价，避免了有两个分布式事务中包含的本地事务修改了同一个数据，从而避免脏写。</p><p><strong>分布式事务中没有一揽子包治百病的解决办法，因地制宜地选用合适的事务处理方案才是唯一有效的做法。</strong></p><h2 id="透明多级分流系统"><a class="markdownIt-Anchor" href="#透明多级分流系统"></a> 透明多级分流系统</h2><p>不同的设施、部件在系统中有各自不同的价值。</p><p>系统进行流量规划设计原则</p><ul><li>第一条原则是尽可能减少单点部件</li><li>奥卡姆剃刀原则。不是每一个系统都要追求高并发、高可用的，根据系统的<strong>用户量</strong>、<strong>峰值流量</strong>和<strong>团队本身的技术与运维能力</strong>来考虑如何部署这些设施才是合理的做法，在能满足需求的前提下，<strong>最简单的系统就是最好的系统</strong>。</li></ul><h3 id="客户端缓存"><a class="markdownIt-Anchor" href="#客户端缓存"></a> 客户端缓存</h3><blockquote><p>客户端缓存（Client Cache）</p><p>HTTP 协议的无状态性决定了它必须依靠客户端缓存来解决网络传输效率上的缺陷。</p></blockquote><h4 id="强制缓存"><a class="markdownIt-Anchor" href="#强制缓存"></a> 强制缓存</h4><p>假设在某个时点到来以前，资源的内容和状态一定不会被改变，因此客户端可以无须经过任何请求，在该时点前一直持有和使用该资源的本地缓存副本。</p><p><strong>在用户主动刷新页面时应当自动失效</strong></p><p>以下两类 Header 实现强制缓存</p><ul><li><p><strong>Expires</strong>：Expires 是 HTTP/1.0 协议中开始提供的 Header，后面跟随一个截至时间参数。</p><ul><li>受限于客户端的本地时间。</li><li>无法处理涉及到用户身份的私有资源（私有资源如果缓冲到代理服务器或CDN则有泄露的风险）</li><li>无法描述“<strong>不</strong>缓存”的语义</li></ul></li><li><p><strong>Cache-Control</strong>：Cache-Control 是 HTTP/1.1 协议中定义的强制缓存 Header，它的语义比起 Expires 来说就丰富了很多</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=600</span><br></pre></td></tr></table></figure><p>标准参数</p><ul><li><p><strong>max-age</strong>和<strong>s-maxage</strong>：max-age 后面跟随一个以秒为单位的数字，表明相对于请求时间（在 Date Header 中会注明请求时间）多少秒以内缓存是有效的</p></li><li><p><strong>public</strong>和<strong>private</strong>：指明是否涉及到用户身份的私有资源，如果是 public，则可以被代理、CDN 等缓存，如果是 private，则只能由用户的客户端进行私有缓存。</p></li><li><p><strong>no-cache</strong>和<strong>no-store</strong>：no-cache 指明该资源不应该被缓存，必须从服务端获取，令强制缓存完全失效，但此时协商缓存机制依然是生效的；no-store 不强制会话中相同 URL 资源的重复获取，但禁止浏览器、CDN 等以任何形式保存该资源。</p></li><li><p><strong>no-transform</strong>：禁止资源被任何形式地修改。譬如，某些 CDN、透明代理支持自动 GZip 压缩图片或文本，以提升网络性能</p></li><li><p><strong>min-fresh</strong>和<strong>only-if-cached</strong>：这两个参数是仅用于客户端的请求 Header。min-fresh 后续跟随一个以秒为单位的数字，用于建议服务器能返回一个不少于该时间的缓存资源（即包含 max-age 且不少于 min-fresh 的数字）。only-if-cached 表示客户端要求不必给它发送资源的具体内容，此时客户端就仅能使用事先缓存的资源来进行响应，若缓存不能命中，就直接返回 503/Service Unavailable 错误。</p></li><li><p><strong>must-revalidate</strong>和<strong>proxy-revalidate</strong>：must-revalidate 表示在资源过期后，一定需要从服务器中进行获取，即超过了 max-age 的时间后，就等同于 no-cache 的行为，proxy-revalidate 用于提示代理、CDN 等设备资源过期后的缓存行为，除对象不同外，语义与 must-revalidate 完全一致。</p></li></ul></li></ul><h4 id="协商缓存"><a class="markdownIt-Anchor" href="#协商缓存"></a> 协商缓存</h4><p>基于检测的缓存机制，通常被称为“协商缓存”</p><p>在 HTTP 中协商缓存与强制缓存并没有互斥性，这两套机制是并行工作的</p><p>协商缓存有两种变动检查机制，分别是根据资源的修改时间进行检查，以及根据资源唯一标识是否发生变化来进行检查，</p><ul><li><p><strong>Last-Modified 和 If-Modified-Since</strong>：Last-Modified 是服务器的响应 Header，用于告诉客户端这个资源的最后修改时间。对于带有这个 Header 的资源，当客户端需要再次请求时，会通过 If-Modified-Since 把之前收到的资源最后修改时间发送回服务端。</p><p>如果此时服务端发现资源在该时间后没有被修改过，就只要返回一个 304/Not Modified 的响应即可，无须附带消息体，达到节省流量的目的，如下所示：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">304</span> Not Modified</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>public, max-age=600</span><br><span class="line"><span class="attribute">Last-Modified</span><span class="punctuation">: </span>Wed, 8 Apr 2020 15:31:30 GMT</span><br></pre></td></tr></table></figure><p>如果此时服务端发现资源在该时间之后有变动，就会返回 200/OK 的完整响应，在消息体中包含最新的资源，如下所示：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>public, max-age=600</span><br><span class="line"><span class="attribute">Last-Modified</span><span class="punctuation">: </span>Wed, 8 Apr 2020 15:31:30 GMT</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="attribute">Content</span></span></span><br></pre></td></tr></table></figure></li><li><p><strong>Etag 和 If-None-Match</strong>：Etag 是服务器的响应 Header，用于告诉客户端这个资源的唯一标识。HTTP 服务器可以根据自己的意愿来选择如何生成这个标识，譬如 Apache 服务器的 Etag 值默认是对文件的索引节点（INode），大小和最后修改时间进行哈希计算后得到的。对于带有这个 Header 的资源，当客户端需要再次请求时，会通过 If-None-Match 把之前收到的资源唯一标识发送回服务端。</p><p>如果此时服务端计算后发现资源的唯一标识与上传回来的一致，说明资源没有被修改过，就只要返回一个 304/Not Modified 的响应即可，无须附带消息体，达到节省流量的目的，如下所示：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">304</span> Not Modified</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>public, max-age=600</span><br><span class="line"><span class="attribute">ETag</span><span class="punctuation">: </span>&quot;28c3f612-ceb0-4ddc-ae35-791ca840c5fa&quot;</span><br></pre></td></tr></table></figure><p>如果此时服务端发现资源的唯一标识有变动，就会返回 200/OK 的完整响应，在消息体中包含最新的资源，如下所示：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>public, max-age=600</span><br><span class="line"><span class="attribute">ETag</span><span class="punctuation">: </span>&quot;28c3f612-ceb0-4ddc-ae35-791ca840c5fa&quot;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="attribute">Content</span></span></span><br></pre></td></tr></table></figure></li></ul><p>Last-Modified 标注的最后修改只能精确到<strong>秒级</strong>，不能准确标注文件一秒内的修改时间；也可能内容没变，Last-Modified变了。</p><p>Etag 是 HTTP 中<strong>一致性最强</strong>的缓存机制，但是每次服务端都必须对资源进行哈希计算，故而是<strong>性能最差</strong>的缓存机制。</p><p>Etag 和 Last-Modified 是允许一起使用的，服务器会优先验证 Etag，在 Etag 一致的情况下，再去对比 Last-Modified，这是为了防止有一些 HTTP 服务器未将文件修改日期纳入哈希范围内。</p><h4 id="单个资源识别"><a class="markdownIt-Anchor" href="#单个资源识别"></a> 单个资源识别</h4><p>HTTP 协议设计了以 Accept*（Accept、Accept-Language、Accept-Charset、Accept-Encoding）开头的一套请求 Header 和对应的以 Content-*（Content-Language、Content-Type、Content-Encoding）开头的响应 Header，这些 Headers 被称为 HTTP 的内容协商机制。</p><h4 id="多个资源标识"><a class="markdownIt-Anchor" href="#多个资源标识"></a> 多个资源标识</h4><p>Vary Header 对于一个 URL 能够获取多个资源的场景中，缓存也同样也需要有明确的标识来获知根据什么内容来对同一个 URL 返回给用户正确的资源</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Vary</span><span class="punctuation">: </span>Accept, User-Agent</span><br></pre></td></tr></table></figure><p>根据 MIME 类型和浏览器类型来缓存资源，获取资源时也需要根据请求 Header 中对应的字段来筛选出适合的资源版本。</p><p>刷新页面（F5）时也同样是生效的，只有用户强制刷新（Ctrl+F5）或者明确禁用缓存（譬如在 DevTools 中设定）时才会失效，</p><h3 id="域名缓存dns"><a class="markdownIt-Anchor" href="#域名缓存dns"></a> 域名缓存（DNS ）</h3><blockquote><p>DNS 也许是全世界最大、使用最频繁的信息查询系统，如果没有适当的分流机制，DNS 将会成为整个网络的瓶颈。</p></blockquote><p><strong>震惊！世界根域名服务器的 ZONE 文件竟然只有 2MB 大小</strong></p><p>DNS解析步骤</p><p>例如 <a href="http://www.icyfenix.com.cn">www.icyfenix.com.cn</a></p><ul><li>域名还原 ： <strong><a href="http://www.icyfenix.com.cn">www.icyfenix.com.cn</a>.</strong></li><li>客户端先检查本地的 DNS 缓存：根据<a href="https://en.wikipedia.org/wiki/Time_to_live">存活时间</a>（Time to Live，TTL）来衡量缓存的有效情况。</li><li>客户端将地址发送给本机操作系统中配置的本地 DNS（Local DNS）</li><li>本地 DNS 收到查询请求后判断 有无对于的<strong>权威域名服务器</strong><ul><li>是否有<code>www.icyfenix.com.cn</code>的权威服务器</li><li>是否有<code>icyfenix.com.cn</code>的权威服务器</li><li>是否有<code>com.cn</code>的权威服务器</li><li>是否有<code>cn</code>的权威服务器</li><li>. 的根域名服务器</li></ul></li><li>假如到根域名服务器后<ul><li>通过根域名服务器 得到 <code>cn</code>的权威服务器 的地址记录</li><li>通过“<code>cn</code>的权威服务器”，得到“<code>com.cn</code>的权威服务器”的地址记录</li><li>以此类推，最后找到能够解释<code>www.icyfenix.com.cn</code>的权威服务器地址</li></ul></li><li>通过“<code>www.icyfenix.com.cn</code>的权威服务器”，查询<code>www.icyfenix.com.cn</code>的地址记录，（譬如 IPv4 下的 IP 地址为 A 记录，IPv6 下的 AAAA 记录、主机别名 CNAME 记录，等等。）</li></ul><p>每种记录类型中还可以包括多条记录，以一个域名下配置多条不同的 A 记录为例，此时权威服务器可以根据自己的策略来进行选择，典型的应用是智能线路：根据访问者所处的不同地区、不同服务商等因素来确定返回最合适的 A 记录，将访问者路由到最合适的数据中心，达到智能加速的目的。</p><p>缺点优化</p><ul><li>极端情况下响应速度慢：“<a href="https://en.wikipedia.org/wiki/Link_prefetching">DNS 预取</a>”在网页加载时生成一个 link 请求，促使浏览器提前对该域名进行预解释，譬如下面代码所示：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;dns-prefetch&quot;</span> <span class="attr">href</span>=<span class="string">&quot;//domain.not-icyfenx.cn&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>受到中间人攻击的威胁：位于递归链底层或者来自本地运营商的 Local DNS 服务器的安全防护则相对松懈。</p><p><a href="https://en.wikipedia.org/wiki/DNS_over_HTTPS">HTTPDNS</a>（也称为 DNS over HTTPS，DoH）。它将原本的 DNS 解析服务开放为一个基于 HTTPS 协议的查询服务，替代基于 UDP 传输协议的 DNS 域名解析，通过程序代替操作系统直接从权威 DNS 或者可靠的 Local DNS 获取解析数据，从而绕过传统 Local DNS。</p></li></ul><h3 id="传输链路"><a class="markdownIt-Anchor" href="#传输链路"></a> 传输链路</h3><p>优化链路传输为目的的前端设计原则，譬如经典的<a href="https://developer.yahoo.com/performance/rules.html">雅虎 YSlow-23 条规则</a></p><p>缺陷：</p><p>HTTP 传输对象的主要特征是<strong>数量多、时间短、资源小、切换快</strong>。把小文件合并成大文件，在 HTTP/2 下是毫无好处的。</p><p>TCP 协议要求必须在<a href="https://en.wikipedia.org/wiki/Transmission_Control_Protocol#Connection_establishment">三次握手</a>而且还有<a href="https://en.wikipedia.org/wiki/TCP_congestion_control#Slow_start">慢启动</a>的特性，因此并不适合HTTP。为此优化为</p><ul><li><p>连接数优化 副作用：资源耦合 缓存效率下降</p></li><li><p>连接复用技术（连接<a href="https://en.wikipedia.org/wiki/Keepalive">Keep-Alive 机制</a>） 副作用是“<a href="https://en.wikipedia.org/wiki/Head-of-line_blocking">队首阻塞</a></p></li><li><p>HTTP/2 <a href="https://tools.ietf.org/html/rfc7540#page-15">多路复用</a> (最小单位由请求变成了 <strong>帧</strong> ，可同时多个连接数据混在一起 接收时数据重组，因此无需压缩请求数)</p></li><li><p>数据压缩</p></li><li><p>快速 UDP 网络连接（QUIC）以 UDP 协议为基础，提供可靠传输能力。</p><p>​优点如下</p><ul><li>能对每个流能做单独的控制 (一个流中发生错误，协议栈仍然可以独立地继续为其他流提供服务)</li><li>使用<strong>连接标识符</strong>唯一地标识客户端与服务器之间的连接，切换IP（数据切换wifi），原始连接连接标识符依然是有效的。</li><li>QUIC 连接失败时以零延迟回退到 TCP 连接</li></ul></li></ul><h3 id="内容分发网络"><a class="markdownIt-Anchor" href="#内容分发网络"></a> 内容分发网络</h3><blockquote><p>CDN 是一种十分古老而又十分透明，没什么存在感的分流系统，许多人都说听过它，但真正了解过它的人却很少。</p></blockquote><p>互联网系统的速度取决于以下四点因素：</p><ul><li>网站服务器出口带宽</li><li>用户客户端入口带宽。</li><li>从网站到用户之间经过的不同运营商之间互联节点的带宽</li><li>网站到用户之间的物理链路传输时延（Ping）</li></ul><p>内容分发网络的工作过程</p><ul><li><p><strong>路由解析</strong></p><ol><li><p>将服务器的 IP 地址在你的 CDN 服务商上注册为“源站”，注册后你会得到一个 CNAME</p></li><li><p>将得到的 CNAME 在你购买域名的 DNS 服务商上注册为一条 CNAME 记录。</p></li><li><p>当第一位用户来访你的站点时，将首先发生一次未命中缓存的 DNS 查询，域名服务商解析出 CNAME 后，返回给本地 DNS，至此之后链路解析的主导权就开始由内容分发网络的调度服务接管了。</p></li><li><p>本地 DNS 查询 CNAME 时，由于能解析该 CNAME 的权威服务器只有 CDN 服务商所架设的权威 DNS。DNS 服务将根据一定的均衡策略和参数，DNS 服务将根据一定的均衡策略和参数。</p></li><li><p>浏览器从本地 DNS 拿到 IP 地址，将该 IP 当作源站服务器来进行访问</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211222223531779.png" alt="image-20211222223531779" /></p></li></ol></li><li><p><strong>内容分发</strong>（CDN 获取源站资源的过程）</p><ul><li><strong>主动分发</strong>（Push）：分发由源站主动发起，将内容从源站或者其他资源库推送到用户边缘的各个 CDN 缓存节点上。通常需要源站、CDN 服务双方提供程序 API 接口层面的配合。一般用于网站要预载大量资源的场景。如：双十一抢购</li><li><strong>被动回源</strong>（Pull）：被动回源由用户访问所触发全自动、双向透明的资源缓存过程。当某个资源首次被用户请求的时候，CDN 缓存节点发现自己没有该资源，就会实时从源站中获取。首次访问通常是比较慢的，不适合应用于数据量较大的资源。完全的双向透明，</li></ul></li><li><p><strong>CDN 应用</strong></p><ol><li><p>加速静态资源</p></li><li><p>安全防御：CDN 在广义上可以视作网站的堡垒机</p></li><li><p>协议升级：不少 CDN 提供商都同时对接（代售 CA 的）SSL 证书服务，可以实现源站是 HTTP 协议的，而对外开放的网站是基于 HTTPS 的。</p></li><li><p>状态缓存：不仅可以缓存源站的资源，还可以缓存源站的状态，</p><p>譬如源站的</p><ul><li>301/302 转向，</li><li><a href="https://zh.wikipedia.org/wiki/OCSP%E8%A3%85%E8%AE%A2">OCSP 装订</a>加速 SSL 证书访问，</li><li>CDN 开启<a href="https://es.wikipedia.org/wiki/HTTP_Strict_Transport_Security">HSTS</a></li><li>404</li></ul></li><li><p>修改资源：CDN 可以在返回资源给用户的时候修改它的任何内容，以实现不同的目的。如</p><ul><li>未压缩的资源自动压缩并修改 Content-Encoding</li><li>未启用客户端缓存的内容加上缓存 Header</li><li>修改<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/CORS">CORS</a>的相关 Header，将源站不支持跨域的资源提供跨域能力</li><li>…</li></ul></li><li><p>访问控制：</p><ul><li><p>CDN 可以实现 IP 黑/白名单功能</p></li><li><p>不同的来访 IP 提供不同的响应结果</p></li><li><p>根据 IP 的访问流量来实现 QoS 控制</p></li><li><p>根据 HTTP 的 Referer 来实现防盗链</p></li></ul></li><li><p>注入功能：在不修改源站代码的前提下，为源站注入各种功能</p></li></ol></li></ul><h3 id="负载均衡"><a class="markdownIt-Anchor" href="#负载均衡"></a> 负载均衡</h3><blockquote><p>调度后方的多台机器，以统一的接口对外提供服务，承担此职责的技术组件被称为“负载均衡”。</p></blockquote><p>负载均衡，从形式上来说都可以分为两种：四层负载均衡和七层负载均衡。（经典的<a href="https://en.wikipedia.org/wiki/OSI_model">OSI 七层模型</a>中第四层传输层和第七层应用层。）</p><p>最典型的 1500 Bytes MTU 的以太网帧结构说明</p><table><thead><tr><th></th><th><strong>层</strong></th><th><strong>数据单元</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>7</td><td>应用层 Application Layer</td><td>数据 Data</td><td>提供为应用软件提供服务的接口，用于与其他应用软件之间的通信。典型协议：HTTP、HTTPS、FTP、Telnet、SSH、SMTP、POP3 等</td></tr><tr><td>6</td><td>表达层 Presentation Layer</td><td>数据 Data</td><td>把数据转换为能与接收者的系统格式兼容并适合传输的格式。</td></tr><tr><td>5</td><td>会话层 Session Layer</td><td>数据 Data</td><td>负责在数据传输中设置和维护计算机网络中两台计算机之间的通信连接。</td></tr><tr><td>4</td><td>传输层 Transport Layer</td><td>数据段 Segments</td><td>把传输表头加至数据以形成数据包。传输表头包含了所使用的协议等发送信息。典型协议：TCP、UDP、RDP、SCTP、FCP 等</td></tr><tr><td>3</td><td>网络层 Network Layer</td><td>数据包 Packets</td><td>决定数据的传输路径选择和转发，将网络表头附加至数据段后以形成报文（即数据包）。典型协议：IPv4/IPv6、IGMP、ICMP、EGP、RIP 等</td></tr><tr><td>2</td><td>数据链路层 Data Link Layer</td><td>数据帧 Frame</td><td>负责点对点的网络寻址、错误侦测和纠错。当表头和表尾被附加至数据包后，就形成数据帧（Frame）。典型协议：WiFi（802.11）、Ethernet（802.3）、PPP 等。</td></tr><tr><td>1</td><td>物理层 Physical Layer</td><td>比特流 Bit</td><td>在物理网络上传送数据帧，它负责管理电脑通信设备和网络媒体之间的互通。包括了针脚、电压、线缆规范、集线器、中继器、网卡、主机接口卡等。</td></tr></tbody></table><p>现在所说的“四层负载均衡”其实是多种均衡器工作模式的统称，“四层”的意思是说这些工作模式的共同特点是维持着同一个 TCP 连接，而不是说它只工作在第四层。</p><h4 id="数据链路层负载均衡"><a class="markdownIt-Anchor" href="#数据链路层负载均衡"></a> 数据链路层负载均衡</h4><blockquote><p>每一块网卡都有独立的 MAC 地址，以太帧上这两个地址告诉了交换机，此帧应该是从连接在交换机上的哪个端口的网卡发出，送至哪块网卡的。</p></blockquote><p>数据链路层负载均衡(三角传输模式 单臂模式 直接路由 )所做的工作，是<strong>修改请求的数据帧中的 MAC 目标地址</strong>，让用户原本是发送给负载均衡器的请求的数据帧，被二层交换机根据新的 MAC 目标地址转发到服务器集群中对应的服务器（后文称为“真实服务器”，Real Server）的网卡上，这样真实服务器就获得了一个原本目标并不是发送给它的数据帧。<strong>需要把真实物理服务器集群所有机器的<a href="https://en.wikipedia.org/wiki/Virtual_IP_address">虚拟 IP 地址</a>（Virtual IP Address，VIP）配置成与负载均衡器的虚拟 IP 一样</strong>。响应结果就不再需要通过负载均衡服务器进行地址交换，可将响应结果的数据包直接从真实服务器返回给用户的客户端。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211222231334218.png" alt="image-20211222231334218" /></p><h4 id="网络层负载均衡"><a class="markdownIt-Anchor" href="#网络层负载均衡"></a> 网络层负载均衡</h4><p>分组数据包的 Headers 部分说明</p><table><thead><tr><th>长度</th><th>存储信息</th></tr></thead><tbody><tr><td>0-4 Bytes</td><td>版本号（4 Bits）、首部长度（4 Bits）、分区类型（8 Bits)、总长度（16 Bits）</td></tr><tr><td>5-8 Bytes</td><td>报文计数标识（16 Bits）、标志位（4 Bits）、片偏移（12 Bits）</td></tr><tr><td>9-12 Bytes</td><td>TTL 生存时间（8 Bits）、上层协议代号（8 Bits）、首部校验和（16 Bits）</td></tr><tr><td>13-16 Bytes</td><td>源地址（32 Bits）</td></tr><tr><td>17-20 Bytes</td><td>目标地址（32 Bits）</td></tr><tr><td>20-60 Bytes</td><td>可选字段和空白填充</td></tr></tbody></table><p>网络层负载均衡通过改变这里面的 IP 地址来实现数据包的转发。</p><p>两种常见的修改方式</p><ul><li>保持原来的数据包不变，新创建一个数据包,这个新数据包的 Headers 中<strong>写入真实服务器的 IP 作为目标地址</strong>,原来数据包的 Headers 和 Payload 整体作为另一个新的数据包的 Payload。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 零零散散 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/11/13/%E9%BB%91%E7%BE%A4%E6%99%96%20%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/11/13/%E9%BB%91%E7%BE%A4%E6%99%96%20%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="黑群晖-折腾笔记"><a class="markdownIt-Anchor" href="#黑群晖-折腾笔记"></a> 黑群晖 折腾笔记</h1><p>前段时间咸鱼入了个星际蜗牛~~~  折腾了一波 最近不小心把系统弄崩了 干脆重新安装系统并把折腾过程记录下来</p><h2 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h2><p>黑群晖的安装参考的是阿文菌大佬的几篇教程</p><p><a href="https://post.smzdm.com/p/ar0v2on7/">黑群晖NAS保姆级教程：手把手教您安装DS918+固件，开启显卡解码功能！3分钟玩转黑群NAS!</a></p><p>启动盘软件尽量使用管理员权限打开</p><p>Intel和博通网卡的无法安装918+ 无奈之下只能安装917</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>架构师笔记</title>
      <link href="/2021/09/01/%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/09/01/%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="架构师笔记"><a class="markdownIt-Anchor" href="#架构师笔记"></a> 架构师笔记</h1><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210726194139113.png" alt="image-20210726194139113" /></p><p>综合知识 先做容易的，清晰的题，模棱两可的放后面</p><p>案例分析：提高分析能力</p><p>论文：组织内容能力，主观性较强，</p><p>知识点表</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210726194700680.png" alt="image-20210726194700680" /></p><h1 id="计算机组成与体系结构"><a class="markdownIt-Anchor" href="#计算机组成与体系结构"></a> 计算机组成与体系结构</h1><h2 id="计算机结构分类"><a class="markdownIt-Anchor" href="#计算机结构分类"></a> 计算机结构分类：</h2><p><strong>Flynm</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210726195134263.png" alt="image-20210726195134263" /></p><p><strong>CISC与RISC</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210726195536038.png" alt="image-20210726195536038" /></p><p>CISC:计算机早期使用指令类型多且复杂</p><p>RISC：计算机开始通用开始要求简洁，精简。</p><h2 id="层次化存储"><a class="markdownIt-Anchor" href="#层次化存储"></a> 层次化存储</h2><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210817122330834.png" alt="image-20210817122330834" /></p><h3 id="cache"><a class="markdownIt-Anchor" href="#cache"></a> Cache</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210817122731235.png" alt="image-20210817122731235" /></p><h3 id="内存"><a class="markdownIt-Anchor" href="#内存"></a> 内存</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210817123809270.png" alt="image-20210817123809270" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210817124358300.png" alt="image-20210817124358300" /></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">地</mi><mi mathvariant="normal">址</mi><mi mathvariant="normal">单</mi><mi mathvariant="normal">元</mi><mi mathvariant="normal">数</mi><mi mathvariant="normal">量</mi><mo>=</mo><mi mathvariant="normal">结</mi><mi mathvariant="normal">束</mi><mi mathvariant="normal">地</mi><mi mathvariant="normal">址</mi><mo>−</mo><mi mathvariant="normal">开</mi><mi mathvariant="normal">始</mi><mi mathvariant="normal">地</mi><mi mathvariant="normal">址</mi><mo>+</mo><mn>1</mn><mo>=</mo><mi>C</mi><mn>7</mn><mi>F</mi><mi>F</mi><mi>F</mi><mi>H</mi><mo>−</mo><mi>A</mi><mi>C</mi><mn>000</mn><mi>H</mi><mo>+</mo><mn>1</mn><mo>=</mo><mi>C</mi><mn>8000</mn><mi>H</mi><mo>−</mo><mi>A</mi><mi>C</mi><mn>000</mn><mi>H</mi><mo>=</mo><mn>1</mn><mi>C</mi><mn>000</mn><mi>H</mi><mo>=</mo><mn>112</mn><mi>K</mi></mrow><annotation encoding="application/x-tex">地址单元数量=结束地址-开始地址+1 = C7FFFH-AC000H+1= C8000H-AC000H= 1C000H=112K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mord cjk_fallback">地</span><span class="mord cjk_fallback">址</span><span class="mord cjk_fallback">单</span><span class="mord cjk_fallback">元</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">量</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord cjk_fallback">结</span><span class="mord cjk_fallback">束</span><span class="mord cjk_fallback">地</span><span class="mord cjk_fallback">址</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord cjk_fallback">开</span><span class="mord cjk_fallback">始</span><span class="mord cjk_fallback">地</span><span class="mord cjk_fallback">址</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord">7</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord">8</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span></span></p><h2 id="磁盘"><a class="markdownIt-Anchor" href="#磁盘"></a> 磁盘</h2><p><img src= "/img/loading.gif" data-lazy-src="C:/Users/94241/AppData/Roaming/Typora/typora-user-images/image-20210905234454557.png" alt="image-20210905234454273" /></p><p><img src= "/img/loading.gif" data-lazy-src="./%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0.assets/image-20210817131713396.png" alt="image-20210817131713396" /></p><p>优化前【图左】 除了第一块其余都要重新转一圈</p><p>第一块：旋转时间+处理时间 = （33/11块）+3=6</p><p>其余需要选择一周再处理=(33+3)*10=360</p><p>sum=366</p><p>优化后每块不需要选择一周只需要旋转一格</p><p>旋转时间+处理时间 = （（33/11块）+3）*10=66</p><h3 id="计算机性能指标"><a class="markdownIt-Anchor" href="#计算机性能指标"></a> 计算机性能指标</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210818134801747.png" alt="image-20210818134801747" /></p><h3 id="阿姆达尔"><a class="markdownIt-Anchor" href="#阿姆达尔"></a> 阿姆达尔</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210818134829675.png" alt="image-20210818134829675" /></p><p>不用看公式什么的直接通过性能差设未知数计算。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210818134637598.png" alt="image-20210818134637598" /></p><h3 id="性能评估方法"><a class="markdownIt-Anchor" href="#性能评估方法"></a> 性能评估方法</h3><p><img src= "/img/loading.gif" data-lazy-src="H:/blog/source/_posts/%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0.assets/image-20210818135712561.png" alt="image-20210818135712561" /></p><p>基准程序法：类似跑分，比较准确</p><h3 id="性能监控方法"><a class="markdownIt-Anchor" href="#性能监控方法"></a> 性能监控方法</h3><p><img src= "/img/loading.gif" data-lazy-src="H:/blog/source/_posts/%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0.assets/image-20210818135935475.png" alt="image-20210818135935475" /></p><h2 id="进程管理"><a class="markdownIt-Anchor" href="#进程管理"></a> 进程管理</h2><h3 id="状态转移图"><a class="markdownIt-Anchor" href="#状态转移图"></a> 状态转移图</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210818140415027.png" alt="image-20210818140415027" /></p><p>添加人为挂起使三态变成五态</p><h3 id="前驱图"><a class="markdownIt-Anchor" href="#前驱图"></a> 前驱图</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210818140714346.png" alt="image-20210818140714346" /></p><p>表达一系列活动的前后依赖关系</p><h3 id="同步与互斥"><a class="markdownIt-Anchor" href="#同步与互斥"></a> 同步与互斥</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210818141033635.png" alt="image-20210818141033635" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210818141402626.png" alt="image-20210818141402626" /></p><p>同步：资源多，不一定等待</p><p>互斥：资源单一 必须等待</p><h3 id="pv操作"><a class="markdownIt-Anchor" href="#pv操作"></a> PV操作</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210819123736815.png" alt="image-20210819123736815" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210819123941900.png" alt="image-20210819123941900" /></p><p>P：-1 等待阻塞</p><p>V：+1 解锁</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210819124146741.png" alt="image-20210819124146741" /></p><p>前驱图中：v -&gt; P</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210819124302236.png" alt="image-20210819124302236" /></p><p>非抢占式优先调度算法： V操作时优先执行完本进程 在执行V操作释放的进程操作</p><h3 id="死锁问题"><a class="markdownIt-Anchor" href="#死锁问题"></a> 死锁问题</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210819124526113.png" alt="image-20210819124526113" /></p><p>不发生死锁最少资源</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">进</mi><mi mathvariant="normal">程</mi><mi mathvariant="normal">数</mi><mo>∗</mo><mi mathvariant="normal">（</mi><mi mathvariant="normal">每</mi><mi mathvariant="normal">个</mi><mi mathvariant="normal">进</mi><mi mathvariant="normal">程</mi><mi mathvariant="normal">所</mi><mi mathvariant="normal">需</mi><mi mathvariant="normal">资</mi><mi mathvariant="normal">源</mi><mi mathvariant="normal">数</mi><mo>−</mo><mn>1</mn><mi mathvariant="normal">）</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">进程数*（每个进程所需资源数-1）+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord cjk_fallback">进</span><span class="mord cjk_fallback">程</span><span class="mord cjk_fallback">数</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord cjk_fallback">（</span><span class="mord cjk_fallback">每</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">进</span><span class="mord cjk_fallback">程</span><span class="mord cjk_fallback">所</span><span class="mord cjk_fallback">需</span><span class="mord cjk_fallback">资</span><span class="mord cjk_fallback">源</span><span class="mord cjk_fallback">数</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord cjk_fallback">）</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210819124911511.png" alt="image-20210819124911511" /></p><h3 id="银行家算法"><a class="markdownIt-Anchor" href="#银行家算法"></a> 银行家算法</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210819125645006.png" alt="image-20210819125645006" /></p><p>银行家算法：分配资源时保证该进程可以执行完，</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210819125731717.png" alt="image-20210819125731717" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210819125753741.png" alt="image-20210819125753741" /></p><h2 id="存储管理"><a class="markdownIt-Anchor" href="#存储管理"></a> 存储管理</h2><h3 id="页式存储"><a class="markdownIt-Anchor" href="#页式存储"></a> 页式存储</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210819132313762.png" alt="image-20210819132313762" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210819132412995.png" alt="image-20210819132412995" /></p><p>逻辑地址转物理地址</p><ol><li>根据页面大小计算出页内地址(长度一致) ：4k=2<sup>12=16</sup>3 即三位 A29H</li><li>剩余为页号 5 对应的页侦号为6 即为 6A29H</li></ol><p>淘汰：优先淘汰 内存中最近未使用的 即为4</p><p>页面置换算法（淘汰算法）</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210819195033235.png" alt="image-20210819195033235" /></p><p>OPT：在知道访问顺序情况下最优算法（理论上）</p><p>抖动：加了资源效率不一定最好</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210819195407148.png" alt="抖动实例" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210819195754684.png" alt="image-20210819195754684" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210819200236947.png" alt="image-20210819200236947" /></p><p>每一个访问两次内存 2*3=6</p><p>指令在中间只会有一次缺页中断，而数据有两次，2*2+1=5</p><h3 id="索引文件结构"><a class="markdownIt-Anchor" href="#索引文件结构"></a> 索引文件结构</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210819201350682.png" alt="image-20210819201350682" /></p><p>使用索引文件结构来扩充文件大小限制。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210823121631089.png" alt="image-20210823121631089" /></p><p>逻辑块号从0开始</p><h3 id="文件和树型目录结构"><a class="markdownIt-Anchor" href="#文件和树型目录结构"></a> 文件和树型目录结构</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210823121846284.png" alt="image-20210823121846284" /></p><h3 id="空闲存储空间管理"><a class="markdownIt-Anchor" href="#空闲存储空间管理"></a> 空闲存储空间管理</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210823122307911.png" alt="image-20210823122307911" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210823122317446.png" alt="image-20210823122317446" /></p><p>第几个字 从1开始算</p><p>第几号物理块从0开始算</p><h3 id="数据传输控制"><a class="markdownIt-Anchor" href="#数据传输控制"></a> 数据传输控制</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210823122716091.png" alt="image-20210823122716091" /></p><h3 id="微内核"><a class="markdownIt-Anchor" href="#微内核"></a> 微内核</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210823122927731.png" alt="image-20210823122927731" /></p><h2 id="数据库系统"><a class="markdownIt-Anchor" href="#数据库系统"></a> 数据库系统</h2><h3 id="三级模式两级映射"><a class="markdownIt-Anchor" href="#三级模式两级映射"></a> 三级模式两级映射</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210823123340901.png" alt="image-20210823123340901" /></p><p>内模式 ： 数据存储</p><p>概念模式 ： 表</p><p>外模式 ：视图</p><h3 id="数据库设计"><a class="markdownIt-Anchor" href="#数据库设计"></a> 数据库设计</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210823123953106.png" alt="image-20210823123953106" /></p><h3 id="er模型"><a class="markdownIt-Anchor" href="#er模型"></a> ER模型</h3><p><strong>集成方法</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210823124759903.png" alt="image-20210823124759903" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210823124836083.png" alt="image-20210823124836083" /></p><p>最少关系模式 = 实体个数加上 联系数 （方框加菱形）</p><h3 id="关系代数"><a class="markdownIt-Anchor" href="#关系代数"></a> 关系代数</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210823125209659.png" alt="image-20210823125209659" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210823125419387.png" alt="image-20210823125419387" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210823130044558.png" alt="image-20210823130044558" /></p><p>并：S1S2的和 再去重</p><p>交：重复内容</p><p>差：S1减去公共部分</p><p>笛卡尔积：每一条都与另一个集合每一条做集合</p><p>投影：选择某几列 （select）</p><p>选择：选择某几行（where）</p><p>联接：笛卡尔积去相同列并选择 （join）</p><p>自然联接：用相同列连接</p><h3 id="规范化理论"><a class="markdownIt-Anchor" href="#规范化理论"></a> 规范化理论</h3><h4 id="函数依赖"><a class="markdownIt-Anchor" href="#函数依赖"></a> 函数依赖</h4><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210823130504203.png" alt="image-20210823130504203" /></p><p><img src= "/img/loading.gif" data-lazy-src="%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0.assets/image-20210823130722618.png" alt="image-20210823130722618" /></p><h4 id="键"><a class="markdownIt-Anchor" href="#键"></a> 键</h4><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210823131059655.png" alt="image-20210823131059655" /></p><p>超键可能存在冗余属性</p><p>候选键不存在冗余属性，可以为多个</p><p>主键只能一个</p><p><strong>求候选键</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210823131508731.png" alt="image-20210823131508731" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210823131521033.png" alt="image-20210823131521033" /></p><ul><li><p>组合依赖不可单独画箭头</p></li><li><p>没有入度为0时用中间节点找</p></li></ul><h3 id="范式"><a class="markdownIt-Anchor" href="#范式"></a> 范式</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210823131658191.png" alt="image-20210823131658191" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210823132645640.png" alt="image-20210823132645640" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210823132654152.png" alt="image-20210823132654152" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210823132734432.png" alt="image-20210823132734432" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210823132803305.png" alt="image-20210823132803305" /></p><h3 id="模式分解"><a class="markdownIt-Anchor" href="#模式分解"></a> 模式分解</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210824122457968.png" alt="image-20210824122457968" /></p><p>保持函数依赖： 补充非冗余的函数依赖</p><h3 id="并发控制"><a class="markdownIt-Anchor" href="#并发控制"></a> 并发控制</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210824124454395.png" alt="image-20210824124454395" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210824124541948.png" alt="image-20210824124541948" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210824124755339.png" alt="image-20210824124755339" /></p><h3 id="数据库安全"><a class="markdownIt-Anchor" href="#数据库安全"></a> 数据库安全</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210824124944543.png" alt="image-20210824124944543" /></p><h3 id="数据备份"><a class="markdownIt-Anchor" href="#数据备份"></a> 数据备份</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210824125130444.png" alt="image-20210824125130444" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210824125232252.png" alt="image-20210824125232252" /></p><p>差量与增量备份差别在于备份上一次<strong>全面备份</strong>还是上一次 备份</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210824125610069.png" alt="image-20210824125610069" /></p><p><strong>分布式数据库</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210824125950413.png" alt="image-20210824125950413" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210824130310351.png" alt="image-20210824130310351" /></p><h3 id="数据库优化"><a class="markdownIt-Anchor" href="#数据库优化"></a> 数据库优化</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210824130957363.png" alt="image-20210824130957363" /></p><h3 id="数据仓库与数据挖掘"><a class="markdownIt-Anchor" href="#数据仓库与数据挖掘"></a> 数据仓库与数据挖掘</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210824131359123.png" alt="image-20210824131359123" /></p><p>类似现在的BI</p><p><strong>NoSQL</strong></p><p><strong><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210824132037615.png" alt="image-20210824132037615" /></strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210824132236098.png" alt="image-20210824132236098" /></p><h3 id="反规范化技术"><a class="markdownIt-Anchor" href="#反规范化技术"></a> 反规范化技术</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210824132334106.png" alt="image-20210824132334106" /></p><h2 id="计算机网络"><a class="markdownIt-Anchor" href="#计算机网络"></a> 计算机网络</h2><h2 id="七层模型"><a class="markdownIt-Anchor" href="#七层模型"></a> 七层模型</h2><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210824133713341.png" alt="image-20210824133713341" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210824133703677.png" alt="image-20210824133703677" /></p><p>不能有第三层设备</p><h3 id="网络技术标准与协议"><a class="markdownIt-Anchor" href="#网络技术标准与协议"></a> 网络技术标准与协议</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210824133922182.png" alt="image-20210824133922182" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210825123423646.png" alt="image-20210825123423646" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210825123531971.png" alt="image-20210825123531971" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210825123907804.png" alt="image-20210825123907804" /></p><h3 id="网络规划与设计"><a class="markdownIt-Anchor" href="#网络规划与设计"></a> 网络规划与设计</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210825124406986.png" alt="image-20210825124406986" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210825124557037.png" alt="image-20210825124557037" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210825124626793.png" alt="image-20210825124626793" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210825124740556.png" alt="image-20210825124740556" /></p><h3 id="无线网"><a class="markdownIt-Anchor" href="#无线网"></a> 无线网</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210825124756370.png" alt="image-20210825124756370" /></p><h3 id="接入技术"><a class="markdownIt-Anchor" href="#接入技术"></a> 接入技术</h3><p><img src= "/img/loading.gif" data-lazy-src="%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0.assets/image-20210825124950370.png" alt="image-20210825124950370" /></p><h3 id="网络存储"><a class="markdownIt-Anchor" href="#网络存储"></a> 网络存储</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210825130502757.png" alt="image-20210825130502757" /></p><h3 id="raid"><a class="markdownIt-Anchor" href="#raid"></a> Raid</h3><p><img src= "/img/loading.gif" data-lazy-src="%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0.assets/image-20210825131014363.png" alt="image-20210825131014363" /></p><h3 id="ipv6"><a class="markdownIt-Anchor" href="#ipv6"></a> IPv6</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210825131403053.png" alt="image-20210825131403053" /></p><h3 id="物联网"><a class="markdownIt-Anchor" href="#物联网"></a> 物联网</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210825131705608.png" alt="image-20210825131705608" /></p><p><strong>RFID</strong><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210825131922736.png" alt="image-20210825131922736" /></p><p><strong>二维码</strong><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210825131950166.png" alt="image-20210825131950166" /></p><p><strong>M2M</strong><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210825132023424.png" alt="image-20210825132023424" /></p><h3 id="云计算"><a class="markdownIt-Anchor" href="#云计算"></a> 云计算</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210825132139960.png" alt="image-20210825132139960" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210825132455206.png" alt="image-20210825132455206" /></p><h2 id="企业信息化战略与实施"><a class="markdownIt-Anchor" href="#企业信息化战略与实施"></a> 企业信息化战略与实施</h2><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210825153429586.png" alt="image-20210825153429586" /></p><h3 id="信息系统概念"><a class="markdownIt-Anchor" href="#信息系统概念"></a> <strong>信息系统概念</strong></h3><h3 id="image-20210825153732191"><a class="markdownIt-Anchor" href="#image-20210825153732191"></a> <img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210825153732191.png" alt="image-20210825153732191" /></h3><h3 id="信息系统类型"><a class="markdownIt-Anchor" href="#信息系统类型"></a> <strong>信息系统类型</strong></h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210825153852473.png" alt="image-20210825153852473" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210825154403894.png" alt="image-20210825154403894" /></p><h3 id="电子政务"><a class="markdownIt-Anchor" href="#电子政务"></a> <strong>电子政务</strong></h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210825160315249.png" alt="image-20210825160315249" /></p><h3 id="erp"><a class="markdownIt-Anchor" href="#erp"></a> <strong>ERP</strong></h3><h3 id="image-20210825160507101"><a class="markdownIt-Anchor" href="#image-20210825160507101"></a> <img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210825160507101.png" alt="image-20210825160507101" /></h3><h3 id="crm"><a class="markdownIt-Anchor" href="#crm"></a> <strong>CRM</strong></h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210825161004314.png" alt="image-20210825161004314" /></p><p>提高客户体验度，促进企业发展。</p><h3 id="scm"><a class="markdownIt-Anchor" href="#scm"></a> <strong>SCM</strong></h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210825161339810.png" alt="image-20210825161339810" /></p><h3 id="bi"><a class="markdownIt-Anchor" href="#bi"></a> <strong>BI</strong></h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210825162157347.png" alt="image-20210825162157347" /></p><p>新瓶装老旧，其实就是数据仓库</p><h3 id="edi"><a class="markdownIt-Anchor" href="#edi"></a> <strong>EDI</strong></h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210825162547526.png" alt="image-20210825162547526" /></p><h3 id="企业应用集成"><a class="markdownIt-Anchor" href="#企业应用集成"></a> <strong>企业应用集成</strong></h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210825163017719.png" alt="image-20210825163017719" /></p><p><img src= "/img/loading.gif" data-lazy-src="%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0.assets/image-20210825163402670.png" alt="image-20210825163402670" /></p><h3 id="电子商务"><a class="markdownIt-Anchor" href="#电子商务"></a> 电子商务</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210825163534732.png" alt="image-20210825163534732" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210825163534732.png" alt="image-20210825164352552" /></p><h3 id="信息系统开发方法"><a class="markdownIt-Anchor" href="#信息系统开发方法"></a> 信息系统开发方法</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210825164527464.png" alt="image-20210825164527464" /></p><p>结构化方法缺点： 流程固化不好改变，没有复用性</p><h1 id="软件工程"><a class="markdownIt-Anchor" href="#软件工程"></a> 软件工程</h1><h2 id="开发模型"><a class="markdownIt-Anchor" href="#开发模型"></a> 开发模型</h2><p><img src= "/img/loading.gif" data-lazy-src="H:/blog/source/_posts/%E6%9E%B6%E6%9E%84%E5%B8%88%E7%AC%94%E8%AE%B0.assets/image-20210825171517051.png" alt="image-20210825171517051" /></p><h3 id="瀑布模型"><a class="markdownIt-Anchor" href="#瀑布模型"></a> 瀑布模型</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210825171352182.png" alt="image-20210825171352182" /></p><p>结构化方法</p><p>只适合与需求明确(或者二次开发)</p><h3 id="原型"><a class="markdownIt-Anchor" href="#原型"></a> <strong>原型</strong></h3><p>往往只应用于需求分析阶段</p><h3 id="增量模型"><a class="markdownIt-Anchor" href="#增量模型"></a> 增量模型</h3><p>先做核心模块,再做其他模块,多次交付,保证核心模块没问题</p><h3 id="螺旋模型"><a class="markdownIt-Anchor" href="#螺旋模型"></a> 螺旋模型</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210825171923702.png" alt="image-20210825171923702" /></p><p>多个模型组合</p><p>特殊:风险分析</p><h3 id="v模型"><a class="markdownIt-Anchor" href="#v模型"></a> V模型</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210825172411445.png" alt="image-20210825172411445" /></p><p>测试被细化</p><p>需求与验收有一一对应关系.从测试角度看待问题.</p><p>测试贯彻开发的始终</p><h3 id="喷泉模型"><a class="markdownIt-Anchor" href="#喷泉模型"></a> 喷泉模型</h3><p>面向对象</p><h3 id="rad快速开发模型"><a class="markdownIt-Anchor" href="#rad快速开发模型"></a> RAD快速开发模型</h3><p>比如说 VB 在标准构建模型中开发,快速构建应用系统</p><h3 id="构建组装模型cbsd"><a class="markdownIt-Anchor" href="#构建组装模型cbsd"></a> 构建组装模型(CBSD)</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210826123754307.png" alt="image-20210825172708687" /></p><p>提高软件开发复用性,降低成本,提高可靠性.</p><h3 id="统一过程"><a class="markdownIt-Anchor" href="#统一过程"></a> 统一过程</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210826123754307.png" alt="image-20210826123754307" /></p><h3 id="敏捷开发"><a class="markdownIt-Anchor" href="#敏捷开发"></a> 敏捷开发</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210826124219573.png" alt="image-20210826124219573" /></p><h3 id="逆向工程"><a class="markdownIt-Anchor" href="#逆向工程"></a> 逆向工程</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210826124858624.png" alt="image-20210826124858624" /></p><h3 id="需求工程"><a class="markdownIt-Anchor" href="#需求工程"></a> 需求工程</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210826125442131.png" alt="image-20210826125442131" /></p><h3 id="uml"><a class="markdownIt-Anchor" href="#uml"></a> UML</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210826125932905.png" alt="image-20210826125932905" /></p><p>用例图不确定</p><h3 id="需求开发"><a class="markdownIt-Anchor" href="#需求开发"></a> 需求开发</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210827123950586.png" alt="image-20210827123950586" /></p><h3 id="结构化需求分析"><a class="markdownIt-Anchor" href="#结构化需求分析"></a> 结构化需求分析</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210830132133554.png" alt="image-20210830132133554" /></p><h3 id="分层数据流图"><a class="markdownIt-Anchor" href="#分层数据流图"></a> <strong>分层数据流图</strong></h3><p>SA-DF</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210830131645732.png" alt="image-20210830131645732" /></p><p>行为模型转换图 STD</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210830132034034.png" alt="image-20210830132034034" /></p><p>ER图</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210830132007608.png" alt="image-20210830132007608" /></p><h3 id="业务流程重组"><a class="markdownIt-Anchor" href="#业务流程重组"></a> 业务流程重组</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210830132239939.png" alt="image-20210830132239939" /></p><p>变化大，风险高。</p><h3 id="业务流程管理"><a class="markdownIt-Anchor" href="#业务流程管理"></a> 业务流程管理</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210830132558576.png" alt="image-20210830132558576" /></p><p>逐步革新</p><h2 id="系统设计"><a class="markdownIt-Anchor" href="#系统设计"></a> 系统设计</h2><h3 id="人机界面设计"><a class="markdownIt-Anchor" href="#人机界面设计"></a> 人机界面设计</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210830132645299.png" alt="image-20210830132645299" /></p><h3 id="结构化设计"><a class="markdownIt-Anchor" href="#结构化设计"></a> 结构化设计</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210830133353619.png" alt="image-20210830133353619" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210830133412286.png" alt="image-20210830133412286" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210830133651644.png" alt="image-20210830133651644" /></p><p>需掌握变化控制</p><h3 id="设计原则"><a class="markdownIt-Anchor" href="#设计原则"></a> 设计原则</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210830133736153.png" alt="image-20210830133736153" /></p><h3 id="设计模式"><a class="markdownIt-Anchor" href="#设计模式"></a> 设计模式</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210830134113627.png" alt="image-20210830134113627" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210830134125283.png" alt="image-20210830134125283" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210830134414466.png" alt="image-20210830134414466" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210830134726406.png" alt="image-20210830134726406" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210830135131771.png" alt="image-20210830135131771" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210830140019055.png" alt="image-20210830140019055" /></p><h3 id="软件测试"><a class="markdownIt-Anchor" href="#软件测试"></a> 软件测试</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210901123514508.png" alt="image-20210901123514508" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210901124123352.png" alt="image-20210901124123352" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210901125401619.png" alt="image-20210901125401619" /></p><p>面向对象测试</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210902124725027.png" alt="image-20210902124725027" /></p><p>应用并不会，暂时停留在概念。</p><p><strong>测试管理</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210902124944106.png" alt="image-20210902124944106" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210902125436009.png" alt="image-20210902125436009" /></p><h3 id="系统运行与维护"><a class="markdownIt-Anchor" href="#系统运行与维护"></a> <strong>系统运行与维护</strong></h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210902125509792.png" alt="image-20210902125509792" /></p><p><strong>CMMI</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210902200949192.png" alt="image-20210902200949192" /></p><h3 id="范围管理"><a class="markdownIt-Anchor" href="#范围管理"></a> 范围管理</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210925211515659.png" alt="image-20210925211515659" /></p><h3 id="时间管理"><a class="markdownIt-Anchor" href="#时间管理"></a> 时间管理</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210925211704768.png" alt="image-20210925211704768" /></p><p>衔接到wbs阶段</p><h2 id="软件架构设计"><a class="markdownIt-Anchor" href="#软件架构设计"></a> 软件架构设计</h2><h3 id="软件架构概念"><a class="markdownIt-Anchor" href="#软件架构概念"></a> 软件架构概念</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211020211433138.png" alt="image-20211020211433138" /></p><h3 id="软件架构风格"><a class="markdownIt-Anchor" href="#软件架构风格"></a> 软件架构风格</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211020213349162.png" alt="image-20211020213349162" /></p><h3 id="数据流风格"><a class="markdownIt-Anchor" href="#数据流风格"></a> 数据流风格</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211020221051718.png" alt="image-20211020221051718" /></p><h3 id="调用返回风格"><a class="markdownIt-Anchor" href="#调用返回风格"></a> 调用返回风格</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211020220955651.png" alt="image-20211020220955651" /></p><h3 id="独立构建风格"><a class="markdownIt-Anchor" href="#独立构建风格"></a> 独立构建风格</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211020221114178.png" alt="image-20211020221114178" /></p><h3 id="虚拟机风格"><a class="markdownIt-Anchor" href="#虚拟机风格"></a> 虚拟机风格</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211020221322317.png" alt="image-20211020221322317" /></p><h3 id="仓库风格"><a class="markdownIt-Anchor" href="#仓库风格"></a> 仓库风格</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211020221423738.png" alt="image-20211020221423738" /></p><h3 id="cs架构"><a class="markdownIt-Anchor" href="#cs架构"></a> CS架构</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211020221630932.png" alt="image-20211020221630932" /></p><p>三层CS</p><p>把变化比较多的业务逻辑部分抽出来在服务器上</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211020222119933.png" alt="image-20211020222119933" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211020222215623.png" alt="image-20211020222215623" /></p><p>分层只是逻辑层面，而物理可以分开也可以一起部署部署</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211020222303400.png" alt="image-20211020222303400" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211020222316317.png" alt="image-20211020222316317" /></p><h3 id="bs三层结构"><a class="markdownIt-Anchor" href="#bs三层结构"></a> B/S三层结构</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211020222344992.png" alt="image-20211020222344992" /></p><p>刚出来就迅速被B/S淘汰</p><h3 id="混合架构"><a class="markdownIt-Anchor" href="#混合架构"></a> 混合架构</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211020222809820.png" alt="image-20211020222809820" /></p><h3 id="富互联网架构"><a class="markdownIt-Anchor" href="#富互联网架构"></a> 富互联网架构</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211020222921920.png" alt="image-20211020222921920" /></p><p>加强版BS</p><p>Ajex 异步通信</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211020223230344.png" alt="image-20211020223230344" /></p><p>mushup 内容聚合 减少客户端压力</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211020223253174.png" alt="image-20211020223253174" /></p><h3 id="基于服务的架构soa"><a class="markdownIt-Anchor" href="#基于服务的架构soa"></a> 基于服务的架构SOA</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211020224544721.png" alt="image-20211020224544721" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211020224554640.png" alt="image-20211020224554640" /></p><h3 id="实现方式"><a class="markdownIt-Anchor" href="#实现方式"></a> 实现方式</h3><p>webservers</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211020224806811.png" alt="image-20211020224806811" /></p><p>ESB 总线</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211020225838928.png" alt="image-20211020225838928" /></p><h3 id="架构评估-质量属性"><a class="markdownIt-Anchor" href="#架构评估-质量属性"></a> 架构评估-质量属性</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211020230242517.png" alt="image-20211020230242517" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211020230713611.png" alt="image-20211020230713611" /></p><h3 id="具体评估方法"><a class="markdownIt-Anchor" href="#具体评估方法"></a> 具体评估方法</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211020231011834.png" alt="image-20211020231011834" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211020231706163.png" alt="image-20211020231706163" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211020232009685.png" alt="image-20211020232009685" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211020232856338.png" alt="image-20211020232856338" /></p><h3 id="软件产品线技术"><a class="markdownIt-Anchor" href="#软件产品线技术"></a> 软件产品线技术</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211021225042374.png" alt="image-20211021225042374" /></p><p>组织结构</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211021225707348.png" alt="image-20211021225707348" /></p><p>建立方式</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211021225759774.png" alt="image-20211021225759774" /></p><h3 id="中间件"><a class="markdownIt-Anchor" href="#中间件"></a> 中间件</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211021230420302.png" alt="image-20211021230420302" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211021230540790.png" alt="image-20211021230540790" /></p><h3 id="j2ee与net"><a class="markdownIt-Anchor" href="#j2ee与net"></a> J2EE与NET</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211021230739787.png" alt="image-20211021230739787" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211021231055400.png" alt="image-20211021231055400" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211021231106626.png" alt="image-20211021231106626" /></p><h3 id="mvc"><a class="markdownIt-Anchor" href="#mvc"></a> MVC</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211021231555143.png" alt="image-20211021231555143" /></p><p>MVP</p><p><img src= "/img/loading.gif" data-lazy-src="C:/Users/94241/AppData/Roaming/Typora/typora-user-images/image-20211021233250501.png" alt="image-20211021233250501" /></p><h3 id="安全属性"><a class="markdownIt-Anchor" href="#安全属性"></a> 安全属性</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211021233514039.png" alt="image-20211021233514039" /></p><h3 id="加密技术"><a class="markdownIt-Anchor" href="#加密技术"></a> 加密技术</h3><p>对称加密</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211023173647999.png" alt="image-20211023173647999" /></p><p>非对称机密</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211023173627136.png" alt="image-20211023173627136" /></p><h3 id="信息摘要"><a class="markdownIt-Anchor" href="#信息摘要"></a> 信息摘要</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211023184901666.png" alt="image-20211023184901666" /></p><h3 id="数字签名"><a class="markdownIt-Anchor" href="#数字签名"></a> 数字签名</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211023185310663.png" alt="image-20211023185310663" /></p><h3 id="数据信封"><a class="markdownIt-Anchor" href="#数据信封"></a> 数据信封</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211023193235723.png" alt="image-20211023193235723" /></p><h3 id="练习题-设计加密系统"><a class="markdownIt-Anchor" href="#练习题-设计加密系统"></a> 练习题 设计加密系统</h3><h3 id="image-20211023194204390"><a class="markdownIt-Anchor" href="#image-20211023194204390"></a> <img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211023194204390.png" alt="image-20211023194204390" /></h3><h3 id="pki公钥体系"><a class="markdownIt-Anchor" href="#pki公钥体系"></a> PKI公钥体系</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211023194231340.png" alt="image-20211023194231340" /></p><h3 id="ca"><a class="markdownIt-Anchor" href="#ca"></a> CA</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211023194512817.png" alt="image-20211023194512817" /></p><h3 id="信息系统安全保障层次"><a class="markdownIt-Anchor" href="#信息系统安全保障层次"></a> 信息系统安全保障层次</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211023194706345.png" alt="image-20211023194706345" /></p><h3 id="安全审计与安全系统设计原则"><a class="markdownIt-Anchor" href="#安全审计与安全系统设计原则"></a> 安全审计与安全系统设计原则</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211023195811432.png" alt="image-20211023195811432" /></p><h3 id="各个网络层次安全保障"><a class="markdownIt-Anchor" href="#各个网络层次安全保障"></a> 各个网络层次安全保障</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211023200124178.png" alt="image-20211023200124178" /></p><h3 id="网络威胁与攻击"><a class="markdownIt-Anchor" href="#网络威胁与攻击"></a> 网络威胁与攻击</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211023202203411.png" alt="image-20211023202203411" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211023202148818.png" alt="" /></p><h3 id="dos与ddos"><a class="markdownIt-Anchor" href="#dos与ddos"></a> Dos与DDos</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211023202318121.png" alt="image-20211023202318121" /></p><h3 id="防火墙"><a class="markdownIt-Anchor" href="#防火墙"></a> 防火墙</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211023202944830.png" alt="image-20211023202944830" /></p><h3 id="入侵检测"><a class="markdownIt-Anchor" href="#入侵检测"></a> 入侵检测</h3><h3 id="image-20211023203509189病毒与木马"><a class="markdownIt-Anchor" href="#image-20211023203509189病毒与木马"></a> <img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211023203509189.png" alt="image-20211023203509189" />病毒与木马</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211023203925540.png" alt="image-20211023203925540" /></p><h2 id="系统可靠性分析与设计"><a class="markdownIt-Anchor" href="#系统可靠性分析与设计"></a> 系统可靠性分析与设计</h2><h3 id="故障模型"><a class="markdownIt-Anchor" href="#故障模型"></a> 故障模型</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211023204448489.png" alt="image-20211023204448489" /></p><h3 id="可靠性指标"><a class="markdownIt-Anchor" href="#可靠性指标"></a> 可靠性指标</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211023204820237.png" alt="image-20211023204820237" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211023210419835.png" alt="image-20211023210419835" /></p><h3 id="串并联系统"><a class="markdownIt-Anchor" href="#串并联系统"></a> 串并联系统</h3><p><img src= "/img/loading.gif" data-lazy-src="" alt="image-20211023211515941" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211023211941308.png" alt="image-20211023211941308" /></p><h3 id="系统冗余"><a class="markdownIt-Anchor" href="#系统冗余"></a> 系统冗余</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211023212445807.png" alt="image-20211023212445807" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211023212615631.png" alt="image-20211023212615631" /></p><h3 id="容错程序设计"><a class="markdownIt-Anchor" href="#容错程序设计"></a> 容错程序设计</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211023212822692.png" alt="image-20211023212822692" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211023213354864.png" alt="image-20211023213354864" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211023213431831.png" alt="image-20211023213431831" /></p><p>try catch</p><h3 id="双机容错与集群技术"><a class="markdownIt-Anchor" href="#双机容错与集群技术"></a> 双机容错与集群技术</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211023214610295.png" alt="image-20211023214610295" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211023214958473.png" alt="image-20211023214958473" /></p><h3 id="法律法规"><a class="markdownIt-Anchor" href="#法律法规"></a> 法律法规</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211023215818463.png" alt="image-20211023215818463" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211023215920061.png" alt="image-20211023215920061" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211023221826550.png" alt="image-20211023221826550" /></p><h3 id="标准的分类"><a class="markdownIt-Anchor" href="#标准的分类"></a> 标准的分类</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211023234133965.png" alt="image-20211023234133965" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211023234321146.png" alt="image-20211023234321146" /></p><h2 id="数学与经济管理"><a class="markdownIt-Anchor" href="#数学与经济管理"></a> 数学与经济管理</h2><h3 id="图论应用"><a class="markdownIt-Anchor" href="#图论应用"></a> 图论应用</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211023234531630.png" alt="image-20211023234531630" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211023234847924.png" alt="image-20211023234847924" /></p><h3 id="线性规划"><a class="markdownIt-Anchor" href="#线性规划"></a> 线性规划</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211023235055656.png" alt="image-20211023235055656" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211023235108953.png" alt="image-20211023235108953" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211023235157282.png" alt="image-20211023235157282" /></p><h3 id="运筹方法"><a class="markdownIt-Anchor" href="#运筹方法"></a> 运筹方法</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211023235221144.png" alt="image-20211023235221144" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211023235233229.png" alt="image-20211023235233229" /></p><p>取大是指最好情况而不是最大值，有些方案最好情况下反而是最小值</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211023235301755.png" alt="image-20211023235301755" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211024123810321.png" alt="image-20211024123810321" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211024124206817.png" alt="image-20211024124206817" /></p><h3 id="状态转移矩阵"><a class="markdownIt-Anchor" href="#状态转移矩阵"></a> 状态转移矩阵</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211024124243511.png" alt="image-20211024124243511" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211024124451586.png" alt="image-20211024124451586" /></p><h3 id="数学建模"><a class="markdownIt-Anchor" href="#数学建模"></a> 数学建模</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211024124510854.png" alt="image-20211024124510655" /></p><h3 id="系统架构设计论文"><a class="markdownIt-Anchor" href="#系统架构设计论文"></a> 系统架构设计论文</h3><h3 id="考试大纲"><a class="markdownIt-Anchor" href="#考试大纲"></a> 考试大纲</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211024214401815.png" alt="image-20211024214401815" /></p><h3 id="格式"><a class="markdownIt-Anchor" href="#格式"></a> 格式</h3><h3 id="image-20211024214438968"><a class="markdownIt-Anchor" href="#image-20211024214438968"></a> <img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211024214438968.png" alt="image-20211024214438968" /></h3><h3 id="步骤"><a class="markdownIt-Anchor" href="#步骤"></a> 步骤</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211024214504024.png" alt="image-20211024214504024" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211024214517320.png" alt="image-20211024214517320" /></p><h3 id="摘要"><a class="markdownIt-Anchor" href="#摘要"></a> 摘要</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211024214542004.png" alt="image-20211024214542004" /></p><h3 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211024214610165.png" alt="image-20211024214610165" /></p>]]></content>
      
      
      
        <tags>
            
            <tag> 零零散散 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 编程的逻辑笔记</title>
      <link href="/2021/06/07/Java-%E7%BC%96%E7%A8%8B%E7%9A%84%E9%80%BB%E8%BE%91%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/06/07/Java-%E7%BC%96%E7%A8%8B%E7%9A%84%E9%80%BB%E8%BE%91%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="java-编程的逻辑"><a class="markdownIt-Anchor" href="#java-编程的逻辑"></a> Java 编程的逻辑</h1><h2 id="编程基础"><a class="markdownIt-Anchor" href="#编程基础"></a> 编程基础</h2><p><strong>程序</strong>：基本上就是告诉计算机要操作的数据和执行的指令序列，即对什么数据做什么操作</p><h3 id="数据类型和变量"><a class="markdownIt-Anchor" href="#数据类型和变量"></a> 数据类型和变量</h3><ul><li>整数类型：byte/short/int/long（取值范围1/2/4/8）</li><li>小数类型：float/double（不同的取值范围和精度）</li><li>-字符类型：char（单个字符）</li><li>真假类型：boolean（真假）</li></ul><p><strong>变量</strong>：给数据起名字，方便找不同的数据，它的值可以变，但含义不应变。</p><h3 id="数组类型"><a class="markdownIt-Anchor" href="#数组类型"></a> 数组类型</h3><p><strong>三种赋值形式</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int[] arr = &#123;1,2,3&#125;;</span><br><span class="line">int[] arr = new int[]&#123;1,2,3&#125;;</span><br><span class="line">int[] arr = new int[3]; //3可以为变量，生成动态的长度的数组</span><br></pre></td></tr></table></figure><p><strong>数组长度确定后不可变</strong></p><p><strong>默认值</strong>：数值类型的值为0, boolean为false, char为空字符</p><p><strong>数组内存空间</strong>：一个基本类型变量，内存中只会有一块对应的内存空间。但数组有两块：一块用于存储数组内容本身，另一块用于存储内容的位置。</p><h3 id="基本运算"><a class="markdownIt-Anchor" href="#基本运算"></a> 基本运算</h3><p><strong>算术运算</strong></p><ol><li>运算时要注意结果的范围，使用恰当的数据类型</li><li>小数计算结果不精确</li></ol><p><strong>比较运算</strong></p><ol><li>（a++）是先用原来的值进行其他操作，然后再对自己做修改</li><li>（++a）是先对自己做修改，再用修改后的值进行其他操作。</li></ol><p><strong>逻辑运算</strong></p><ul><li><p>与（&amp;）：两个都为true才是true，只要有一个是false就是false；</p></li><li><p>或（|）：只要有一个为true就是true，都是false才是false；</p></li><li><p>非（!）：针对一个变量，true会变成false,false会变成true；</p></li><li><p>异或（^）：两个相同为false，两个不相同为true；</p></li></ul><h3 id="条件执行"><a class="markdownIt-Anchor" href="#条件执行"></a> 条件执行</h3><p><strong>if语句</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if(判断条件)&#123;</span><br><span class="line">代码块1</span><br><span class="line">else&#123;</span><br><span class="line">代码块2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在if/else if/else中，判断的顺序是很重要的，后面的判断只有在前面的条件为<strong>false</strong>的时候才会执行</p><p><strong>三元运算符</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">判断条件?表达式1:表达式2</span><br></pre></td></tr></table></figure><p><strong>switch</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">switch(表达式)&#123;</span><br><span class="line">case 值1:</span><br><span class="line">    break;</span><br><span class="line">    case 值2:</span><br><span class="line">    break;</span><br><span class="line">    default:代码n+1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表达式值的数据类型只能是byte、short、int、char、枚举和String（Java 7以后 ) break是指跳出switch语句</p><p><strong>实现原理</strong></p><p>程序最终都是一条条的指令，CPU有一个指令指示器，指向下一条要执行的指令.有一些特殊的指令，称为跳转指令，这些指令会修改指令指示器的值，让CPU跳到一个指定的地方执行。跳转有两种：一种是条件跳转；另一种是无条件跳转。条件跳转检查某个条件，满足则进行跳转，无条件跳转则是直接进行跳转。</p><p>if、if/else、if/else if/else、三元运算符都会转换为条件跳转和无条件跳转，</p><p>switch的转换和具体系统实现有关。</p><ul><li>分支比较少:跳转指令</li><li>分支比较多：跳转表（ key为条件值（编译器会自动排序，方便二分查找），value 为跳转地址）</li></ul><p>跳转表中如果值是连续的，则优化为一个数组，连找都不用找了</p><p>因为需要排序所以switch类型需要支持排序(byte/short/int/string(通过hashCode))</p><p><strong>不支持Long</strong>（跳转表值的存储空间一般为32位，容纳不下long）</p><p><strong>条件执行的本质依赖于条件跳转、无条件跳转和跳转表。</strong></p><h3 id="循环"><a class="markdownIt-Anchor" href="#循环"></a> 循环</h3><p>多次重复执行某些类似的操作</p><p><strong>while</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while（条件语句）&#123;</span><br><span class="line">代码块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>do/while</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">do&#123;</span><br><span class="line">代码块;</span><br><span class="line">&#125;while(条件语句)</span><br></pre></td></tr></table></figure><p>条件语句是什么，代码块都会至少执行一次</p><p><strong>for</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(初始化语句;循环条件;步进操作)&#123;</span><br><span class="line">循环体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>循环条件必须返回一个boolean类型外，其他语句没有什么要求(甚至可以为空 for（；；）)</p><p>执行的流程:</p><ol><li>执行初始化指令；</li><li>检查循环条件是否为true，如果为false，则跳转到第6步；</li><li>循环条件为真，执行循环体；</li><li>执行步进操作；</li><li>步进操作执行完后，跳转到第2步，即继续检查循环条件；</li><li>for循环后面的语句。</li></ol><p><strong>foreach</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(int element :arr)&#123;</span><br><span class="line">System.out.println (element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>循环控制</strong></p><p><strong>break</strong>：提前结束循环</p><p>continue：跳过循环体中剩下的代码，然后执行步进操作</p><p><strong>实现原理</strong></p><p>和if一样，循环内部也是靠条件转移和无条件转移指令实现的，在if中，跳转只会往后面跳，而for会往前面跳，第6行就是无条件跳转指令。break/continue语句也都会转换为跳转指令。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/xiaozhuo_Q/images/raw/master/blog/image-20210607224455526.png" alt="image-20210607224455526" /></p><p>解决复杂问题的基本策略是<strong>分而治之</strong>，将复杂问题分解为若干相对简单的子问题，然后子问题再分解为更小的子问题……</p><h3 id="函数的用法"><a class="markdownIt-Anchor" href="#函数的用法"></a> 函数的用法</h3><p>使用函数来减少重复代码和分解复杂操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 函数名字(参数类型 参数名字,...)&#123;</span><br><span class="line">    操作</span><br><span class="line">    return 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回值：函数可以没有返回值，如果没有返回值则类型写成void，如果有则在函数代码中必须使用return语句返回一个值，这个值的类型需要和声明的返回值类型一致。</p><p>Main函数表示程序的入口；</p><p>在函数中修改数组元素内容和在调用者中修改是完全一样的。</p><p>return可以用于函数内的任意地方</p><p>需要的返回值是一种复合结果时可以使用对象；</p><p>同一个类里，函数可以重名,但参数不同(重载).Java编译器会<strong>自动进行类型转换</strong>，并寻找最匹配的函数</p><p>调用自己的函数就叫<strong>递归函数</strong>(递归层数过多会爆栈，<strong>栈溢出</strong>错误)</p><p>递归其实是有开销的，而且使用不当，可能会出现意外的结果，可以通过循环实现</p><p>通过函数来减少重复代码、分解复杂操作是计算机程序的一种重要思维方式。</p><p><strong>基本原理</strong></p><ol><li>从main函数开始顺序执行</li><li>函数调用可以看作一个无条件跳转</li><li>跳转到<strong>对应函数的指令处</strong>开始执行</li><li>碰到return语句或者函数结尾的时候，再执行一次无条件跳转</li><li>跳转回调用方，执行<strong>调用函数后的下一条指令</strong>。</li></ol><p>计算机系统主要使用内存中的<strong>栈</strong>来存放函数调用过程中需要的数据，包括<strong>参数</strong>、<strong>返回地址</strong>，以及<strong>函数内定义的局部变量</strong>。</p><p>使用CPU内的一个<strong>存储器</strong>存储返回值</p><p>代码及对于栈执行情况</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/xiaozhuo_Q/images/raw/master/blog/image-20210607235453570.png" alt="image-20210607235453570" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/xiaozhuo_Q/images/raw/master/blog/image-20210607234315250.png" alt="image-20210607234315250" /></p><p><strong>数组和对象类型</strong>，实际的内容空间一般不是分配在栈上的，而是分配在堆。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/xiaozhuo_Q/images/raw/master/blog/image-20210607234331934.png" alt="image-20210607234331934" /></p><p><strong>递归调用</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/xiaozhuo_Q/images/raw/master/blog/image-20210607234340878.png" alt="image-20210607234340878" /></p><p>递归函数的执行过程，函数代码虽然只有一份，但在执行的过程中，每调用一次，就会有一次入栈，生成一份不同的参数、局部变量和返回地址。</p><p>每一次调用都需要分配额外的栈空间用于存储参数、局部变量以及返回地址，需要进行额外的入栈和出栈操作。</p><p>递归的次数比较多时，应该考虑其他方式。</p><h3 id="个人思考"><a class="markdownIt-Anchor" href="#个人思考"></a> 个人思考</h3><p>第一章整体看下来发现还是有一些比较基础的东西都遗忘了，比如说居然都忘记还有short这个数据类型，主要是平时用的比较少，像循环基本都是用for，其他两种真的很少用。蛮喜欢基本原理这一部分，即使是最基础的，一章看下来也能学到东西。</p><h2 id="理解数据背后的二进制"><a class="markdownIt-Anchor" href="#理解数据背后的二进制"></a> 理解数据背后的二进制</h2><h3 id="字符的编码与乱码"><a class="markdownIt-Anchor" href="#字符的编码与乱码"></a> 字符的编码与乱码</h3><p>常见非Unicode编码</p><p><strong>ASCII</strong>:美国大概只需要128个字符，所以就规定了128个字符的二进制表示方法。这个方法是一个标准，称为ASCII编码</p><p><strong>ISO 8859-1</strong>:它也是使用一个字节表示一个字符，其中0～127与ASCII一样，128～255规定了不同的含义。在128～255中，128～159<strong>表示一些控制字符</strong>，以及被<strong>Windows-1252</strong>取代。</p><p><strong>Windows-1252</strong>:与ISO 8859-1基本是一样的，区别只在于数字128～159.</p><p><strong>GB2312</strong>：GB2312标准主要针对的是简体中文常见字符，包括约7000个汉字和一些罕用词和繁体字。</p><p><strong>GBK</strong>：在GB2312的基础上，向下兼容GB2312。GBK增加了14 000多个汉字。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ShardingShpere数据库中间件</title>
      <link href="/2021/05/31/ShardingShpere%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
      <url>/2021/05/31/ShardingShpere%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="shardingshpere数据库中间件"><a class="markdownIt-Anchor" href="#shardingshpere数据库中间件"></a> ShardingShpere数据库中间件</h1><p>周末无聊，刚好看见狂神新出的ShardingShpere，以前看过他Redis的一个系列视频，几点还不错，就学习了一波并做了个笔记。（还氪了kuangstudy一个月会员，心疼）。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/1630253147433.png" alt="image-20210608001754863" /></p><h2 id="apache-shardingsphere概述"><a class="markdownIt-Anchor" href="#apache-shardingsphere概述"></a> Apache ShardingSphere概述</h2><p>关于这种概述一般<a href="http://shardingsphere.apache.org/index_zh.html">官网</a>的介绍是最为准确与到位的。这里就贴上官网的概述。</p><blockquote><p>Apache ShardingSphere 是一套开源的分布式数据库解决方案组成的生态圈，它由 JDBC、Proxy 和 Sidecar（规划中）这 3 款既能够独立部署，又支持混合部署配合使用的产品组成。 它们均提供标准化的数据水平扩展、分布式事务和分布式治理等功能，可适用于如 Java 同构、异构语言、云原生等各种多样化的应用场景。</p><p>Apache ShardingSphere 旨在充分合理地在分布式的场景下利用关系型数据库的计算和存储能力，而并非实现一个全新的关系型数据库。 关系型数据库当今依然占有巨大市场份额，是企业核心系统的基石，未来也难于撼动，我们更加注重在原有基础上提供增量，而非颠覆。</p><p>Apache ShardingSphere 5.x 版本开始致力于可插拔架构，项目的功能组件能够灵活的以可插拔的方式进行扩展。 目前，数据分片、读写分离、数据加密、影子库压测等功能，以及 MySQL、PostgreSQL、SQLServer、Oracle 等 SQL 与协议的支持，均通过插件的方式织入项目。 开发者能够像使用积木一样定制属于自己的独特系统。Apache ShardingSphere 目前已提供数十个 SPI 作为系统的扩展点，仍在不断增加中。</p><p>ShardingSphere 已于2020年4月16日成为 Apache 软件基金会的顶级项目。</p></blockquote><h2 id="mysql主从集群环境搭建"><a class="markdownIt-Anchor" href="#mysql主从集群环境搭建"></a> Mysql主从集群环境搭建</h2><p>关于Mysql的话视频是使用 mysql rpm 安装搭建，而我本地是使用docker进行搭建的。这方面是存在一些出入的。</p><p>创建docker-compose文件夹以及文件；</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210321204144844.png" alt="image-20210321204144844" /></p><h3 id="配置docker-composeyml"><a class="markdownIt-Anchor" href="#配置docker-composeyml"></a> 配置docker-compose.yml</h3><p>docker-compose.yml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">version: &#x27;2&#x27;</span><br><span class="line">services:</span><br><span class="line">  mysql-master:</span><br><span class="line">    build:</span><br><span class="line">      context: ./</span><br><span class="line">      dockerfile: master/Dockerfile</span><br><span class="line">    environment:</span><br><span class="line">      - &quot;MYSQL_ROOT_PASSWORD=root&quot;</span><br><span class="line">      - &quot;MYSQL_DATABASE=replicas_db&quot;</span><br><span class="line">    links:</span><br><span class="line">      - mysql-slave</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;33065:3306&quot;</span><br><span class="line">    restart: always</span><br><span class="line">    hostname: mysql-master</span><br><span class="line">  mysql-slave:</span><br><span class="line">    build:</span><br><span class="line">      context: ./</span><br><span class="line">      dockerfile: slave/Dockerfile</span><br><span class="line">    environment:</span><br><span class="line">      - &quot;MYSQL_ROOT_PASSWORD=root&quot;</span><br><span class="line">      - &quot;MYSQL_DATABASE=replicas_db&quot;</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;33066:3306&quot;</span><br><span class="line">    restart: always</span><br><span class="line">    hostname: mysql-slave</span><br></pre></td></tr></table></figure><h3 id="主数据库配置"><a class="markdownIt-Anchor" href="#主数据库配置"></a> 主数据库配置</h3><h4 id="配置dockerfile"><a class="markdownIt-Anchor" href="#配置dockerfile"></a> 配置Dockerfile</h4><p>Dockerfile</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM mysql:5.7.17</span><br><span class="line">MAINTAINER harrison</span><br><span class="line">ADD ./master/my.cnf /etc/mysql/my.cnf</span><br></pre></td></tr></table></figure><h4 id="配置mycnf文件"><a class="markdownIt-Anchor" href="#配置mycnf文件"></a> 配置my.cnf文件</h4><p>my.cnf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"><span class="comment">## 设置server_id，一般设置为IP，注意要唯一</span></span><br><span class="line">server_id=100  </span><br><span class="line"><span class="comment">## 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）</span></span><br><span class="line">binlog-ignore-db=mysql  </span><br><span class="line"><span class="comment">## 开启二进制日志功能，可以随便取，最好有含义（关键就是这里了）</span></span><br><span class="line">log-bin=replicas-mysql-bin  </span><br><span class="line"><span class="comment">## 为每个session分配的内存，在事务过程中用来存储二进制日志的缓存</span></span><br><span class="line">binlog_cache_size=1M  </span><br><span class="line"><span class="comment">## 主从复制的格式（mixed,statement,row，默认格式是statement）</span></span><br><span class="line">binlog_format=mixed  </span><br><span class="line"><span class="comment">## 二进制日志自动删除/过期的天数。默认值为0，表示不自动删除。</span></span><br><span class="line">expire_logs_days=7  </span><br><span class="line"><span class="comment">## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。</span></span><br><span class="line"><span class="comment">## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span></span><br><span class="line">slave_skip_errors=1062</span><br></pre></td></tr></table></figure><h3 id="从数据库配置"><a class="markdownIt-Anchor" href="#从数据库配置"></a> 从数据库配置</h3><h4 id="配置dockerfile-2"><a class="markdownIt-Anchor" href="#配置dockerfile-2"></a> 配置Dockerfile</h4><p>Dockerfile</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM mysql:5.7.17</span><br><span class="line">MAINTAINER harrison</span><br><span class="line">ADD ./slave/my.cnf /etc/mysql/my.cnf</span><br></pre></td></tr></table></figure><h4 id="配置mycnf文件-2"><a class="markdownIt-Anchor" href="#配置mycnf文件-2"></a> 配置my.cnf文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"><span class="comment">## 设置server_id，一般设置为IP，注意要唯一</span></span><br><span class="line">server_id=101  </span><br><span class="line"><span class="comment">## 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）</span></span><br><span class="line">binlog-ignore-db=mysql  </span><br><span class="line"><span class="comment">## 开启二进制日志功能，以备Slave作为其它Slave的Master时使用</span></span><br><span class="line">log-bin=replicas-mysql-slave1-bin  </span><br><span class="line"><span class="comment">## 为每个session 分配的内存，在事务过程中用来存储二进制日志的缓存</span></span><br><span class="line">binlog_cache_size=1M  </span><br><span class="line"><span class="comment">## 主从复制的格式（mixed,statement,row，默认格式是statement）</span></span><br><span class="line">binlog_format=mixed  </span><br><span class="line"><span class="comment">## 二进制日志自动删除/过期的天数。默认值为0，表示不自动删除。</span></span><br><span class="line">expire_logs_days=7  </span><br><span class="line"><span class="comment">## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。</span></span><br><span class="line"><span class="comment">## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span></span><br><span class="line">slave_skip_errors=1062  </span><br><span class="line"><span class="comment">## relay_log配置中继日志</span></span><br><span class="line">relay_log=replicas-mysql-relay-bin  </span><br><span class="line"><span class="comment">## log_slave_updates表示slave将复制事件写进自己的二进制日志</span></span><br><span class="line">log_slave_updates=1  </span><br><span class="line"><span class="comment">## 防止改变数据(除了特殊的线程)</span></span><br><span class="line">read_only=1</span><br></pre></td></tr></table></figure><h3 id="创建容器"><a class="markdownIt-Anchor" href="#创建容器"></a> 创建容器</h3><p>进入 <code>docker-compose</code>目录，运行 <code>docker-compose</code> 启动命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><h3 id="配置从数据库"><a class="markdownIt-Anchor" href="#配置从数据库"></a> 配置从数据库</h3><h4 id="检查主库的状态"><a class="markdownIt-Anchor" href="#检查主库的状态"></a> 检查主库的状态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ show master status;</span><br></pre></td></tr></table></figure><p>记录 <strong>主数据库</strong> <code>binary-log</code> 的 <strong>文件名称</strong> 和 <strong>数据同步起始位置</strong>。</p><ul><li>File: replicas-mysql-bin.000003</li><li>Position: 154</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/xiaozhuo_Q/images/raw/master/blog/image-20210321200215772.png" alt="image-20210321200215772" /></p><h4 id="从库配置主库信息"><a class="markdownIt-Anchor" href="#从库配置主库信息"></a> 从库配置主库信息</h4><p>在 <strong>从数据库</strong> 上运行 <strong>主数据库</strong> 的相关配置 <code>sql</code> 进行主从关联</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CHANGE MASTER <span class="keyword">TO</span></span><br><span class="line">    MASTER_HOST<span class="operator">=</span><span class="string">&#x27;mysql-master&#x27;</span>,</span><br><span class="line">    MASTER_USER<span class="operator">=</span><span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    MASTER_PASSWORD<span class="operator">=</span><span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    MASTER_LOG_FILE<span class="operator">=</span><span class="string">&#x27;replicas-mysql-bin.000003&#x27;</span>,</span><br><span class="line">    MASTER_LOG_POS<span class="operator">=</span><span class="number">154</span>;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210321203202554.png" alt="image-20210321203202554" /></p><p>重启从库~ 两个Yes ，配置成功</p><h4 id="3021错误"><a class="markdownIt-Anchor" href="#3021错误"></a> 3021错误</h4><blockquote><p>3021 - This operation cannot be performed with a running slave io thread; run STOP SLAVE IO_THREAD FOR CHANNEL ‘’ first.</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">stop slave;</span><br><span class="line"></span><br><span class="line">SET GLOBAL SQL_SLAVE_SKIP_COUNTER = 1; </span><br><span class="line"></span><br><span class="line">START SLAVE;</span><br></pre></td></tr></table></figure><p>status中依旧出现错误</p><blockquote><p>Last_IO_Error: Got fatal error 1236 from master when reading data from binary log: ‘Could not find first log file name in binary log index file’</p></blockquote><p>最后看着这个MASTER_LOG_FILE文件前缀不对劲…发现设置了从库的bin日志文件~怪不得提示找不到文件 重新设置为Master的日志文件即可</p><h2 id="项目配置"><a class="markdownIt-Anchor" href="#项目配置"></a> 项目配置</h2><p><a href="https://github.com/GayHub1/sharding_jdbc">Demo地址</a></p><h3 id="创建项目引入依赖"><a class="markdownIt-Anchor" href="#创建项目引入依赖"></a> 创建项目引入依赖</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"> &lt;properties&gt;</span><br><span class="line">     &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">     &lt;sharding-sphere.version&gt;4.0.0-RC1&lt;/sharding-sphere.version&gt;</span><br><span class="line"> &lt;/properties&gt;</span><br><span class="line"> &lt;!-- 依赖web --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- 依赖mybatis和mysql驱动 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.1.4&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--依赖lombok--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">    &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--依赖sharding--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.shardingsphere&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;sharding-jdbc-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;sharding-sphere.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.shardingsphere&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;sharding-core-common&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;sharding-sphere.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--依赖数据源druid--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.1.21&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="读写分离"><a class="markdownIt-Anchor" href="#读写分离"></a> 读写分离</h3><h4 id="yaml配置"><a class="markdownIt-Anchor" href="#yaml配置"></a> Yaml配置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8085</span><br><span class="line">spring:</span><br><span class="line">  main:</span><br><span class="line">    allow-bean-definition-overriding: true</span><br><span class="line">  shardingsphere:</span><br><span class="line">    # 参数配置，显示sql</span><br><span class="line">    props:</span><br><span class="line">      sql:</span><br><span class="line">        show: true</span><br><span class="line">    # 配置数据源</span><br><span class="line">    datasource:</span><br><span class="line">      # 给每个数据源取别名，下面的ds1,ds2,ds3任意取名字</span><br><span class="line">      names: ds1,ds2,ds3</span><br><span class="line">      # 给master-ds1每个数据源配置数据库连接信息</span><br><span class="line">      ds1:</span><br><span class="line">        # 配置druid数据源</span><br><span class="line">        type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">        driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">        url: jdbc:mysql://47.115.94.78:3306/ksd-sharding-db?useUnicode=true&amp;characterEncoding=utf8&amp;tinyInt1isBit=false&amp;useSSL=false&amp;serverTimezone=GMT</span><br><span class="line">        username: root</span><br><span class="line">        password: mkxiaoer1986.</span><br><span class="line">        maxPoolSize: 100</span><br><span class="line">        minPoolSize: 5</span><br><span class="line">      # 配置ds2-slave</span><br><span class="line">      ds2:</span><br><span class="line">        type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">        driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">        url: jdbc:mysql://114.215.145.201:3306/ksd-sharding-db?useUnicode=true&amp;characterEncoding=utf8&amp;tinyInt1isBit=false&amp;useSSL=false&amp;serverTimezone=GMT</span><br><span class="line">        username: root</span><br><span class="line">        password: mkxiaoer1986.</span><br><span class="line">        maxPoolSize: 100</span><br><span class="line">        minPoolSize: 5</span><br><span class="line">      # 配置ds3-slave</span><br><span class="line">      ds3:</span><br><span class="line">        type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">        driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">        url: jdbc:mysql://114.215.145.201:3306/ksd-sharding-db?useUnicode=true&amp;characterEncoding=utf8&amp;tinyInt1isBit=false&amp;useSSL=false&amp;serverTimezone=GMT</span><br><span class="line">        username: root</span><br><span class="line">        password: mkxiaoer1986.</span><br><span class="line">        maxPoolSize: 100</span><br><span class="line">        minPoolSize: 5</span><br><span class="line">    # 配置默认数据源ds1</span><br><span class="line">    sharding:</span><br><span class="line">     # 默认数据源，主要用于写，注意一定要配置读写分离 ,注意：如果不配置，那么就会把三个节点都当做从slave节点，新增，修改和删除会出错。</span><br><span class="line">      default-data-source-name: ds1</span><br><span class="line">    # 配置数据源的读写分离，但是数据库一定要做主从复制</span><br><span class="line">    masterslave:</span><br><span class="line">      # 配置主从名称，可以任意取名字</span><br><span class="line">      name: ms</span><br><span class="line">      # 配置主库master，负责数据的写入</span><br><span class="line">      master-data-source-name: ds1</span><br><span class="line">      # 配置从库slave节点</span><br><span class="line">      slave-data-source-names: ds2,ds3</span><br><span class="line">      # 配置slave节点的负载均衡均衡策略，采用轮询机制</span><br><span class="line">      load-balance-algorithm-type: round_robin</span><br><span class="line"># 整合mybatis的配置XXXXX</span><br><span class="line">mybatis:</span><br><span class="line">  mapper-locations: classpath:mapper/*.xml</span><br><span class="line">  type-aliases-package: com.xuexiangban.shardingjdbc.entity</span><br></pre></td></tr></table></figure><p>接下来就是正常的Mybatis增删查改代码与启动</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/xiaozhuo_Q/images/raw/master/blog/image-20210321222317413.png" alt="image-20210321222317413" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20211124214817213.png" alt="image-20211124214817213" /></p><p>可以看见写入走的是 ds1 数据库 而读取是走的 ds2</p><p>已经完成读写分离配置</p><h3 id="分库分表"><a class="markdownIt-Anchor" href="#分库分表"></a> 分库分表</h3><p>库表的水平与垂直拆分</p><h4 id="垂直拆分"><a class="markdownIt-Anchor" href="#垂直拆分"></a> 垂直拆分</h4><p>对库： 业务模块拆分、商品库，用户库，订单库</p><p>对表：表的字段过多，字段使用的频率不一。（可以拆分两个表建立1:1关系）</p><h4 id="水平拆分"><a class="markdownIt-Anchor" href="#水平拆分"></a> 水平拆分</h4><p>对表进行水平拆分（也就是我们说的：分表）</p><h4 id="数据迁移"><a class="markdownIt-Anchor" href="#数据迁移"></a> 数据迁移</h4><blockquote><p>一般数据库的拆分也是有一个过程的，一开始是单表，后面慢慢拆成多表。那么我们就看下如何平滑的从MySQL单表过度到MySQL的分库分表架构。<br />1、利用mysql+canal做增量数据同步，利用分库分表中间件，将数据路由到对应的新表中。<br />2、利用分库分表中间件，全量数据导入到对应的新表中。<br />3、通过单表数据和分库分表数据两两比较，更新不匹配的数据到新表中。<br />4、数据稳定后，将单表的配置切换到分库分表配置上。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 零零散散 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>左耳听风专栏笔记</title>
      <link href="/2021/05/31/%E5%B7%A6%E8%80%B3%E5%90%AC%E9%A3%8E%E4%B8%93%E6%A0%8F%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/05/31/%E5%B7%A6%E8%80%B3%E5%90%AC%E9%A3%8E%E4%B8%93%E6%A0%8F%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="左耳听风专栏笔记"><a class="markdownIt-Anchor" href="#左耳听风专栏笔记"></a> 左耳听风专栏笔记</h1><h2 id="技术变现"><a class="markdownIt-Anchor" href="#技术变现"></a> 技术变现</h2><ul><li>程序员用手艺、技术养活自己，不依靠公司；</li><li>提高工作效率，去研究那些难的，公司内外的核心技术；</li><li>注重输出，输出技术、价值观，帮助更多的人，提高影响力。</li><li>去高速发展的公司，而不是初创业务未稳定或项目维护期的。</li><li>提升业务代码编写效率，争取时间学习。</li><li>关注技术的本质，新技术的出现解决了什么问题和不可替代性</li><li>技术付费点，挣钱和省钱。</li><li>找到有价值的信息源。（西方美国）</li><li>朋友圈</li></ul><h2 id="技术领导力"><a class="markdownIt-Anchor" href="#技术领导力"></a> 技术领导力</h2><ul><li><p>扎实的基础技术</p></li><li><p>非同一般的学习能力</p></li><li><p>坚持做正确的事</p></li><li><p>不断得高对自己的要求标准；</p></li></ul><h2 id="新技术"><a class="markdownIt-Anchor" href="#新技术"></a> 新技术</h2><p>能否发展要素</p><ul><li><p>有没有一个比较好的社区。</p></li><li><p>有没有一个或多个杀手级应用。</p></li><li><p>学习难度是否低，上手是否快。</p></li><li><p>没有一个不错的提高开发效率的开发框架。</p></li><li><p>是否有一个或多个巨型的技术公司作为后盾。</p></li></ul><h2 id="时间管理大师"><a class="markdownIt-Anchor" href="#时间管理大师"></a> 时间管理大师</h2><h3 id="投资自己的时间"><a class="markdownIt-Anchor" href="#投资自己的时间"></a> 投资自己的时间</h3><ul><li><p>花时间学习基础知识，花时间读文档。系统地学习一门知识</p></li><li><p>花时间在解放自己生产力的事上（可以牺牲现在时间解放为了更多的时间 - 代码规范 设计模式）</p></li><li><p>花时间在让自己成长的事上</p></li><li><p>花时间在建立高效的环境上</p></li></ul><h3 id="规划自己的时间"><a class="markdownIt-Anchor" href="#规划自己的时间"></a> 规划自己的时间</h3><ul><li><p>定义好优先级 (to do List)</p></li><li><p>最短作业优先 (先完成快速简单的 更有动力完成接下来的)</p></li><li><p>关注长期利益规划</p></li></ul><h3 id="用好自己的时间"><a class="markdownIt-Anchor" href="#用好自己的时间"></a> 用好自己的时间</h3><ul><li><strong>形成正反馈</strong>。</li><li><strong>反思和举一反三</strong></li></ul><h3 id="应对故障"><a class="markdownIt-Anchor" href="#应对故障"></a> 应对故障</h3><h4 id="发生时"><a class="markdownIt-Anchor" href="#发生时"></a> 发生时</h4><ul><li><p><strong>重启和限流</strong></p></li><li><p><strong>回滚操作</strong></p></li><li><p><strong>降级操作</strong></p></li><li><p><strong>紧急更新</strong>。</p></li></ul><blockquote><p>出现故障时，<strong>最重要的不是 debug 故障，而是尽可能地减少故障的影响范围，并尽可能快地修复问题</strong>。</p></blockquote><h2 id="git协同工作流"><a class="markdownIt-Anchor" href="#git协同工作流"></a> Git协同工作流</h2><h3 id="中心式协同工作流"><a class="markdownIt-Anchor" href="#中心式协同工作流"></a> 中心式协同工作流</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/xiaozhuo_Q/images/raw/master/blog/%E4%B8%8B%E8%BD%BD.png" alt="img" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/xiaozhuo_Q/images/raw/master/blog/%E4%B8%8B%E8%BD%BD%20(1).png" alt="" /></p><ol><li>从服务器上做<code>git pull origin master</code>把代码同步下来。</li><li>改完后，<code>git commit</code>到本地仓库中。</li><li>然后<code>git push origin master</code>到远程仓库中，这样其他同学就可以得到你的代码了。</li></ol><ul><li>功能分支协同工作流</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/xiaozhuo_Q/images/raw/master/blog/%E4%B8%8B%E8%BD%BD%20(2).png" alt="" /></p><ol><li>首先使用 <code>git checkout -b new-feature</code> 创建 “new-feature”分支。</li><li>然后共同开发这个功能的程序员就在这个分支上工作，进行 add、commit 等操作。</li><li>然后通过 <code>git push -u origin new-feature</code> 把分支代码 push 到服务器上。</li><li>其他程序员可以通过<code>git pull --rebase</code>来拿到最新的这个分支的代码。</li><li>最后通过 Pull Request 的方式做完 Code Review 后合并到 Master 分支上。</li></ol><h3 id="gitflow-协同工作流"><a class="markdownIt-Anchor" href="#gitflow-协同工作流"></a> GitFlow 协同工作流</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/xiaozhuo_Q/images/raw/master/blog/%E4%B8%8B%E8%BD%BD%20(3).png" alt="" /></p><p>整个代码库中一共有五种分支。</p><ul><li>Master 分支。也就是主干分支，用作发布环境，上面的每一次提交都是可以发布的。</li><li>Feature 分支。也就是功能分支，用于开发功能，其对应的是开发环境。</li><li>Developer 分支。是开发分支，一旦功能开发完成，就向 Developer 分支合并，合并完成后，删除功能分支。这个分支对应的是集成测试环境。</li><li>Release 分支。当 Developer 分支测试达到可以发布状态时，开出一个 Release 分支来，然后做发布前的准备工作。这个分支对应的是预发环境。之所以需要这个 Release 分支，是我们的开发可以继续向前，不会因为要发布而被 block 住而不能提交。</li></ul><p>一旦 Release 分支上的代码达到可以上线的状态，那么需要把 Release 分支向 Master 分支和 Developer 分支同时合并，以保证代码的一致性。然后再把 Release 分支删除掉。</p><ul><li>Hotfix 分支。是用于处理生产线上代码的 Bug-fix，每个线上代码的 Bug-fix 都需要开一个 Hotfix 分支，完成后，向 Developer 分支和 Master 分支上合并。合并完成后，删除 Hotfix 分支。</li></ul><h4 id="github-flow"><a class="markdownIt-Anchor" href="#github-flow"></a> GitHub Flow</h4><p>所谓 GitHub Flow，其实也叫 Forking flow，也就是 GitHub 上的那个开发方式。</p><ol><li>每个开发人员都把“官方库”的代码 fork 到自己的代码仓库中。</li><li>然后，开发人员在自己的代码仓库中做开发，想干啥干啥。</li><li>因此，开发人员的代码库中，需要配两个远程仓库，一个是自己的库，一个是官方库（用户的库用于提交代码改动，官方库用于同步代码）。</li><li>然后在本地建“功能分支”，在这个分支上做代码开发。</li><li>这个功能分支被 push 到开发人员自己的代码仓库中。</li><li>然后，向“官方库”发起 pull request，并做 Code Review。</li><li>一旦通过，就向官方库进行合并。</li></ol><h3 id="gitlab-flow"><a class="markdownIt-Anchor" href="#gitlab-flow"></a> GitLab Flow</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/xiaozhuo_Q/images/raw/master/blog/%E4%B8%8B%E8%BD%BD%20(4).png" alt="" /></p><p>引入环境分支，如下图所示，其包含了预发布（Pre-Production）和生产（Production）分支。</p><p>Master 分支是一个 roadmap 分支，然后，一旦稳定了就建稳定版的分支，如 2.3.stable 分支和 2.4.stable 分支，其中可以 cherry-pick master 分支上的一些改动过去。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/xiaozhuo_Q/images/raw/master/blog/%E4%B8%8B%E8%BD%BD%20(5).png" alt="" /></p><p>这样也就解决了两个问题：</p><ul><li>环境和代码分支对应的问题；</li><li>版本和代码分支对应的问题。</li></ul><p>我们将软件开发升级并简化到 <strong>SOA 服务化</strong>以及 <strong>DevOps</strong> 上来，那么协同工作流就会变得非常简单。所以，<strong>协同工作流的本质，并不是怎么玩好代码仓库的分支策略，而是玩好我们的软件架构和软件开发流程</strong>。</p><p><strong>与其花时间在 Git 协同工作流上，还不如把时间花在调整软件架构和自动化软件生产和运维流程上来，这才是真正简化协同工作流程的根本</strong>。</p><h2 id="分布式系统架构"><a class="markdownIt-Anchor" href="#分布式系统架构"></a> 分布式系统架构</h2><h3 id="冰与火"><a class="markdownIt-Anchor" href="#冰与火"></a> 冰与火</h3><p>使用分布式系统原因</p><ul><li><p><strong>增大系统容量</strong>。(单体应用局限于系统的性能)</p></li><li><p><strong>加强系统可用</strong>。（通过分布式架构来冗余系统以消除单点故障）</p></li></ul><p>优缺点</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/xiaozhuo_Q/images/raw/master/blog/%E4%B8%8B%E8%BD%BD%20(6).png" alt="单体应用和分布式架构的优缺点" /></p><h3 id="需要注意的问题"><a class="markdownIt-Anchor" href="#需要注意的问题"></a> 需要注意的问题</h3><p>异构系统的不标准问题</p><ul><li>软件和应用不标准。</li><li>通讯协议不标准。</li><li>数据格式不标准。</li><li>开发和运维的过程和方法不标准。</li></ul><p>系统架构中的服务依赖性问题</p><p>故障发生的概率更大</p>]]></content>
      
      
      
        <tags>
            
            <tag> 零零散散 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/05/30/%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83/"/>
      <url>/2021/05/30/%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建本地自动化部署环境"><a class="markdownIt-Anchor" href="#搭建本地自动化部署环境"></a> 搭建本地自动化部署环境</h1><h2 id="docker开启远程访问"><a class="markdownIt-Anchor" href="#docker开启远程访问"></a> Docker开启远程访问</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vim /lib/systemd/system/docker.service</span><br><span class="line">#修改ExecStart这行</span><br><span class="line">ExecStart=/usr/bin/dockerd  -H tcp://0.0.0.0:2375  -H unix:///var/run/docker.sock</span><br><span class="line"># 重新加载配置文件</span><br><span class="line">systemctl daemon-reload </span><br><span class="line">#重启服务</span><br><span class="line">systemctl restart docker.service </span><br><span class="line">#查看端口是否开启</span><br><span class="line"> netstat -nlpt</span><br><span class="line">#直接curl看是否生效</span><br><span class="line">curl http://127.0.0.1:2375/info</span><br></pre></td></tr></table></figure><h2 id="idea中docker配置"><a class="markdownIt-Anchor" href="#idea中docker配置"></a> Idea中Docker配置</h2><p>可以直接在idea-&gt;plug 或者在<a href="https://plugins.jetbrains.com/">官网</a>下载idea对应版本的的Docker integration 安装。安装后restart Idea 即可。</p><p><img src= "/img/loading.gif" data-lazy-src="C:%5CUsers%5Clizixi.JT%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210427092135832.png" alt="image-20210427092135832" /></p><p>重启后配置docker，连接到远程docker服务。从File-&gt;Settings-&gt;Build,Execution,Deployment-&gt;Docker打开配置界面。</p><p><img src= "/img/loading.gif" data-lazy-src="C:%5CUsers%5Clizixi.JT%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210427092826974.png" alt="image-20210427092826974" /></p><p>在项目pom文件中添加docker 依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;com.spotify&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0.0&lt;/version&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;imageName&gt;$&#123;project.artifactId&#125;&lt;/imageName&gt;</span><br><span class="line">        &lt;dockerDirectory&gt;&lt;/dockerDirectory&gt;</span><br><span class="line">        &lt;resources&gt;</span><br><span class="line">            &lt;resource&gt;</span><br><span class="line">                &lt;targetPath&gt;/&lt;/targetPath&gt;</span><br><span class="line">                &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt;</span><br><span class="line">                &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt;</span><br><span class="line">            &lt;/resource&gt;</span><br><span class="line">        &lt;/resources&gt;</span><br><span class="line">    &lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><p>在项目根路径创建构建项目的Dockerfile文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FROM java:8</span><br><span class="line">VOLUME /tmp</span><br><span class="line">COPY target/demo-0.0.1-SNAPSHOT.jar demo.jar</span><br><span class="line">RUN bash -c &quot;touch /demo.jar&quot;</span><br><span class="line">EXPOSE 8080</span><br><span class="line">ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;demo.jar&quot;]</span><br></pre></td></tr></table></figure><p>4、创建Docker镜像</p><p>在idea右上角maven插件中执行package进行打包</p><pre><code>[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time: 19.429 s[INFO] Finished at: 2021-04-27T09:54:50+08:00[INFO] ------------------------------------------------------------------------</code></pre><p>点击Docker，再点击+号，添加一个docker命令，输入Name，选择Server，选择Dockerfile文件，输入镜像tag，完成配置。<br /><img src= "/img/loading.gif" data-lazy-src="C:%5CUsers%5Clizixi.JT%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210427113507420.png" alt="image-20210427113507420" /></p><p>点击run 就会提交并在docker上构建镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time: 19.429 s</span><br><span class="line">[INFO] Finished at: 2021-04-27T09:54:50+08:00</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/05/19/%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81/"/>
      <url>/2021/05/19/%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81/</url>
      
        <content type="html"><![CDATA[<h1 id="架构整洁"><a class="markdownIt-Anchor" href="#架构整洁"></a> 架构整洁</h1><h3 id="设计与架构"><a class="markdownIt-Anchor" href="#设计与架构"></a> 设计与架构</h3><p>底层设计细节和高层架构信息是不可分割的 。 它们组合在一起，共同定义了整个软件系统，缺一不可 。 所谓的底层和高层本身就是一系列决策组成的连续体，并没有清晰的分界线。</p><h3 id="好的软件设计的终极目标"><a class="markdownIt-Anchor" href="#好的软件设计的终极目标"></a> 好的软件设计的终极目标</h3><p>软件架构的终极目标是，用最小的人力成本来满足构建和维护该系统的需求 。  并且在系统的整个生命周期内 一直都能维持这样的低成本  。</p><h3 id="个人思考"><a class="markdownIt-Anchor" href="#个人思考"></a> 个人思考</h3><p>作为一个打工人，理所应当要学会如何“偷懒”，在最开始开发时就应该从<strong>整个开发周期</strong>的角度进行设计，尽可能的考虑代码的扩展性，尽量避免重构这种高成本的事情。从根本上提高开发效率。</p><h2 id="两个价值维度"><a class="markdownIt-Anchor" href="#两个价值维度"></a> 两个价值维度</h2><h3 id="行为价值"><a class="markdownIt-Anchor" href="#行为价值"></a> 行为价值</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/05/19/%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7/"/>
      <url>/2021/05/19/%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="数据一致性"><a class="markdownIt-Anchor" href="#数据一致性"></a> 数据一致性</h1><ul><li><p>重复请求</p><p>防重操作</p><p>悲观锁  （行锁）</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/xiaozhuo_Q/images/raw/master/blog/image-20210511220909495.png" alt="image-20210511220909495" /></p></li><li><p>事务一致性</p><p>CAP原理</p><p>一致性( Consistency）:客户端知道一系列的操作都会同时发生(生效)<br />可用性( Availability):每个操作都必须以可预期的响应结束<br />分区容错性( Partition tolerance):即使出现单个组件无法可用,操作依然可<br />以完成</p><p>Base</p><p>Basically Available(基本可用)<br />Soft state(软状态) ：牺牲强一致性，出现不同时刻的（处理中的状态）状态（趋向于最终状态）<br />Eventually consistent(最终一致性)</p></li></ul><h2 id="分布式事务"><a class="markdownIt-Anchor" href="#分布式事务"></a> 分布式事务</h2><ul><li><p>二阶段提交 （唯一一个保证强一致性）</p><p><img src= "/img/loading.gif" data-lazy-src="C:%5CUsers%5C94241%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210511230402275.png" alt="image-20210511230402275" /></p></li><li><p>Raft</p><p>nb</p></li><li><p>异步确保型</p></li><li><p>事务型消息</p></li><li><p>TCC型</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/01/31/Jenkins%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"/>
      <url>/2021/01/31/Jenkins%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>Jenkins安装记录</p><p>安装环境</p><ul><li><p>Window 10 Docker Engine v20.10.2</p><p>拉取运行镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -v D:\jenkins\data:/var/jenkins_home -p 8080:8080 -p 50000:50000 jenkins/jenkins:lts</span><br></pre></td></tr></table></figure><p>打开localhost:8080加载一段时间后进入登陆页面；</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210131163823048.png" alt="image-20210131163823048" /></p></li></ul><p>默认生成的密码可以之间查看容器日志或者查看页面中提供的地址；</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210131164021195.png" alt="image-20210131164021195" /></p><p><img src= "/img/loading.gif" data-lazy-src="C:%5CUsers%5C94241%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210131164117139.png" alt="image-20210131164117139" /></p><p>然后选择安装推荐的插件</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210131164419211.png" alt="image-20210131164419211" /></p><p>然后就在安装常用的插件了。</p><p>访问不到源可以更换成清华源</p><p><a href="https://blog.csdn.net/qiuyeyijian/article/details/104570642">Jenkins 使用国内镜像快速安装（rpm安装）</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/GayHub1/images/img/image-20210131165717100.png" alt="image-20210131165717100" /></p><p>创建用户-》实例配置-》开始使用。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>年末的碎碎叨叨</title>
      <link href="/2020/12/11/%E5%B9%B4%E6%9C%AB%E7%9A%84%E7%A2%8E%E7%A2%8E%E5%8F%A8%E5%8F%A8/"/>
      <url>/2020/12/11/%E5%B9%B4%E6%9C%AB%E7%9A%84%E7%A2%8E%E7%A2%8E%E5%8F%A8%E5%8F%A8/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码不正确，请重新输入！" data-whm="文章不能被校验, 不过您还是能看看解密后的内容！">  <script id="hbeData" type="hbeData" data-hmacdigest="d1d5a295869d36a9d0882f03848ee3d648c105a01899eef0d30c25d5e39b14d7"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">该文章已加密, 请输入密码查看。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot日志</title>
      <link href="/2020/11/25/SpringBoot%E6%97%A5%E5%BF%97/"/>
      <url>/2020/11/25/SpringBoot%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<h1 id="springboot日志"><a class="markdownIt-Anchor" href="#springboot日志"></a> SpringBoot日志</h1><h1 id="日志框架"><a class="markdownIt-Anchor" href="#日志框架"></a> 日志框架</h1><p>毫无疑问，日志是日常项目开发与维护中不可或缺的一部分，通常项目中日志由抽象层+实现层两部分组成。</p><table><thead><tr><th><strong>日志-抽象层</strong></th><th><strong>日志-实现层</strong></th></tr></thead><tbody><tr><td>JCL、SLF4J、jboss-logging</td><td>jul、log4j、log4j2、logback</td></tr></tbody></table><h2 id="slf4j"><a class="markdownIt-Anchor" href="#slf4j"></a> SLF4J</h2><p>先创建一个只有<strong>spring-boot-starter</strong>的一个项目。</p><p><img src= "/img/loading.gif" data-lazy-src="C:%5CUsers%5CJMSCADMIN%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201030152521023.png" alt="image-20201030152521023" /></p><p>可以看到springboot自带的是由SLF4J+Apache Logging 的组合而成的日志框架。</p><p><img src= "/img/loading.gif" data-lazy-src="C:%5CUsers%5CJMSCADMIN%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201030152320146.png" alt="image-20201030152320146" /></p><p>启动项目后发现默认的是日志等级是info级别。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>screw一键自动生成数据库文档</title>
      <link href="/2020/11/25/screw%E4%B8%80%E9%94%AE%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E6%95%B0%E6%8D%AE%E5%BA%93%E6%96%87%E6%A1%A3/"/>
      <url>/2020/11/25/screw%E4%B8%80%E9%94%AE%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E6%95%B0%E6%8D%AE%E5%BA%93%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="screw-一键自动生成数据库文档"><a class="markdownIt-Anchor" href="#screw-一键自动生成数据库文档"></a> screw 一键自动生成数据库文档！</h1><p>screw 是最久在gitee看见的一个生成数据库文档的工具，简单实用体验后感觉非常简洁舒服</p><h2 id="配置"><a class="markdownIt-Anchor" href="#配置"></a> 配置</h2><h3 id=""><a class="markdownIt-Anchor" href="#"></a> </h3><p>如果只是想简单的使用 screw 是不需要配置application.yml，只需要配置 <strong>pom.xml</strong>即可</p><ul><li><strong>引入依赖</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;cn.smallbun.screw&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;screw-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;lastVersion&#125;&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ul><li><h3 id="maven-插件编写代码"><a class="markdownIt-Anchor" href="#maven-插件编写代码"></a> Maven 插件编写代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;cn.smallbun.screw&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;screw-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.0.3&lt;/version&gt;</span><br><span class="line">            &lt;dependencies&gt;</span><br><span class="line">                &lt;!-- HikariCP --&gt;</span><br><span class="line">                &lt;dependency&gt;</span><br><span class="line">                    &lt;groupId&gt;com.zaxxer&lt;/groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;HikariCP&lt;/artifactId&gt;</span><br><span class="line">                    &lt;version&gt;3.4.5&lt;/version&gt;</span><br><span class="line">                &lt;/dependency&gt;</span><br><span class="line">                &lt;!--mysql driver--&gt;</span><br><span class="line">                &lt;dependency&gt;</span><br><span class="line">                    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">                    &lt;version&gt;8.0.20&lt;/version&gt;</span><br><span class="line">                &lt;/dependency&gt;</span><br><span class="line">            &lt;/dependencies&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">                &lt;!--username--&gt;</span><br><span class="line">                &lt;username&gt;root&lt;/username&gt;</span><br><span class="line">                &lt;!--password--&gt;</span><br><span class="line">                &lt;password&gt;password&lt;/password&gt;</span><br><span class="line">                &lt;!--driver--&gt;</span><br><span class="line">                &lt;driverClassName&gt;com.mysql.cj.jdbc.Driver&lt;/driverClassName&gt;</span><br><span class="line">                &lt;!--jdbc url--&gt;</span><br><span class="line">                &lt;jdbcUrl&gt;jdbc:mysql://localhost:3306/mall?characterEncoding=UTF-8&amp;amp;useUnicode=true&amp;amp;useSSL=false&amp;amp;tinyInt1isBit=false&amp;amp;serverTimezone=Asia/Shanghai&lt;/jdbcUrl&gt;</span><br><span class="line">                &lt;!--生成文件类型--&gt;</span><br><span class="line">                &lt;fileType&gt;MD&lt;/fileType&gt;</span><br><span class="line">                &lt;!--打开文件输出目录--&gt;</span><br><span class="line">                &lt;openOutputDir&gt;false&lt;/openOutputDir&gt;</span><br><span class="line">                &lt;!--生成模板--&gt;</span><br><span class="line">                &lt;produceType&gt;freemarker&lt;/produceType&gt;</span><br><span class="line">                &lt;!--文档名称 为空时:将采用[数据库名称-描述-版本号]作为文档名称--&gt;</span><br><span class="line">                &lt;!--&lt;docName&gt;测试文档名称&lt;/docName&gt;--&gt;</span><br><span class="line">                &lt;!--描述--&gt;</span><br><span class="line">                &lt;description&gt;数据库文档生成&lt;/description&gt;</span><br><span class="line">                &lt;!--版本--&gt;</span><br><span class="line">                &lt;version&gt;$&#123;project.version&#125;&lt;/version&gt;</span><br><span class="line">                &lt;!--标题--&gt;</span><br><span class="line">                &lt;title&gt;数据库文档&lt;/title&gt;</span><br><span class="line">            &lt;/configuration&gt;</span><br><span class="line">            &lt;executions&gt;</span><br><span class="line">                &lt;execution&gt;</span><br><span class="line">                    &lt;phase&gt;compile&lt;/phase&gt;</span><br><span class="line">                    &lt;goals&gt;</span><br><span class="line">                        &lt;goal&gt;run&lt;/goal&gt;</span><br><span class="line">                    &lt;/goals&gt;</span><br><span class="line">                &lt;/execution&gt;</span><br><span class="line">            &lt;/executions&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>url中的&amp;需要用 <code>&amp;amp;</code> 转义</p></blockquote><h2 id="运行"><a class="markdownIt-Anchor" href="#运行"></a> 运行</h2><p>配置完以后在 <code>maven</code> 中双击<code>Plugins -&gt;screw-&gt; screw:run</code></p><p><img src= "/img/loading.gif" data-lazy-src="http://images.zhuoke.xyz/img/image-20201026104023277.png" alt="image-20201026104023277" /></p><p><img src= "/img/loading.gif" data-lazy-src="http://images.zhuoke.xyz/img/image-20201026105438795.png" alt="image-20201026105438795" /></p>]]></content>
      
      
      
        <tags>
            
            <tag> tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis入坑笔记</title>
      <link href="/2020/11/23/Redis%E5%85%A5%E5%9D%91%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/11/23/Redis%E5%85%A5%E5%9D%91%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="redis入坑笔记道"><a class="markdownIt-Anchor" href="#redis入坑笔记道"></a> Redis入坑笔记（道）</h1><h2 id="什么是redis查看源图像"><a class="markdownIt-Anchor" href="#什么是redis查看源图像"></a> 什么是Redis<img src= "/img/loading.gif" data-lazy-src="https://download.logo.wine/logo/Redis/Redis-Logo.wine.png" alt="查看源图像" /></h2><blockquote><p>Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker. It supports data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs, geospatial indexes with radius queries and streams. Redis has built-in replication, Lua scripting, LRU eviction, transactions and different levels of on-disk persistence, and provides high availability via Redis Sentinel and automatic partitioning with Redis Cluster</p></blockquote><p>以上是Redis官网对redis的简介，可以看出这是一个基于内存的非关系型的数据库，但是作用不仅仅是数据库还可以作为缓存以及消息的中间件。多种数据类型。虽然是基于内存的数据库也支持磁盘持久化。并且可以提供高可用的一些方案。</p><h2 id="redis安装"><a class="markdownIt-Anchor" href="#redis安装"></a> Redis安装</h2><h3 id="windows安装"><a class="markdownIt-Anchor" href="#windows安装"></a> Windows安装</h3><p>在Window下的安装较为简单，在<a href="https://github.com/microsoftarchive/redis/releases">Windows</a> 页面选择最新版本下载。安装即可 ()</p><h3 id="linux安装"><a class="markdownIt-Anchor" href="#linux安装"></a> Linux安装</h3><p>Linux 可以通过docker安装或者编译安装 ，相对来说docker安装比较方便。</p><h4 id="docker安装"><a class="markdownIt-Anchor" href="#docker安装"></a> docker安装</h4><p>拉取镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis:latest</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name redis-test -p 6379:6379 redis</span><br></pre></td></tr></table></figure><h4 id="编译安装"><a class="markdownIt-Anchor" href="#编译安装"></a> 编译安装</h4><p>安装redis之前先安装C++编译环境，gcc</p><p>安装gcc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc-c++</span><br></pre></td></tr></table></figure><p>去官网下载使用wget命令获取redis最新压缩包 ，官网也提供了安装命令。tar命令解压（建议解压到opt路径下），cd到解压的路径，使用make命令编译。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-6.0.8.tar.gz</span><br><span class="line">mv  redis-6.0.8.tar.gz /opt</span><br><span class="line">tar -xzf redis-6.0.8.tar.gz</span><br><span class="line">cd redis-6.0.8</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>程序已经默认安装好在/usr/loacl/bin下了</p><h3 id="启动"><a class="markdownIt-Anchor" href="#启动"></a> 启动</h3><p>redis 默认并不是后台启动 ，需要修改config中 <strong>daemonize</strong>属性改为yes</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server  redis.config</span><br></pre></td></tr></table></figure><h3 id="使用redis客户端连接"><a class="markdownIt-Anchor" href="#使用redis客户端连接"></a> 使用redis客户端连接</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reids-cli -h 127.0.0.1  -p 6379</span><br></pre></td></tr></table></figure><p>cli连接后关闭redis</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutdown</span><br></pre></td></tr></table></figure><h2 id="常用命令"><a class="markdownIt-Anchor" href="#常用命令"></a> 常用命令</h2><ul><li><p>查询所有key</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keys *</span><br></pre></td></tr></table></figure></li></ul><h2 id="数据结构"><a class="markdownIt-Anchor" href="#数据结构"></a> 数据结构</h2><p>Redis底层数据结构一共有 6 种，分别是简单动态字符串、双向链表、压缩列表、哈希表、跳表和整数数组。利用各个数据结构不同的特性，在不同的场景下，动态组成了了各种数据类型，对应关系如下图所示：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/xiaozhuo_Q/images/raw/master/blog/image-20210113220722832.png" alt="image-20210113220722832" /></p><p>Redis作为一个典型的键值对数据库，我们先来看看它的键值对都是如何保存的。<br />首先Redis服务器中每个服务器都是存在RedisService中长度为dbnum（默认为16）的RedisDB数组中，所以redis默认拥有16个数据库的。<br />RedisDB数组中每个数据库使用Redisdb结构来表示，而RedisDB数据库结构下的dict字典就保存该数据库所有的键值对信息；</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/xiaozhuo_Q/images/raw/master/blog/image-20210113223224391.png" alt="image-20210113223224391" /></p><h3 id="dict-字典哈希表"><a class="markdownIt-Anchor" href="#dict-字典哈希表"></a> Dict 字典/哈希表</h3><p>dict字典的底层是使用哈希表实现的，通过这哈希表可以高效的完成键值的关联与对键值对的管理。</p><p>而哈希表就是多个哈希桶构成的数组。每个键值对根据键的哈希值存储在相应的哈希桶中，存储在相同哈希桶的键值对的哈希节点通过链地址法连接。因而每个键值对节点都有指向对应key，val，以及下一个节点的指针。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/xiaozhuo_Q/images/raw/master/blog/image-20210118105401587.png" alt="image-20210118105401587" /></p><p>那么作为一个哈希表，重点往往在散列函数，哈希冲突，扩容机制这几个点。</p><p><strong>散列函数</strong>的作用在于计算哈希key最终存储在哪个哈希槽上，因此散列函数的算法除了效率还需要尽可能的将每个节点均匀地分散到哈希槽上，让散列尽可能的均匀。</p><p>redis在字典中具体使用散列的算法是 Murmurhash2。Murmurhash2是一种非加密hash算法，相对其他哈希散列算法。</p><blockquote><p><em>这种算法即使输入的键是有规律的，算法仍能给出一个很好的随机分布性，计算速度非常快，使用简单。</em></p></blockquote><p><strong>哈希冲突</strong> 当多个哈希节点被分配到同一个哈希槽时就会产生哈希冲突，在redis中就使用链地址法来解决，每个节点都有一个next指针来连接下一个节点，用链地址的形式连接多个节点在同一个哈希槽上现成一个单向链表，每加入一个新的节点时，由于每个哈希槽指针只指向链表的表头，所以是使用头插法，插入到链表的表头位置。</p><p><strong>渐近式rehash</strong></p><p>由于当哈希表内所保存的哈希节点越来越多时，就需要对哈希表的大小进行扩容，通过增加哈希桶的方式，使整个哈希表的负载因子（used/size）即每一个哈希桶内链表的个数在一个合理的范围。扩容的具体方式就用上了dict结构下的rehashidx变量与ht数组中另一个哈希表了。那么具体是如何进行渐进式rehash的呢？</p><ol><li><p>为另一个空闲的新哈希表分配空间。空间大小为&gt;= 两倍旧哈希表所承载节点的2^n次方。（收缩时为一倍）</p></li><li><p>将rehashidx由默认值-1设为0；开始渐进式rehash。</p></li><li><p>每当对字典进行操作时，除了执行原本的操作还会将旧哈希表rehashidx索引对应的哈希槽内所有的哈希节点进行rehash（重新计算哈希值并根据新哈希表大小计算出在新哈希表的哈希槽）到新的哈希表。然后rehashidx++；</p></li><li><p>当对旧哈希表所有的键值对都rehash到新的哈希表时重新将rehashidx设为-1.</p></li><li><p>释放的哈希表。将指向旧哈希表的指针指向新的哈希表，为原本新哈希表指针指向一个新的哈希表。这样整个渐进式rehash过程就完成了。</p><p>这种渐进式rehash的方式保证了每一次的哈希表rehash的量不会过多，时间不会过久阻塞了单线程的redis。</p><p>rehash的扩容触发条件会根据redis是否有在创建子进程（BGSAVE与BGREWRITEAOF）而改变。当有进行创建子进程的操作时，只有负载因子大于5才会进行rehash扩容否则只需大于1就可以进行rehash了。当负载因子小于0.1就会进行缩小。</p><p>在渐进式rehash期间对字典的所有操作都会针对新旧哈希表进行操作的。</p></li></ol><h3 id="整数集合"><a class="markdownIt-Anchor" href="#整数集合"></a> 整数集合</h3><h3 id="双向链表"><a class="markdownIt-Anchor" href="#双向链表"></a> 双向链表</h3><h3 id="压缩列表"><a class="markdownIt-Anchor" href="#压缩列表"></a> 压缩列表</h3><h3 id="skiplist-跳跃表"><a class="markdownIt-Anchor" href="#skiplist-跳跃表"></a> skiplist 跳跃表</h3><p>​Redis使用跳跃表(skiplist)作为有序集合键的底层实现之一。skiplist本质上也是一种查找结构，用于解决算法中的查找问题（Searching）。一般查找问题的解法分为两个大类：一个是基于各种平衡树，一个是基于哈希表。但skiplist却比较特殊，它没法归属到这两大类里面。因为他是基于链表实现的。算是分治查找使用链表，在牺牲空间复杂度情况下产生的结构。</p><p>​传统意义的单链表是一个线性结构。像有序的链表中大部分操作例如：插入，查找 都是需要一个O(n)的时间；</p><p><img src= "/img/loading.gif" data-lazy-src="http://images.zhuoke.xyz/img/20150530162529554" alt="img" /></p><p>​先来看看skiplist比较基础的结构图，使用上图中所看到的的跳跃表。由于我们能够先通过每一个节点的最上层的指针先进行查找，将查找的值与目前节点的后继节点的值进行对比，如果大于则继续与后继指针对比，否则就下沉一层然后继续循环，直到找到该值在跳跃表的位置。（最后一定下沉到最下层）这样子就能跳过大部分的节点。然后再缩减范围，对以下一层的指针进行查找，若仍未找到，缩小范围继续查找。通过在每个节点增加多个后继指针就能够大大降低降低查找所需时间。原本O（n）也降低到O(logn);</p><p>基于redis是一种内存数据库，所以像使用B+tree实现索引这一类的数据结构只使用于存储在磁盘的mysql之类的数据库。基于哈希表又不满足数据库多样的需求，Redis 中的有序集合支持的核心操作主要有下面这几个：</p><ul><li>插入一个数据</li><li>删除一个数据</li><li>查找一个数据</li><li>按照区间查找数据（比如查找在[100,356]之间的数据）</li><li>迭代输出有序序列</li></ul><p>其中，插入、查找、删除以及迭代输出有序序列这几个操作，红黑树也能完成，时间复杂度和跳表是一样的，但是，按照区间来查找数据这个操作，红黑树的效率没有跳表高。</p><h3 id="sds-简单动态字符串"><a class="markdownIt-Anchor" href="#sds-简单动态字符串"></a> SDS 简单动态字符串</h3><p>关于String类型底层的数据结构，虽然redis是使用c编写的，但是String并没有用c语言的字符串来实现。而是使用了一种简单动态字符串（simple dynamic string），即SDS作为Redis默认字符串的数据结构。<strong>SDS</strong></p><p>用于在以下方面</p><ul><li><p>数据库的字符串</p></li><li><p>缓冲区（AOF模块的AOF缓冲区；客户端状态的输入缓冲区）</p><p>可以看到SDS被大量应用在数据快速修改的场景。而C字符串长度每一次增加或减少都会程序都需要进行一次内存重分配。而SDS结构则进行了优化。类似于ArrayList，通过一些冗余空间来减少内存重新分配的次数，我们先来看一下SDS的结构。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">struct sdshdr &#123;</span><br><span class="line"></span><br><span class="line">//字符串长度</span><br><span class="line"></span><br><span class="line">   int len;</span><br><span class="line"></span><br><span class="line">//空闲字节</span><br><span class="line"></span><br><span class="line">   int free;</span><br><span class="line"></span><br><span class="line">//实际存储数据buf的char型数组</span><br><span class="line"></span><br><span class="line">    char buf[];</span><br><span class="line">&#125;;      </span><br></pre></td></tr></table></figure><p>SDS整个结构还是相对比较简单明了，直接存储了字符串的长度以及另外存储数组空闲字节</p><p>，这样设计就可以<strong>直接获得字符串长度</strong>，而不用遍历到空字符；另外使得存储数据的buf数组不用跟c字符串一样，强制使数据量与存储数据的数组容量一致，实现<strong>空间预分配</strong>与<strong>惰性空间</strong>释放大大减少了数据变化后内存空间重分配的次数。虽然SDS与C字符串一样以空字符结尾，但是SDS的APi都是二进制安全的，不但可以<strong>避免缓冲区溢出</strong>而且<strong>可以使用原本C&lt;string.h&gt;中部分函数</strong>。还可以保存二进制数据(图片，音视频等文件)。</p></li></ul><h3 id="redis-model"><a class="markdownIt-Anchor" href="#redis-model"></a> Redis Model</h3><h2 id="数据类型"><a class="markdownIt-Anchor" href="#数据类型"></a> <strong>数据类型</strong></h2><h3 id="string"><a class="markdownIt-Anchor" href="#string"></a> String</h3><h4 id="命令"><a class="markdownIt-Anchor" href="#命令"></a> 命令</h4><ul><li><a href="http://redisdoc.com/string/set.html">SET</a>/<a href="http://redisdoc.com/string/get.html">GET</a>/<a href="http://redisdoc.com/string/setnx.html">SETNX</a>/<a href="http://redisdoc.com/string/setex.html">SETEX</a>/<a href="http://redisdoc.com/string/psetex.html">GETEX</a>/<a href="http://redisdoc.com/string/getset.html">GETSET</a>    获取赋值</li><li><a href="http://redisdoc.com/string/append.html">APPEND</a>/<a href="http://redisdoc.com/string/setrange.html">SETRANGE</a>/<a href="http://redisdoc.com/string/getrange.html">GETRANGE</a>   局部修改</li><li><a href="http://redisdoc.com/string/incr.html">INCR</a>/<a href="http://redisdoc.com/string/incrby.html">INCRBY</a>/<a href="http://redisdoc.com/string/incrbyfloat.html">INCRBYFLOAT</a>/<a href="http://redisdoc.com/string/decr.html">DECR</a>/<a href="http://redisdoc.com/string/decrby.html">DECRBY</a> 增量/减量</li><li><a href="http://redisdoc.com/string/mset.html">MSET</a>/<a href="http://redisdoc.com/string/msetnx.html">MSETNX</a>/<a href="http://redisdoc.com/string/mget.html">MGET</a> 批量操作</li></ul><h3 id="hash"><a class="markdownIt-Anchor" href="#hash"></a> Hash</h3><h4 id="命令-2"><a class="markdownIt-Anchor" href="#命令-2"></a> 命令</h4><ul><li><a href="http://redisdoc.com/hash/hset.html">HSET</a>/<a href="http://redisdoc.com/hash/hsetnx.html">HSETNX</a>/<a href="http://redisdoc.com/hash/hget.html">HGET</a>/<a href="http://redisdoc.com/hash/hkeys.html">HKEYS</a>/<a href="http://redisdoc.com/hash/hvals.html">HVALS</a></li><li><a href="http://redisdoc.com/hash/hexists.html">HEXISTS</a>/<a href="http://redisdoc.com/hash/hdel.html">HDEL</a>/<a href="http://redisdoc.com/hash/hlen.html">HLEN</a>/<a href="http://redisdoc.com/hash/hstrlen.html">HSTRLEN</a>   对field 单独的操作</li><li><a href="http://redisdoc.com/hash/hincrby.html">HINCRBY</a>/<a href="http://redisdoc.com/hash/hincrbyfloat.html">HINCRBYFLOAT</a></li><li><a href="http://redisdoc.com/hash/hmset.html">HMSET</a>/<a href="http://redisdoc.com/hash/hmget.html">HMGET</a>/<a href="http://redisdoc.com/hash/hgetall.html">HGETALL</a></li></ul><h3 id="list"><a class="markdownIt-Anchor" href="#list"></a> List</h3><h4 id="命令-3"><a class="markdownIt-Anchor" href="#命令-3"></a> 命令</h4><ul><li><a href="http://redisdoc.com/list/lpush.html">LPUSH</a>/<a href="http://redisdoc.com/list/lpushx.html">LPUSHX</a>/<a href="http://redisdoc.com/list/rpush.html">RPUSH</a>/<a href="http://redisdoc.com/list/rpushx.html">RPUSHX</a>/<a href="http://redisdoc.com/list/lpop.html">LPOP</a>/<a href="http://redisdoc.com/list/rpop.html">RPOP</a>/<a href="http://redisdoc.com/list/rpoplpush.html">RPOPLPUSH</a></li><li><a href="http://redisdoc.com/list/lrem.html">LREM</a></li><li><a href="http://redisdoc.com/list/llen.html">LLEN</a></li><li><a href="http://redisdoc.com/list/lindex.html">LINDEX</a></li><li><a href="http://redisdoc.com/list/linsert.html">LINSERT</a></li><li><a href="http://redisdoc.com/list/lset.html">LSET</a></li><li><a href="http://redisdoc.com/list/lrange.html">LRANGE</a></li><li><a href="http://redisdoc.com/list/ltrim.html">LTRIM</a></li><li><a href="http://redisdoc.com/list/blpop.html">BLPOP</a></li><li><h3 id="brpop"><a class="markdownIt-Anchor" href="#brpop"></a> <a href="http://redisdoc.com/list/brpop.html">BRPOP</a></h3></li><li><a href="http://redisdoc.com/list/brpoplpush.html">BRPOPLPUSH</a></li></ul><h3 id="set"><a class="markdownIt-Anchor" href="#set"></a> Set</h3><h4 id="命令-4"><a class="markdownIt-Anchor" href="#命令-4"></a> 命令</h4><ul><li><a href="http://redisdoc.com/set/sadd.html">SADD</a></li><li><a href="http://redisdoc.com/set/sismember.html">SISMEMBER</a></li><li><a href="http://redisdoc.com/set/spop.html">SPOP</a></li><li><a href="http://redisdoc.com/set/srandmember.html">SRANDMEMBER</a></li><li><a href="http://redisdoc.com/set/srem.html">SREM</a></li><li><a href="http://redisdoc.com/set/smove.html">SMOVE</a></li><li><a href="http://redisdoc.com/set/scard.html">SCARD</a></li><li><a href="http://redisdoc.com/set/smembers.html">SMEMBERS</a></li><li><a href="http://redisdoc.com/set/sscan.html">SSCAN</a></li><li><a href="http://redisdoc.com/set/sinter.html">SINTER</a></li><li><a href="http://redisdoc.com/set/sinterstore.html">SINTERSTORE</a></li><li><a href="http://redisdoc.com/set/sunion.html">SUNION</a></li><li><a href="http://redisdoc.com/set/sunionstore.html">SUNIONSTORE</a></li><li><a href="http://redisdoc.com/set/sdiff.html">SDIFF</a></li><li><a href="http://redisdoc.com/set/sdiffstore.html">SDIFFSTORE</a></li></ul><h3 id="sorted-sets"><a class="markdownIt-Anchor" href="#sorted-sets"></a> Sorted Sets</h3><h4 id="命令-5"><a class="markdownIt-Anchor" href="#命令-5"></a> 命令</h4><ul><li><a href="http://redisdoc.com/sorted_set/zadd.html">ZADD</a></li><li><a href="http://redisdoc.com/sorted_set/zscore.html">ZSCORE</a></li><li><a href="http://redisdoc.com/sorted_set/zincrby.html">ZINCRBY</a></li><li><a href="http://redisdoc.com/sorted_set/zcard.html">ZCARD</a></li><li><a href="http://redisdoc.com/sorted_set/zcount.html">ZCOUNT</a></li><li><a href="http://redisdoc.com/sorted_set/zrange.html">ZRANGE</a></li><li><a href="http://redisdoc.com/sorted_set/zrevrange.html">ZREVRANGE</a></li><li><a href="http://redisdoc.com/sorted_set/zrangebyscore.html">ZRANGEBYSCORE</a></li><li><a href="http://redisdoc.com/sorted_set/zrevrangebyscore.html">ZREVRANGEBYSCORE</a></li><li><a href="http://redisdoc.com/sorted_set/zrank.html">ZRANK</a></li><li><a href="http://redisdoc.com/sorted_set/zrevrank.html">ZREVRANK</a></li><li><a href="http://redisdoc.com/sorted_set/zrem.html">ZREM</a></li><li><a href="http://redisdoc.com/sorted_set/zremrangebyrank.html">ZREMRANGEBYRANK</a></li><li><a href="http://redisdoc.com/sorted_set/zremrangebyscore.html">ZREMRANGEBYSCORE</a></li><li><a href="http://redisdoc.com/sorted_set/zrangebylex.html">ZRANGEBYLEX</a></li><li><a href="http://redisdoc.com/sorted_set/zlexcount.html">ZLEXCOUNT</a></li><li><a href="http://redisdoc.com/sorted_set/zremrangebylex.html">ZREMRANGEBYLEX</a></li><li><a href="http://redisdoc.com/sorted_set/zscan.html">ZSCAN</a></li><li><a href="http://redisdoc.com/sorted_set/zunionstore.html">ZUNIONSTORE</a></li><li><a href="http://redisdoc.com/sorted_set/zinterstore.html">ZINTERSTORE</a></li></ul><h3 id="hyperloglog"><a class="markdownIt-Anchor" href="#hyperloglog"></a> HyperLogLog</h3><h3 id="geo"><a class="markdownIt-Anchor" href="#geo"></a> GEO</h3><h3 id="pubsub"><a class="markdownIt-Anchor" href="#pubsub"></a> Pub/Sub</h3><h3 id="stream"><a class="markdownIt-Anchor" href="#stream"></a> Stream</h3><h2 id="高可用可靠"><a class="markdownIt-Anchor" href="#高可用可靠"></a> 高可用，可靠</h2><h3 id="复制"><a class="markdownIt-Anchor" href="#复制"></a> 复制</h3><p>当有了持久化机制后，确保了redis断电重启后可以恢复好之前的数据，提高了可靠性，但是还无法避免服务不可用的状态，而提高可靠性最为常用的方式就是增加服务的实例节点，增加数据冗余。将一份数据保存到多个服务节点上。即使有的节点宕机情况整体依旧可以提供服务，减少对服务的影响；<br />redis则采用<strong>读写分离</strong>，主从同步的方式多个实例保存同一份数据；又主库提供写操作然后同步到其他从库；而读操作主从共同提供服务，在普遍读大于写的业务需求下提供较高的可靠性与性能；<br />而采用一写多从，读写分离的方式可以有效的避免了多个实例之间的分布式多个实例之间的数据一致性与事务的开销。那么具体又是如何实现主从直接的数据一致呢。</p><h4 id="数据同步"><a class="markdownIt-Anchor" href="#数据同步"></a> 数据同步</h4><p>主要分为三大阶段：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/xiaozhuo_Q/images/raw/master/blog/image-20210125230430426.png" alt="image-20210125230430426" /></p><h5 id="全量同步"><a class="markdownIt-Anchor" href="#全量同步"></a> 全量同步</h5><p>首先 由从库发送<strong>replicaof</strong>命令到主库，主库通过<strong>fullresync</strong>命令返回自己的<strong>runid</strong>与offset 偏移量的确认主从关系后开始全量同步；</p><p>从库给主库发送<strong>psync</strong>命令，表示要进行数据同步，主库根据这个命令的参数来启动复制。psync命令包含了主库的runlD和复制进度offset两个参数。</p><p>主库执行bgsave命令后将生成的rdb文件发送给从库，从库接受rdb文件后先清空本地数据然后载入rdb文件。</p><p>主库将同步期间的写命令记录到replication buffer 中，待从库加载完先前的rdb文件就将replication buffer中命令发送给从库执行；完成第一次全量数据的同步；</p><h5 id="命令传播"><a class="markdownIt-Anchor" href="#命令传播"></a> 命令传播</h5><p>在完成第一次主从同步后，主从之间的数据就达到数据的一致；但这种数据一致情况一定主库执行新的写操作就会被破坏；为此主库将与每一个从库维持一个<strong>长链接</strong>，在执行完写操作后对从服务器执行命令传播操作；即将该写操作发送给从服务器执行，维护主从数据库的一致性；</p><h5 id="部分重同步"><a class="markdownIt-Anchor" href="#部分重同步"></a> 部分重同步</h5><h3 id="哨兵"><a class="markdownIt-Anchor" href="#哨兵"></a> 哨兵</h3><h3 id="集群"><a class="markdownIt-Anchor" href="#集群"></a> 集群</h3><h3 id="持久化"><a class="markdownIt-Anchor" href="#持久化"></a> 持久化</h3><p>​Redis是一个内存型的数据库，它所有的数据都是保存在内存中的，而内存虽然可以快速的读写，但是一旦断电，内部存储的所有数据都会丢失。即使是像用作缓存的这种其他数据库仍有备份数据的场景，重新加载数据依旧会对其他的数据库造成一定的压力。所以为了就觉这方面的问题，Redis本身自己就提供了持久化的机制，分别为<strong>AOF日志</strong>与<strong>RDB快照</strong>两种持久化方式。</p><h4 id="aof日志"><a class="markdownIt-Anchor" href="#aof日志"></a> AOF日志</h4><p>​AOF日志是redis通过保存每一条对数据库操作的命令来实现最终对数据库所有数据的保存。是数据库常见的一种存储同步数据的一种方式。AOF持久化实现的主要过程通常分为命令追加,文件写入与同步三步。</p><h5 id="命令追加"><a class="markdownIt-Anchor" href="#命令追加"></a> 命令追加</h5><p>​服务器在每一次成功执行一条写命令后，就会以redis命令请求协议的格式追加到aof_buf缓冲区的末尾；</p><p>​例如 成功执行一个普通的SET命令后以以下协议格式的内容追加到缓冲区。</p><p>​命令： SET zhuoke blog</p><p>​追加内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*3</span><br><span class="line">$3</span><br><span class="line">set</span><br><span class="line">$6</span><br><span class="line">zhuoke</span><br><span class="line">$4</span><br><span class="line">blog</span><br></pre></td></tr></table></figure><p>​通过这种先执行成功再写入缓冲区的方式  可以<strong>减去命令语法检查操作</strong>与<strong>不会阻塞写操作</strong>却增加了成功执行命令后尚未持久化就宕机丢失数据的风险与在aof写盘时给下一个写操作造成阻塞的风险。</p><h5 id="文件同步写入"><a class="markdownIt-Anchor" href="#文件同步写入"></a> 文件同步写入</h5><p>​那么在命令追加阶段的风险其实都是可以通过控制文件的写入与同步的频率来减少这种风险。文件同步写入的操作会在服务器每一个事件循环结束前调用<strong>flushAppendOnlyFile</strong>这个函数来根据服务器的设置提供的频率来判断是否执行文件的同步与执行操作。而这个频率是由服务器提供的一个配置项 <strong>appendfsync</strong>来设置的。<strong>appendfsync</strong>具体有三个选项可供选择</p><ul><li><p>Always 每个写命令执行完立刻<strong>同步写回</strong>到磁盘；</p></li><li><p>Everysec 每秒由一个线程专门负责执行将缓冲区内容写回到文件</p></li><li><p>No 由操作系统控制缓冲区写回到磁盘文件</p><p>三种策略对比优缺点</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/xiaozhuo_Q/images/raw/master/blog/image-20210121235326332.png" alt="image-20210121235326332" /></p></li></ul><p>三种策略由上到下性能递增，而可靠性却相反在递减。具体选择就根据应用场景了。redis默认选项是一个折中选择了Everysec。</p><h5 id="aof文件载入"><a class="markdownIt-Anchor" href="#aof文件载入"></a> AOF文件载入</h5><p>​AOF光将数据保存到磁盘的操作还不行，我们还需要将文件存储到磁盘的aof日志文件读取会redis的内存空间。<br />前文提到，aof中具体保存的是redis命令格式的数据。因而只需要一个客户端读取aof文件中的命令发送给redis的服务端即可。<br />AOF具体的文件的载入的流程如下：</p><ul><li>服务端启动一个伪客户端（不带网络连接）</li><li>读取并执行aof文件中的命令</li><li>读取完毕，载入结束</li></ul><h5 id="aof重写"><a class="markdownIt-Anchor" href="#aof重写"></a> AOF重写</h5><p>​随着aof日志不断的写入，aof文件的大小也会不断的增大，当aof过大时会影响aof追加与载入恢复数据的效率；这个时候redis就提供<strong>aof重写机制</strong>来<strong>减少</strong>aof文件的大小了；<br />​AOF会保存redis执行成功的每一条写命令。当多条命令都是对同一个对象进行数据写操作时，往往这多条命令会存在大量冗余的数据；AOF重写是比较有意思的一个点，他重写并不是对原先aof文件内容使用压缩算法进行精简，而是<strong>直接根 据数据库中键值对的最新数据生成对应的写命令</strong>；使原本对应该键值对的多条写操作合并成一条；大大的压缩了aof文件的大小；<br />​但是aof重写机制与aof原本机制最大不同在于，它并没有相关的配置项来控制落盘频率，每一次重写所有数据都是直接写入硬盘因而存在大量的读写操作；因为aof重写只有在aof文件比较大的时候才会进行重写，重写的频率并不频繁，所以可以使用较大的开销，直接开启了新的<strong>子进程</strong>对<strong>数据副本</strong>进行重写；</p><p>对数据副本进行重写却令重写期间的数据并没有拷贝到数据副本，导致数据库数据与aof文件数据不一致。因此redis在重写期间设置了aof重写的缓冲区，在重写期间，每一条写命令运行成功后除了需要加入原本的aof缓冲区外还需要追加到aof重写的缓冲区；那么整个aof重写的流程如下：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/xiaozhuo_Q/images/raw/master/blog/image-20210123203057130.png" alt="image-20210123203057130" /></p><p>主进程</p><ul><li><p>主进程创建出子进程<strong>bgrewriteao</strong>f并且拷贝出数据副本</p></li><li><p>执行写命令并分别追加到aof缓冲区与aof追加缓冲区；</p></li><li><p>接收到子进程发送的重写完成信号，将重写期间写命令追加到新aof文件中；</p></li><li><p>用新的aof文件覆盖旧aof文件；</p></li></ul><p>子进程</p><ul><li>开始重写</li><li>遍历所有的键值对 （忽略过期的键）</li><li>根据键的类型镜像重写</li><li>重写完毕</li><li>向主进程发送重写完成的信号</li></ul><p>可以看到由子进程来执行重写的操作可以很大程度避免了主进程的阻塞；但是在fork子进程与重写完毕将aof重写缓冲区内容追加到新aof文件依旧不可避免地产生<strong>阻塞风险</strong>；AOF文件载入时也是逐一执行命令，这样效率也比较慢；</p><h4 id="rdb快照"><a class="markdownIt-Anchor" href="#rdb快照"></a> RDB快照</h4><p>说完aof日志那就来叨叨另一个持久化机制：RDB快照；与aof记录写命令不同，rdb是直接记录某个是时刻的内存内的数据写到磁盘上；</p><p>触发rdb文件生成的方式又两种，一种是命令形式，另一种是在配置文件设置好触发条件的自动间隔性保存；</p><p>redis有两个命令可以主动生成rdb文件；</p><ul><li>save ： 在主线程执行；会阻塞主线程；</li><li>bgsave：创建一个子进程来执行；（默认配置选项）</li></ul><p>配置文件中默认触发条件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">save 900 1</span><br><span class="line"></span><br><span class="line">save 300 10</span><br><span class="line"></span><br><span class="line">save 60 1000</span><br></pre></td></tr></table></figure><p>那么满足其中一个条件即可触发bgsave命令</p><p>例如： 在900秒内对数据库执行了一次修改命令 即可触发bgsave命令</p><p>最终配置文件中save的配置会被加载到redisServer中的 saveparams数组中；同时redisServer还保存了上次执行完rdb之后成功修改次数的计数器<strong>dirty</strong>与上次执行rdb的unix时间戳lastsave属性；</p><p>​周期性函数serverCron每一执行就会根据这三个值来判断是否执行bgsave函数；</p><p>​bgsave子进程与主进程之间共享所有内存数据；当主进程需要修改数据时就会使用操作系统提供COW(copy on write)写时复制技术；子进程读取复制出来的旧数据；主进程直接修改原来的数据；子进程与主进程之间数据避免影响；</p><p>​<img src= "/img/loading.gif" data-lazy-src="https://gitee.com/xiaozhuo_Q/images/raw/master/blog/image-20210124213009859.png" alt="image-20210124213009859" /></p><p>那么对于平时redis我们应该用哪种方式来持久化呢？</p><p><img src= "/img/loading.gif" data-lazy-src="https://pic1.zhimg.com/80/v2-005677bf0c9c4937bddce3794f387a77_1440w.jpg?source=1940ef5c" alt="img" /></p><p>小孩子才做选择题~</p><p>平时日常可混合使用aof与rdb，使用rdb做全量备份，在两次rdb之间使用aof做增量备份；</p><p>这样一来，快照不用很频繁地执行，这就避免了频繁fork对主线程的影响。而且，AOF日志也只用记录两次快照间的操作，也就是说，不需要记录所有操作了，因此就不会出现文件过<br />大的情况了，也可以避免重写开销。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/xiaozhuo_Q/images/raw/master/blog/image-20210124215636329.png" alt="image-20210124215636329" /></p>]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2020/11/22/C++/"/>
      <url>/2020/11/22/C++/</url>
      
        <content type="html"><![CDATA[<p>目   录</p><p><a href="#_Toc338237663">第一章 认识C++的对象… 3</a></p><p><a href="#_Toc338237664">1.1 初识C++的函数和对象… 3</a></p><p><a href="#_Toc338237665">1.2 认识C++语言面向过程编程的特点… 4</a></p><p><a href="#_Toc338237666">1.3 程序的编辑、编译和运行的基本概念… 5</a></p><p><a href="#_Toc338237667">第二章 从结构到类的演变… 6</a></p><p><a href="#_Toc338237668">2.1 结构的演化… 6</a></p><p><a href="#_Toc338237669">2.2 从结构演变一个简单的类… 6</a></p><p><a href="#_Toc338237670">2.3 面向过程与面向对象… 6</a></p><p><a href="#_Toc338237671">2.4 C++面向对象程序设计的特点… 6</a></p><p><a href="#_Toc338237672">2.5 使用类和对象… 7</a></p><p><a href="#_Toc338237673">2.6 string对象数组与泛型算法… 7</a></p><p><a href="#_Toc338237674">第3章 函数和函数模板… 7</a></p><p><a href="#_Toc338237675">3.1 函数的参数及其传递方式… 7</a></p><p><a href="#_Toc338237676">3.2 深入讨论函数返回值… 8</a></p><p><a href="#_Toc338237677">3.3 内联函数… 9</a></p><p><a href="#_Toc338237678">3.4 函数重载和默认参数… 9</a></p><p><a href="#_Toc338237679">3.5 函数模板… 9</a></p><p><a href="#_Toc338237680">第4章 类和对象… 10</a></p><p><a href="#_Toc338237681">4.1 类及其实例化… 10</a></p><p><a href="#_Toc338237682">4.2 构造函数… 11</a></p><p><a href="#_Toc338237683">4.3 析构函数… 12</a></p><p><a href="#_Toc338237684">4.4 调用复制构造函数的综合实例… 13</a></p><p><a href="#_Toc338237685">4.5 成员函数重载及默认参数… 13</a></p><p><a href="#_Toc338237686">4.6 this指针… 13</a></p><p><a href="#_Toc338237687">4.7 一个类的对象作为另一个类的成员… 13</a></p><p><a href="#_Toc338237688">4.8 类和对象的性质… 13</a></p><p><a href="#_Toc338237689">4.9 面向对象的标记图… 14</a></p><p><a href="#_Toc338237690">4.10 面向对象编程的文件规范… 15</a></p><p><a href="#_Toc338237691">第五章 特殊函数和成员… 16</a></p><p><a href="#_Toc338237692">5.1 对象成员的初始化… 16</a></p><p><a href="#_Toc338237693">5.2 静态成员… 17</a></p><p><a href="#_Toc338237694">5.3 友元函数… 17</a></p><p><a href="#_Toc338237695">5.4 const对象… 18</a></p><p><a href="#_Toc338237696">5.5 数组和类… 19</a></p><p><a href="#_Toc338237697">5.6 指向类成员函数的指针… 19</a></p><p><a href="#_Toc338237698">5.7 求解一元二次方程… 20</a></p><p><a href="#_Toc338237699">第六章 继承和派生… 20</a></p><p><a href="#_Toc338237700">6.1 继承和派生的基本概念… 20</a></p><p><a href="#_Toc338237701">6.2 单一继承… 20</a></p><p><a href="#_Toc338237702">6.3 多重继承… 22</a></p><p><a href="#_Toc338237703">6.4 二义性及其支配规则… 22</a></p><p><a href="#_Toc338237704">第七章 类模板与向量… 22</a></p><p><a href="#_Toc338237705">7.1 类模板… 22</a></p><p><a href="#_Toc338237706">7.2 向量与泛型算法… 23</a></p><p><a href="#_Toc338237707">7.3 出圈游戏… 25</a></p><p><a href="#_Toc338237708">第八章 多态性和虚函数… 25</a></p><p><a href="#_Toc338237709">8.1 多态性… 25</a></p><p><a href="#_Toc338237710">8.2 虚函数… 25</a></p><p><a href="#_Toc338237711">8.3 多重继承与虚函数… 27</a></p><p><a href="#_Toc338237712">8.4 类成员函数的指针与多态性… 27</a></p><p><a href="#_Toc338237713">第9章 运算符重载及流类库… 27</a></p><p><a href="#_Toc338237714">9.1 运算符重载… 27</a></p><p><a href="#_Toc338237715">9.2 流类库… 28</a></p><p><a href="#_Toc338237716">9.3 文件流… 31</a></p><p><a href="#_Toc338237717">第10章 面向对象设计实例… 32</a></p><p><a href="#_Toc338237718">10.1 过程抽象和数据抽象… 32</a></p><p><a href="#_Toc338237719">10.2 发现对象并建立对象层… 33</a></p><p><a href="#_Toc338237720">10.3 定义数据成员和成员函数… 33</a></p><p><a href="#_Toc338237721">10.4 如何发现基类和派生类结构… 34</a></p><p><a href="#_Toc338237722">10.5 接口继承与实现继承… 34</a></p><p><a href="#_Toc338237723">10.6 设计实例… 35</a></p><h1 id="第一章-认识c的对象"><a class="markdownIt-Anchor" href="#第一章-认识c的对象"></a> 第一章 认识C++的对象</h1><h2 id="11-初识c的函数和对象"><a class="markdownIt-Anchor" href="#11-初识c的函数和对象"></a> 1.1 初识C++的函数和对象</h2><p>一般称现实世界中客观存在的事物为对象。</p><p>1.混合型语言</p><p>C<ins>程序以.cpp作为文件扩展名，并且必须有一个且只能有一个名为mian（不是C</ins>的关键字）的主函数。真正的面向对象的语言没有主函数，C++保留了这个面向过程的主函数，所以称之为混合型语言。</p><p>2.灵活的注释方式</p><p>3.使用输出和输入对象</p><p>C++将数据从一个对象流向另一个对象的流动的抽象称为“流”。从流中获取数据的操作称为提取操作。向流中添加数据的操作称为插入操作。</p><p>cin用来处理标准输入，即键盘输入。cout用来处理标准输出，即屏幕输出。</p><p>4.使用命名空间</p><p>所谓命名空间（namespace）是一种将程序库名称封装起来的方法，它提高了程序的性能和可靠性。</p><p>C++新标准就是将标准类库中的头文件与一般的头文件（需要使用扩展名“.h”）区分开来。当然，也可以自己定义符合标准库的头文件，使用这种头文件时，也需要同时使用命名空间语句。</p><p>如果仍然使用C库中的头文件，则需要使用扩展名“.h”形式，例如&lt;math.h&gt;和&lt;stdio.h&gt;。如果使用C<ins>提供的头文件，则不需要使用扩展名“.h”，例如，<string>。注意C</ins>库中替代C库中的头文件的正确名称，例如可以使用<cmath>替代&lt;math.h&gt;。</p><p>5.对象的定义及初始化</p><p>定义对象包括为它命名并赋予它数据类型。</p><p>6.函数原型及其返回值</p><p>函数都需要有类型说明。int main() 指出main是整数类型，返回值由return后面的表达式决定，且表达式的值必须与声明函数的类型一致。</p><p>C++使用变量的基本规则是：必须先声明，后使用，对函数调用也是如此。</p><p>7.const修饰符和预处理程序</p><p>C语言一般使用&quot;#define&quot;定义常量，在C++中，建议使用const代替宏定义。const是放在语句定义之前的，因此可以进行类型判别。</p><p>用关键字const修饰的标识符是一类特殊的常量，称为符号常量，或const变量。使用const允许编译器对其进行类型检查并可改善程序的可读性。</p><p>C++语言可以使用宏定义。无参数的宏作为常量，而参数的宏则可以提供比函数更高的效率。但预处理只是进行简单的文本代替而不进行语法检查，所以会存在一些问题。</p><p>因为被const修饰的变量的值在程序中不能被改变，所以在声明符号常量是，必须对符号常量进行初始化，除非这个变量使用extern修饰的外部变量。</p><p>C<ins>语言预处理程序不是C</ins>编译程序的一部分，它负责分析处理几种特殊的语句，这些语句被称为预处理语句。顾名思义，预处理程序对这几种特殊语句的分析处理是在编译程序的其他部分之前进行的。为了与一般的C++程序语句相区别，所有预处理语句都以位于行首的符号“#”开始。</p><p>预处理语句有3种，分别是宏定义、文件包含和条件编译。</p><p>预处理程序把所有出现的、被定义的名字全部替换成对应的“字符序列”。#define中的名字与C++中的标识符有相同的形式，为了区别，往往用大写字母来表示（标识符用小写字母），这也适合const语句。</p><p>文件引用使用双引号还是尖括号，其含义并不一样。采用尖括号引用系统提供的包含文件，C<ins>编译系统将首先在C</ins>系统设定的目录中寻找包含文件，如果没有找到，就到指定的目录中去寻找。采用双引号引用自己定义的包含文件（一般都放在自己定义的指定目录中），这将通知C++编译器在用户当前的目录下或指定的目录下寻找包含文件。指定的目录不必在同一个逻辑盘中。</p><p>8.程序运行结果</p><p>9.程序书写格式</p><h2 id="12-认识c语言面向过程编程的特点"><a class="markdownIt-Anchor" href="#12-认识c语言面向过程编程的特点"></a> 1.2 认识C++语言面向过程编程的特点</h2><p>C++语言的标准模板库（Standard Templete Library,STL）提供了与要操作的元素类型无关的算法，不仅使许多复杂问题迎刃而解，而且也将许多面向对象的程序设计问题转化成基于对象的面向过程编程。</p><p>1.2.1 使用函数重载</p><p>C++允许为一个函数定义几个版本，从而使一个函数名具有多种功能，这称为函数重载。</p><p>1.2.2 新的基本数据类型及其注意事项</p><p>void是无类型标识符，只能声明函数的返回值类型，不能声明变量。C<ins>语言还比C语言多了bool（布尔）型。C</ins>标准只限定int和short至少要有16位，而long至少32位，short不得长于int，int不得长于long。</p><p>地址运算符“&amp;”用来取对象存储的首地址。</p><p>C++语言中的整数常量有4种类型：十进制常量、长整型常量、八进制常量和十六进制常量，并用前缀和后缀进行分类标识。</p><p>1.2.3 动态分配内存</p><p>在使用指针时，如果不使用对象地址初始化指针，可以自己给它分配地址。对于值存储一个基本类型数据的指针，申请的方式如下：</p><p>new 类型名[size] //申请可以存储size个该数据类型的对象</p><p>不再使用时，简单地使用“delete指针名”即可释放已经申请的存储空间。</p><p>1.2.4 引用</p><p>别名的地址就是原来对象的地址，选定命名时使用“引用”运算符“&amp;”，再选用数据类型与之配合。引用的声明方式如下：</p><p>数据类型&amp; 别名=对象名；</p><p>所谓“引用”就是将一个新标识符和一块已经存在的存储区域相关联。因此，使用引用时没有分配新的存储区域，它本身并不是新的数据类型。</p><p>引用通常用于函数的参数表中或者作为函数的返回值。对引用实质性的理解应抓住如下两点：</p><p>（1）引用实际上就是变量的别名，使用引用就如同直接使用变量一样。引用与变量名在使用的形式上是完全一样的，引用只是作为一种标识对象的手段，不能直接声明对数组的引用，也不能声明引用的引用。</p><p>（2）引用的作用与指针有相似之处，它会对内存地址上存在的变量进行修改，但它不占用新的地址，从而节省开销。</p><p>1.2.5 对指针使用const限定符</p><p>可以用const限定符强制改变访问权限。</p><p>1.左值和右值</p><p>左值是指某个对象的表达式。</p><p>2.指向常量的指针</p><p>指向常量的指针是在非常量指针声明前面使用const，例如：</p><p>const int *p;</p><p>它告诉编译器，“*p”是常量，不能将“*p”作为左值进行操作，即限定了“*p=”的操作，所以称为指向常量的指针。</p><p>3.常量指针</p><p>把const限定符放在*号的右边，是使指针本身称为一个const指针。</p><p>int x=5;</p><p>int * const p=&amp;x；</p><p>不能改变p的指向，但可以通过间接引用运算符“*”改变其值，例如语句“*p=56;”将上面的x的值改变为56。</p><p>4.指向常量的常量指针</p><p>也可以声明指针和指向的对象都不能改动的“指向常量的常量指针”，这时必须要初始化指针。例如：</p><p>int x=2;</p><p>const int * const p=&amp;x;</p><p>告诉编译时，*p和p都是常量，都不能作为左值。</p><p>1.2.6 泛型算法应用于普通数组</p><p>所谓泛型算法，就是提供的操作与元素的类型无关。</p><p>1.2.7 数据的简单输入输出格式</p><p>C++提供了两种格式控制方式：一种是使用ios _base类提供的接口；另一种是使用一种称为操控符的特殊函数，它的特点是可直接包含在输出和输入的表达式中，因此更为方便，不带形式参数的操控符定义在头文件<iostream>中，带形式参数的操控符定义在头文件<iomanip>中。使用它们时，一是要正确包含它们，二是只有与符号“&lt;&lt;”或“&gt;&gt;”连接时才起作用，三是无参数的操控符函数不能带有“()”号。</p><h2 id="13-程序的编辑-编译和运行的基本概念"><a class="markdownIt-Anchor" href="#13-程序的编辑-编译和运行的基本概念"></a> 1.3 程序的编辑、编译和运行的基本概念</h2><p>用C<ins>语言写成的程序称为源程序，源程序必须经过C</ins>编译程序翻译成机器语言才能执行。要得到一个用C++语言设计的、名为myapp.exe的可执行文件，其过程可分为如下几步：</p><p>（1）先使用编辑器编辑一个C<ins>程序mycpp.cpp，又称其为C</ins>的源程序。</p><p>（2）然后使用C<ins>编译器对这个C</ins>程序进行编译，产生文件mycpp.obj</p><p>（3）再使用连接程序（又称Link），将mycpp.obj变成mycpp.exe</p><p>所谓集成环境，就是将C++语言编辑、编译、连接和运行程序都集成到一个综合环境中。</p><h1 id="第二章-从结构到类的演变"><a class="markdownIt-Anchor" href="#第二章-从结构到类的演变"></a> 第二章 从结构到类的演变</h1><h2 id="21-结构的演化"><a class="markdownIt-Anchor" href="#21-结构的演化"></a> 2.1 结构的演化</h2><p>类是从结构演变而来，开始称为“带类的C”。这种演变就是从让结构含有函数开始的。</p><p>2.1.1 结构发生质的演变</p><p>1.函数与数据共享</p><p>2.封装性</p><p>2.1.2 使用构造函数初始化结构对象</p><h2 id="22-从结构演变一个简单的类"><a class="markdownIt-Anchor" href="#22-从结构演变一个简单的类"></a> 2.2 从结构演变一个简单的类</h2><h2 id="23-面向过程与面向对象"><a class="markdownIt-Anchor" href="#23-面向过程与面向对象"></a> 2.3 面向过程与面向对象</h2><p>所谓“面向过程”，就是不必了解计算机的内部逻辑，而把精力主要集中在对如何求解问题的算法和过程的描述上，通过编写程序把解决问题的步骤告诉计算机。</p><p>所谓函数，就是模块的基本单位，是对处理问题的一种抽象。</p><p>结构化程序设计使用的是功能抽象，面向对象程序设计不仅能进行功能抽象，而且能进行数据抽象。“对象”实际上是功能抽象和数据抽象的统一。</p><p>面向对象的程序设计方法不是以函数过程和数据结构为中心，而是以对象代表求解问题的中心环节。他最求的是现实问题空间与软件系统解空间的近似和直接模拟。</p><p>软件开发是对给定问题求解的过程。从认识论的角度看，可以归为两项主要的活动：认识与描述。</p><p>软件开发者将被开发的整个业务范围称作“问题域”（problem domain），“认识”就是在所要处理的问题域范围内，通过人的思维，对该问题域客观存在的事物以及对所要解决的问题产生正确的认识和理解，包括弄清事物的属性，行为及其彼此之间的关系并找出解决问题的方法。</p><p>“描述”是指用一种语言把人们对问题域中事物的认识、对问题及其解决方法的认识描述出来。最终的描述必须使用一种能够被机器读得懂的语言，即编程语言。</p><h2 id="24-c面向对象程序设计的特点"><a class="markdownIt-Anchor" href="#24-c面向对象程序设计的特点"></a> 2.4 C++面向对象程序设计的特点</h2><p>和传统的程序设计方法相比，面向对象的程序设计具有抽象、封装、继承和多态性等关键要素。</p><p>2.4.1 对象</p><p>C++可使用对象名、属性和操作三要素来描述对象。</p><p>2.4.2 抽象和类</p><p>抽象是一种从一般的观点看待事物的方法，即集中于事物的本质特征，而不是具体细节或具体实现。</p><p>类的概念来自于人们认识自然、认识社会的过程。在这一过程中，人们主要使用由特殊到一般的归纳法和由一般到特殊的演绎法。在归纳的过程中，是从一个个具体的事物中把共同的特征抽取出来，形成一个一般的概念，这就是“归类”；在演绎的过程中，把同类事物，根据不同的特征分成不同的小类，这就是“分类”。对于一个具体的类，它有许多具体的个体，这些个体叫做“对象”。</p><p>类的作用是定义对象。</p><p>所谓“一个类的所有对象具有相同的属性”，是指属性的个数、名称、数据类型相同，各个对象的属性值则可以互不相同，并且随着程序的执行而变化。</p><p>2.4.3 封装</p><p>将类封装起来，也是为了保护类的安全。所谓安全，就是限制使用类的属性和操作。</p><p>对象内部数据结构这种不可访问性称为信息（数据）隐藏。</p><p>封装就是把对象的属性和操作结合成一个独立的系统单位，并尽可能隐蔽对象的内部细节。</p><p>在类中，封装是通过存取权限实现的。</p><p>2.4.4 继承</p><p>继承是一个类可以获得另一个类的特性的机制，继承支持层次概念。</p><p>通过继承，低层的类只须定义特定于它的特征，而共享高层的类中的特征。</p><p>2.4.5 多态性</p><p>不同的对象可以调用相同名称的函数，但可导致完全不同的行为的现象称为多态性。</p><h2 id="25-使用类和对象"><a class="markdownIt-Anchor" href="#25-使用类和对象"></a> 2.5 使用类和对象</h2><p>2.5.1 使用string对象</p><p>所谓方法，书就是供这类对象使用的成员函数。对象使用自己的成员函数的方法是通过“.”运算符，格式如下：</p><p>对象名.成员函数</p><p>2.5.2 使用string类的典型成员函数实例</p><p>2.5.3 使用complex对象</p><p>C++标准程序库提供complex类定义复数对象。</p><p>2.5.4 使用对象小结</p><p>注意：类是抽象出一类物质的共同特征，模板则是归纳出不同类型事物的共同操作。</p><h2 id="26-string对象数组与泛型算法"><a class="markdownIt-Anchor" href="#26-string对象数组与泛型算法"></a> 2.6 string对象数组与泛型算法</h2><h1 id="第3章-函数和函数模板"><a class="markdownIt-Anchor" href="#第3章-函数和函数模板"></a> 第3章 函数和函数模板</h1><h2 id="31-函数的参数及其传递方式"><a class="markdownIt-Anchor" href="#31-函数的参数及其传递方式"></a> 3.1 函数的参数及其传递方式</h2><p>C语言函数参数的传递方式只有传值一种，传值又分为传变量值和传变量地址值两种情况。比较复杂的是结构变量，结构变量的值是指结构域中所有的变量值。在C<ins>中，像int、float、double、char、bool等简单数据类型的变量，也是对象。类对象一般都包括数据成员和成员函数，如果在C</ins>沿用C语言的说法，则对象的值就是对象所有数据成员的值，约定参数传递中传递“对象值”是指对象的数据成员值，传递“对象地址值”是指对象的首地址值。C++函数还可以使用传递对象的“引用”方式，即它的函数参数有两种传递方式：传值和传引用。传引用其实就是传对象的地址，所有也称传地址方式。</p><p>参数传递中不要混淆传地址值和传地址的区别。传地址值传递的是值，不是地址；传地址传的是地址不是地址值。传递对象地址值是使用对象指针做为参数；传递地址时使用对象引用作为参数。</p><p>3.1.1 对象作为函数参数</p><p>将对象作为函数参数，是将实参对象的值传递给形参对象，这种传递是单向的。形参拥有实参的备份，当在函数中改变形参的值时，改变的是这个备份中的值，不会影响原来实参的值。</p><p>3.1.2 对象指针作为函数参数</p><p>将指向对象的指针作为函数参数，形参是对象指针（指针可以指向对象的地址），实参是对象的地址值。</p><p>注意：不要非要在主程序里产生指针，然后再用指针作为参数。函数原型参数的类型是指针，可以指针让它指向对象地址，即：</p><p>string *s1=&amp;str1;</p><p>是完全正确的，使用&amp;str1标识的是取对象str1的地址值，所以&amp;str1直接作为参数即可。</p><p>3.1.3 引用作为函数参数</p><p>可以使用“引用”作为函数的参数（引用形参）。这时函数并没有对形参对象初始化，即没有指定形参对象是哪个对象的别名。在函数调用是，实参对象名传给形参对象名，形参对象名就成为实参对象名的别名。实参对象和形参对象代表同一个对象，所以改变形参对象的值就是改变实参对象的值。</p><p>实际上，在虚实结合时是把实参对象的地址传给形参对象，使形参对象的地址取实参对象的地址，从而使形参对象和实参对象共享同一个单元。这就是地址传递方式。</p><p>通过使用引用参数，一个函数可以修改另外一个函数内的变量。因为引用对象不是一个独立的对象，不单独占用内存单元，而对象指针要另外开辟内存单元（其内容是地址），所以传引用比传指针更好。</p><p>注意：虽然系统向形参传递的是实参的地址而不是实参的值，但实参必须使用对象名。</p><p>3.14 默认参数</p><p>默认参数就是不要求程序员设定该参数，而由编译器在需要时给该参数赋默认值。当程序员需要传递特殊值时，必须显式地指明。默认参数是在函数原型中说明的，默认参数可以多于1个，但必须放在参数序列的后部。</p><p>如果一个默认参数需要指明一个特定值，则在其之前所有的参数都必须赋值。</p><p>3.1.5 使用const保护数据</p><p>用const修饰传递参数，意思是通知函数，它只能使用参数而无权修改它。这主要是为了提高系统的自身安全。C++中普遍采用这种方法。</p><h2 id="32-深入讨论函数返回值"><a class="markdownIt-Anchor" href="#32-深入讨论函数返回值"></a> 3.2 深入讨论函数返回值</h2><p>C++函数的返回值类型可以是除数组以外的任何类型。非void类型的函数必须向调用者返回一个值。数组只能返回地址。当函数返回值是指针或引用对象时，需要特别注意：函数返回所指的对象必须继续存在，因此不能将函数内部的局部对象作为函数的返回值。</p><p>3.2.1 返回引用的函数</p><p>函数可以返回一个引用，将函数说明为返回一个引用的主要目的是为了将该函数用在赋值运算符的左边。函数原型的表示方法如下：</p><p>数据类型 &amp;函数名（参数列表）;</p><p>3.2.2 返回指针的函数</p><p>函数的返回值可以是存储某种类型数据的内存地址，称这种函数为指针函数。它们的一般定义形式如下：</p><p>类型标识符 *函数名（参数列表）；</p><p>在C++中，除了内存分配失败之外，new不会返回空指针，并且没有任何对象的地址为零。指针所指向的对象的生存期不应低于该指针的生存期。</p><p>3.2.3 返回对象的函数</p><p>3.2.4 函数返回值作为函数的参数</p><p>如果用函数返回值作为另一个函数的参数，这个返回值必须与参数类型一致。</p><h2 id="33-内联函数"><a class="markdownIt-Anchor" href="#33-内联函数"></a> 3.3 内联函数</h2><p>使用关键字inline说明的函数称内联函数。在C++中，除具有循环语句、switch语句的函数不能说明为内联函数外，其他函数都可以说明为内联函数。使用内联函数能加快程序执行速度，但如果函数体语句多，则会增加程序代码的大小。使用小的内联函数在代码速度和大小上可以取得折衷，其他情况下取决于程序员是追求代码速度，还是追求代码的规模。</p><p>由于编译器必须知道内联函数的函数体，才能进行内联替换，因此，内联函数必须在程序中第一次调用此函数的语句出现之前定义。</p><h2 id="34-函数重载和默认参数"><a class="markdownIt-Anchor" href="#34-函数重载和默认参数"></a> 3.4 函数重载和默认参数</h2><p>函数重载可以使一个函数名具有多种功能，即具有“多种形态”，这种特性称为多态性。</p><p>C++的多态性又被直观地称为“一个名字，多个函数”。源代码只指明函数调用，而不说明具体调用哪个函数。编译器的这种连接方式称为动态联编或迟后联编。在动态联编中，直到程序运行才能确定调用哪个函数（动态联编需要虚函数的支持）。如果编译器在编译时，能根据源代码调用固定的函数标识符，并用物理地址代替它们，这就称为静态联编或先期联编。静态联编是在程序被编译时进行的。</p><p>使用默认参数，就不能对少于参数个数的函数进行重载。另外，仅有函数返回值不同也是区分不了重载函数的。当使用默认参数设计类的构造函数时，要特别注意这一问题。</p><h2 id="35-函数模板"><a class="markdownIt-Anchor" href="#35-函数模板"></a> 3.5 函数模板</h2><p>1.引入函数模版</p><p>由于函数在设计时没有使用实际的类型，而是使用虚拟的类型参数，故其灵活性得到加强。当用实际的类型来实例化这种函数时，就好像按照模版来制造新的函数一样，所以称这种函数为函数模板。将函数模版与某个具体数据类型连用，就产生了模板函数，又称这个过程为函数模板实例化，这种形式就是类型参数化。</p><p>2.函数模板的参数</p><p>对于一个默认调用，能从函数参数推断出模板参数的能力是其中最关键的一环。要想省去显式调用的麻烦，条件是由这个调用的函数参数表能够惟一地标识出模板参数的一个集合。</p><p>3.使用显式规则和关键字typename</p><p>C++专门定义一个仅仅用在模板中的关键字typename，它的用途之一是代替template参数列表中的关键字class。</p><h1 id="第4章-类和对象"><a class="markdownIt-Anchor" href="#第4章-类和对象"></a> 第4章 类和对象</h1><h2 id="41-类及其实例化"><a class="markdownIt-Anchor" href="#41-类及其实例化"></a> 4.1 类及其实例化</h2><p>对象就是一类物体的实例，将一组对象的共同特征抽象出来，从而形成“类”的概念。</p><p>4.1.1 定义类</p><p>像C语言构造结构一样，类也是一种用户自己构造的数据类型并遵循C++的规定。</p><p>类要先声明后使用，不管声明内容是否相同，声明同一个名字的两个类是错误的，类是具有惟一标识符的实体；在类中声明的任何成员不能使用extern、auto和register关键字进行修饰；类中声明的变量属于该类，在某些情况下，变量也可以被该类的不同实例所共享。</p><p>类和其他数据类型不同的是，组成这种类型的不仅可以有数据，而且可以有对数据进行操作的函数，他们分别叫做类的数据成员和类的成员函数，而且不能在类声明中对数据成员使用表达式进行初始化。</p><p>1.类声明</p><p>类声明以关键字class开始，其后跟类名。类所声明的内容用花括号括起来，右花括号后的分号作为类关键字声明语句的结束标志。这一对花括号之间的内容称为类体；</p><p>访问权限用于控制对象的某个成员在程序中的可访问性，如果没有使用关键字，则所有成员默认声明为private权限。</p><p>2.定义成员函数</p><p>类中声明的成员函数用来对数据成员进行操作，还必须在程序中实现这些成员函数。</p><p>定义成员函数的一般形式如下：</p><p>返回类型 类名：：成员函数名（参数列表）</p><p>{</p><p>成员函数的函数体//内部实现</p><p>}</p><p>其中“：：”是作用域运算符，“类名”是成员函数所属类的名字，“：：”用于表名其后的成员函数是属于这个特定的类。换言之，“类名：：成员函数名”的意思就是对属于“类名”的成员函数进行定义，而“返回类型”则是这个成员函数返回值的类型。</p><p>也可以使用关键字inline将成员函数定义为内联函数。</p><p>如果在声明类的同时，在类体内给出成员函数的定义，则默认为内联函数。</p><p>3.数据成员的赋值</p><p>不能在类体内给数据成员赋值。在类体外就更不允许了。</p><p>数据成员的具体值是用来描述对象的属性的。只有产生了一个具体的对象，这些数据值才有意义。如果在产生对象时就使对象的数据成员具有指定值，则称为对象的初始化。</p><p>4.1.2 使用类的对象</p><p>对象和引用都使用运算符“.”访问对象的成员，指针则使用“- &gt;”运算符。</p><p>暂不涉及还没有介绍的保护成员，可以归纳出如下规律：</p><p>（1）类的成员函数可以直接使用自己类的私有成员（数据成员和成员函数）</p><p>（2）类外面的函数不能直接访问类的私有成员（数据成员和成员函数）</p><p>（3）类外面的函数只能通过类的对象使用该类的公有成员函数。</p><p>在程序运行时，通过为对象分配内存来创建对象。在创建对象时，使用类作为样板，故称对象为类的实例。</p><p>定义类对象指针的语法如下：</p><p>类名* 对象指针名；</p><p>对象指针名=对象的地址；</p><p>也可以直接进行初始化。</p><p>类名* 对象指针名=对象的地址；</p><p>类对象的指针可以通过“-&gt;”运算符访问对象的成员，即：</p><p>对象指针名-&gt;对象成员名</p><p>4.1.3 数据封装</p><p>面向对象的程序设计是通过为数据和代码建立分块的内存区域，以便提供对程序进行模块化的一种程序设计方法，这些模块可以被用做样板，在需要时在建立其副本。根据这个定义，对象是计算机内存中的一块区域，通过将内存分块，每个模块（即对象）在功能上保持相对独立。</p><p>对象被视为能做出动作的实体，对象使用这些动作完成相互之间的作用。换句话说，对象就像在宿主计算机上拥有数据和代码并能相互通信的具有特定功能的一台较小的计算机。</p><h2 id="42-构造函数"><a class="markdownIt-Anchor" href="#42-构造函数"></a> 4.2 构造函数</h2><p>C++有称为构造函数的特殊成员函数，它可自动进行对象的初始化。</p><p>初始化和赋值是不同的操作，当C++语言预先定义的初始化和赋值操作不能满足程序的要求时，程序员可以定义自己的初始化和赋值操作。</p><p>4.2.1 默认构造函数</p><p>当没有为一个类定义任何构造函数的情况下，C++编译器总要自动建立一个不带参数的构造函数。</p><p>4.2.2 定义构造函数</p><p>1.构造函数的定义和使用方法</p><p>构造函数的名字应与类名同名。并在定义构造函数时不能指定返回类型，即使void类型也不可以。</p><p>当声明一个外部对象时，外部对象只是引用在其他地方声明的对象，程序并不为外部对象说明调用构造函数。如果是全局对象，在main函数执行之前要调用它们的构造函数。</p><p>2.自动调用构造函数</p><p>程序员不能在程序中显式地调用构造函数，构造函数是自动调用的。例如构造一个Point类的对象a，不能写成“Point a.Point(x,y) ；”，只能写成“Point a(x,y) ；”。编译系统会自动调用Point(x,y)产生对象a并使用x和y将其正确地初始化。</p><p>可以设计多个构造函数，编译系统根据对象产生的方法调用相应的构造函数，构造函数是在产生对象的同时初始化对象的。</p><p>4.2.3 构造函数和预算符new</p><p>运算符new用于建立生存期可控的对象，new返回这个对象的指针。由于类名被视为一个类型名，因此，使用new建立动态对象的语法和建立动态变量的语法类似，其不同点是new和构造函数一起使用。</p><p>使用new建立的动态对象只能用delete删除，以便释放所占空间。应养成及时释放不再使用的内存空间的习惯。</p><p>4.2.4 构造函数的默认参数</p><p>如果程序定义自己的有参数构造函数，又想使用无参数形式的构造函数，解决的方法时间相应的构造函数全部使用默认的参数设计。</p><p>4.2.5 复制构造函数</p><p>引用在类中一个很重要的用途是用在复制构造函数中。一是一类特殊而且重要的函数，通常用于使用已有的对象来建立一个新对象。</p><p>在通常情况下，编译器建立一个默认复制构造函数，默认复制构造函数采用拷贝方式使用已有的对象来建立新对象，所以又直译为拷贝构造函数。程序员可以自己定义复制构造函数，对类A而言，复制构造函数的原型如下：</p><p>A::A(A&amp;)</p><p>从这个函数原型来看，首先它是一个构造函数，因为这毕竟是在创造一个新对象。其次，他的参数有些特别，是引用类自己的对象，即用一个已有的对象来建立新对象。使用引用是从程序的执行效率角度考虑的。为了不改变原有对象，更普通的形式是像下面这样使用const限定：</p><p>A::A(const A &amp;)</p><p>像调用构造函数一样，如果自定义了复制构造函数，编译器只调用程序员为它设计的赋值构造函数。</p><p>在C++中，在一个类中定义的成员函数可以访问该类任何对象的私有成员。</p><h2 id="43-析构函数"><a class="markdownIt-Anchor" href="#43-析构函数"></a> 4.3 析构函数</h2><p>在对象消失时，应使用析构函数释放由构造函数分配的内存。构造函数、赋值构造函数和析构函数是构造型成员函数的基本成员，应深刻理解他们的作用并熟练掌握其设计方法。</p><p>4.3.1 定义析构函数</p><p>因为调用析构函数也是由编译器来完成的，所以编译器必须总能知道应调用哪个函数。最容易、也最符合逻辑的方法是指定这个函数的名称与类名一样。为了与析构函数区分，在析构函数的前面加上一个“<sub>”号（仍然称析构函数与类同名）。在定义析构函数时，不能指定任何返回类型，即使指定void类型返回类型也不行。析构函数也不能指定参数，但是可以显示地说明参数为void，即形如A：：</sub>A（void）。从函数重载的角度分析，一个类也只能定义一个析构函数且不能指明参数，以便编译系统自动调用。</p><p>析构函数在对象的生存期结束时被自动调用。当对象的生存期结束时，程序为这个对象调用析构函数，然后回收这个对象占用的内存。全局对象和静态对象的析构函数在程序运行结束之前调用。</p><p>类的对象数组的每个元素调用一次析构函数。全局对象数组的析构函数在程序结束之前被调用。</p><p>4.3.2 析构函数与运算符delete</p><p>运算符delete与析构函数一起工作。当使用运算符delete删除一个动态对象时，他首先为这个动态对象调用析构函数，然后再释放这个动态对象占用的内存，这和使用new建立动态对象的过程正好相反。</p><p>当使用delete释放动态对象数组时，必须告诉这个动态对象数组有几个元素对象，C++使用“[ ]”来实现。即语句</p><p>delete[ ] ptr ; //注意不要写错为delete ptr[]</p><p>当程序先后创建几个对象时，系统按后建先析构的原则析构对象。当使用delete调用析构函数时，则按delete的顺序析构。</p><p>4.3.3 默认析构函数</p><p>如果在定义类时没有定义析构函数，C++编译器也为它产生一个函数体为空的默认析构函数。</p><h2 id="44-调用复制构造函数的综合实例"><a class="markdownIt-Anchor" href="#44-调用复制构造函数的综合实例"></a> 4.4 调用复制构造函数的综合实例</h2><h2 id="45-成员函数重载及默认参数"><a class="markdownIt-Anchor" href="#45-成员函数重载及默认参数"></a> 4.5 成员函数重载及默认参数</h2><h2 id="46-this指针"><a class="markdownIt-Anchor" href="#46-this指针"></a> 4.6 this指针</h2><p>使用this指针，保证了每个对象可以拥有自己的数据成员，但处理这些数据成员的代码可以被所有的对象共享。</p><p>C<ins>规定，当一个成员函数被调用是，系统自动向它传递一个隐含的参数，该参数是一个指向调用该函数的对象的指针，从而使成员函数知道该对哪个对象进行操作。在程序中，可以使用关键字this来引用该指针。this指针是C</ins>实现封装的一种机制，它将对象和该对象调用的成员函数连接在一起，在外部看来，每一个对象都拥有自己的成员函数。</p><p>除非有特殊需要，一般情况下都省略符号“this -&gt;”，而让系统进行默认设置。</p><h2 id="47-一个类的对象作为另一个类的成员"><a class="markdownIt-Anchor" href="#47-一个类的对象作为另一个类的成员"></a> 4.7 一个类的对象作为另一个类的成员</h2><h2 id="48-类和对象的性质"><a class="markdownIt-Anchor" href="#48-类和对象的性质"></a> 4.8 类和对象的性质</h2><p>4.8.1 对象的性质</p><p>（1）同一个类的对象之间可以相互赋值。</p><p>（2）可使用对象数组。</p><p>（3）可使用指向对象的指针，使用取地址运算符&amp;将一个对象的地址置于该指针中。</p><p>注意，指向对象的指针的算术运算规则与C语言的一样，但指向对象的指针不能取数据成员的地址，也不能去成员函数的地址。</p><p>（4）对象可以用作函数参数。</p><p>（5）对象作为函数参数时，可以使用对象、对象引用和对象指针。</p><p>（6）一个对象可以做为另一个类的成员。</p><p>4.8.2 类的性质</p><p>1.使用类的权限</p><p>为了简单具体，讨论数据成员为私有，成员函数为公有的情况。</p><p>（1）类本身的成员函数可以使用类的所有成员（私有和公有成员）。</p><p>（2）类的对象只能访问公有成员函数。</p><p>（3）其他函数不能使用类的私有成员，也不能使用公有成员函数，它们只能通过类的对象使用类的公有成员函数。</p><p>（4）虽然一个可以包含另外一个类的对象，但这个类也只能通过被包含类的对象使用那个类的成员函数，通过成员函数使用数据成员。</p><p>2.不完全的类声明</p><p>类不是内存中的物理实体，只有当使用类产生对象时，才进行内存分配，这种对象建立的过程称为实例化。</p><p>应当注意的是：类必须在其成员使用之前先进行声明。</p><p>class MembersOnly; //不完全的类声明</p><p>MenbersOnly *club; //定义一个全局变量类指针</p><p>第一条语句称为不完全类声明，它用于在类没有完全定义之前就引用该类的情况。</p><p>不完全声明的类不能实例化，否则会出现编译错误；不完全声明仅用于类和结构，企图存取没有完全声明的类成员，也会引起编译错误。</p><p>3.空类</p><p>尽管类的目的是封装代码和数据，它也可以不包括任何声明。</p><p>class Empty{};</p><p>4.类作用域</p><p>声明类时所使用的一对花括号形成所谓的类的作用域。在类作用域中声明的标识符只在类中可见。</p><p>如果该成员函数的实现是在类定义之外给出的，则类作用域也包含类中成员函数的作用域。</p><p>类中的一个成员名可以使用类名和作用域运算符来显式地指定，这称为成员名限定。</p><h2 id="49-面向对象的标记图"><a class="markdownIt-Anchor" href="#49-面向对象的标记图"></a> 4.9 面向对象的标记图</h2><p>4.9.1 类和对象的UML标记图</p><p>4.9.2 对象的结构与连接</p><p>只有定义和描述了对象之间的关系，各个对象才能构成一个整体的、有机的系统模型，这就是对象的结构和连结关系。对象结构是指对象之间的分类（继承）关系和组成（聚合）关系，统称为关联关系。对象之间的静态关系是通过对象属性之间的连接反映的，称为实例连接。对象行为之间的动态关系是通过对象行为（信息）之间的依赖关系表现的，称之为消息连接，实例连接和消息连接统称为连接。</p><p>1.分类关系及其表示</p><p>C++中的分类结构是继承（基类/派生类）结构，UML使用一个空三角形表示继承关系，三角形指向基类。</p><p>2.对象组成关系及其表示</p><p>组成关系说明的结构是整体与部分关系。C<ins>中最简单的是包含关系。C</ins>语言中的“聚合”隐含了两种实现方式，第一种方式是独立地定义，可以属于多个整体对象，并具有不同生存期。这种所属关系是可以动态变化的，称之为聚集。使用空心菱形表示它们之间的关系。第二种方式是用一个类的对象作为一种广义的数据类型来定义整体对象的一个属性，构成一个嵌套对象。在这种情况下，这个类的对象只能隶属于惟一的整体对象并与它同生同灭，称这种情况为“组合”，它们之间的关联关系比第一种强，具有管理组成部分的责任，使用实心菱形表示。</p><p>3.实例连接及其表示</p><p>实例连接反映对象之间的静态关系，例如车和驾驶员的关系，这种双边关系在实现中可以通过对象（实例）的属性表达出来。实例连接有一对一、一对多、多对多3种连接方式。</p><p>4.消息连接及其表示</p><p>消息连接描述对象之间的动态关系。即若一个对象在执行自己的操作时，需要通过消息请求另一个对象为它完成某种服务，则说第一个对象与第二个对象之间存在着消息连接。消息连接是有方向的，使用一条带箭头的实线表示，从消息的发送者指向消息的接收者。</p><p>4.9.3 使用实例</p><p>4.9.4 对象、类和消息</p><p>对象的属性是指描述对象的数据成员。数据成员可以是系统或程序员定义的数据类型。对象属性的集合称为对象的状态。</p><p>对象的行为是定义在对象属性上的一组操作的集合。操作（函数成员）是响应消息而完成的算法，表示对象内部实现的细节。对象的操作集合体现了对象的行为能力。</p><p>对象的属性和行为是对象定义的组成要素，分别代表了对象的静态和动态特征。由以上分析的例子可见，无论对象是简单的或是负责的，一般具有以下特征：</p><p>（1）有一个状态，由与其相关的属性集合所表征。</p><p>（2）有惟一标识名，可以区别于其他对象。</p><p>（3）有一组操作方法，每个操作决定对象的一种行为。</p><p>（4）对象的状态只能被自己的行为所改变。</p><p>（5）对象的操作包括自身操作（施加于自身）和施加于其他对象的操作。</p><p>（6）对象之间以消息传递的方式进行通信。</p><p>（7）一个对象的成员仍可以是一个对象。</p><h2 id="410-面向对象编程的文件规范"><a class="markdownIt-Anchor" href="#410-面向对象编程的文件规范"></a> 4.10 面向对象编程的文件规范</h2><p>一般要求将类的声明放在头文件中，非常简单的成员函数可以在声明中定义（默认内联函数形式），实现放在.cpp文件中。在.cpp文件中，将头文件包含进去。主程序单独使用一个文件，这就是多文件编程规范。</p><p>4.10.1 编译指令</p><p>C<ins>的源程序可包含各种编译指令，以指示编译器对源代码进行编译之前先对其进行预处理。所有的编译指令都以#开始，每条编译指令单独占用一行，同一行不能有其他编译指令和C</ins>语句（注释例外）。编译指令不是C<ins>的一部分，但扩展了C</ins>编程环境的使用范围，从而改善程序的组织和管理。</p><p>1.嵌入指令</p><p>嵌入指令#include指示编译器将一个源文件嵌入到带有#include指令的源文件中该指令所在的位置处。尖括号或双引号中的文件名可包含路径信息。例如：</p><p>#include&lt;\user\prog.h&gt;</p><p>注意：由于编译指令不是C++的一部分，因此，在这里表示反斜杠时只使用一个反斜杠。</p><p>2.宏定义</p><p>#define指令定义一个标识符及串，在源程序中每次遇到该标识符时，编译器均用定义的串代替之。该标识符称为宏名，而将替换过程称之为宏替换。#define指令用以进行宏定义，其一般形式如下：</p><p>#define 宏名 替换正文</p><p>“宏名”必须是一个有效的C++标识符，“替换正文”可为任意字符组成的字符序列。“宏名”和“替换正文”之间至少有一个空格。注意，宏定义由新行结束，而不以分号结束。如果给出了分号，则它也被视作为替换正文的一部分。当替换正文要书写在多行上时，除最后一行外，每行的行尾要加上一个反斜线，表示宏定义继续到下一行。</p><p>因宏定义有许多不安全因素，对需要使用无参数宏的场合，应该尽量使用const代替宏定义。</p><p>在程序的一个地方定义的宏名，如果不想使其影响到程序的其他地方，可以在不再使用时用#undef删除。</p><p>3.条件编译指令</p><p>条件编译指令是#if、#else、#elif和#endif，它们构成类似于C++的if选择结构，其中#endif表示一条指令结束。</p><p>编译指令#if用于控制编译器对源程序的某部分有选择地进行编译。该部分从#if开始，到#endif结束。如果#if后的常量表达式为真，则编译这部分，否则就不编译该部分，这时，这部分代码相当于被从源文件中删除。</p><p>编译指令#else在#if测试失效的情况下建立另外一种选择。可以在#else分支中使用编译指令#error输出出错信息。#error使用的形式如下：</p><p>#error 出错信息</p><p>“出错信息”是一个字符序列。当遇到#error指令时，编译器显示其后面的“出错信息”，并中止对程序的编译。</p><p>编译指令可嵌套，嵌套规则和编译器对其的处理方式与C++的if预计嵌套情况类似。</p><p>4.define操作符</p><p>关键字defined不是指令，而是一个预处理操作符，用于判断一个标识符是否已经被#define定义。如果标识符identifier已被#define定义，则defined（identifier）为真，否则为假。</p><p>条件编译指令#ifdef和#ifndef用于测试其后的标识符是否被#define定义，如果已经被定义，则#ifdef测试为真，#ifndef测试为假；如果没有被定义，则#ifdef测试为假，#ifndef测试为真。</p><p>4.10.2 在头文件中使用条件编译</p><h1 id="第五章-特殊函数和成员"><a class="markdownIt-Anchor" href="#第五章-特殊函数和成员"></a> 第五章 特殊函数和成员</h1><h2 id="51-对象成员的初始化"><a class="markdownIt-Anchor" href="#51-对象成员的初始化"></a> 5.1 对象成员的初始化</h2><p>可以在一个类中说明具有某个类的类型的数据成员，这些成员成为对象成员。在类A中说明对象成员的一般形式如下：</p><p>class A</p><p>{</p><p>类名1 成员名1;</p><p>类名2 成员名2;</p><p>……</p><p>类名n 成员名n;</p><p>};</p><p>说明对象成员是在类名之后给出对象成员的名字。为初始化对象成员，A类的构造函数要调用这些对象成员所在类的构造函数，A类的构造函数的定义形式如下：</p><p>A::A(参数表0)：成员1（参数表1），成员2（参数表2），成员n（参数表n）</p><p>{//其他操作}</p><p>冒号“：”后由逗号隔开的项目组成员初始化列表，其中的参数表给出了为调用相应成员所在类的构造函数时应提供的参数。参数列表中的参数都来自“参数表0”，可以使用任意复杂的表达式，其中可以有函数调用。如果初始化列表某项的参数表为空，则列表中相应的项可以省略。</p><p>对象成员构造函数的顺序取决于这些对象成员在类中说明的顺序，与他们在成员初始化列表中给出的顺序无关。析构函数的调用顺序与构造函数正好相反。</p><h2 id="52-静态成员"><a class="markdownIt-Anchor" href="#52-静态成员"></a> 5.2 静态成员</h2><p>简单成员函数是指声明中不含const、volatile、static关键字的函数。如果类的数据成员或成员函数使用关键字static进行修饰，这样的成员称为静态数据成员或静态成员函数，统称为静态成员。</p><p>静态数据成员只能说明一次，如果在类中仅对静态数据成员进行声明，则必须在文件作用域的某个地方进行定义。在进行初始化之前，必须进行成员名限定。</p><p>注意：由于static不是函数中的一部分，所以在类声明之外定义静态成员函数时，不使用static。在类中定义的静态成员函数是内联的。</p><p>类中的任何成员函数都可以访问静态成员。因为静态成员函数没有this指针，所以静态成员函数只能通过对象名（或指向对象的指针）访问该对象的非静态成员。</p><p>静态成员函数与一般函数有如下不同：</p><p>（1）可以不指向某个具体的对象，只与类名连用。</p><p>（2）在没有建立对象之前，静态成员就已经存在。</p><p>（3）静态成员是类的成员，不是对象的成员。</p><p>（4）静态成员为该类的所有对象共享，它们被存储于一个公用的内存中。</p><p>（5）没有this指针，所以除非显式地把指针传给它们，否则不能存取类的数据成员。</p><p>（6）静态成员函数不能说明为虚函数。</p><p>（7）静态成员函数不能直接访问非静态函数。</p><p>静态对象具有如下性质：</p><p>（1）构造函数在代码执行过程中，第一次遇到它的时候变量定义时被调用，但直到整个程序结束之前仅调用一次。</p><p>（2）析构函数在整个程序退出之前被调用，同样也只调用一次。</p><h2 id="53-友元函数"><a class="markdownIt-Anchor" href="#53-友元函数"></a> 5.3 友元函数</h2><p>有时两个概念上相近的类要求其中一个类可以无限制地存取另一个类的成员。</p><p>友元函数解决了这类难题。友元函数可以存取私有成员、公有成员和保护成员。其实，友元函数可以是一个类或函数，尚未定义的类也可以作为友元引用。</p><p>1.类本身的友元函数</p><p>为本类声明一个友元函数，这时，虽然在类中说明它，但它并不是类的成员函数，所以可以在类外面像普通函数那样定义这个函数。</p><p>虽然友元函数是在类中说明的，但函数的定义一般在类之外，作用域的开始点在它的说明点，结束点和类的作用域相同。</p><p>友元说明可以出现于类的私有或公有部分。因为友元说明也必须出现于类中，所以应将友元看作类的接口的一部分。使用它的主要目的是提高程序效率。友元函数可以直接访问类对象的私有程序，因而省去调用类成员函数的开销。它的另一个优点是：类的设计者不必在考虑号该类的各种可能使用情况之后再设计这个类，而可以根据需要，通过使用友元增加类的接口。但使用友元的主要问题是：它允许友元函数访问对象的私有成员，这破坏了封装和数据隐藏，导致程序的可维护性变差，因此在使用友元时必须权衡得失。</p><p>注意：友元函数可以在类中声明时定义。如果在类外定义，不能再使用friend关键字。</p><p>2.将成员函数用作友元</p><p>一个类的成员函数（包括构造函数和析构函数）可以通过使用friend说明为另一个类的友元。</p><p>3.将一个类说明为另一个类的友元</p><p>可以将一个类说明为另一个类的友元。这时，整个类的成员函数均具有友元函数的性能。声明友元关系简化为“friend class 类名；”</p><p>需要注意的是，友元关系是不传递的，即当说明类A是类B的友元，类B又是类C的友元时，类A却不是类C的友元。这种友元关系也不具有交换性，即当说明类A是类B的友元时，类B不一定是类A的友元。</p><p>当一个类要和另一个类协同工作时，使一个类称为另一个类的友元是很有用的。</p><p>友元声明与访问控制无关。友元声明在私有区域进行或在公有区域进行是没有太大区别的。虽然友元函数的声明可以置于任何部分，但通常置于能强调其功能的地方以使其直观。对友元函数声明的惟一限制是该函数必须出现在类声明内的某一部分。</p><h2 id="54-const对象"><a class="markdownIt-Anchor" href="#54-const对象"></a> 5.4 const对象</h2><p>可以在类中使用const关键字定义数据成员和成员函数或修饰一个对象。一个const对象只能访问const成员函数，否则将产生编译错误。</p><p>1.常量成员</p><p>常量成员包括常量数据成员、静态常数据成员和常引用。静态常数据成员仍保留静态成员特征，需要在类外初始化。常数据成员和常引用只能通过初始化列表来获得初值。</p><p>2.常引用作为函数参数</p><p>使用引用作为参数，传送的是地址。但有时仅希望将参数的值提供给函数使用，并不允许函数改变对象的值，这时可以使用常引用作为参数。</p><p>3.常对象</p><p>在对象名前使用const声明常量对象，但声明时必须同时进行初始化，而且不能被更新。定义的语法如下：</p><p>类名 const 对象名（参数表）；</p><p>4.常成员函数</p><p>可以声明一个成员函数为const函数。一个const对象可以调用const函数，但不能调用非const成员函数。const放在函数声明之前意味着返回值是常量，但这不符合语法。必须将关键字const放在参数列表之后，才能说明该函数是一个const成员函数。声明常成员函数的格式如下：</p><p>类型标识符 函数名（参数列表） const;</p><p>为了保证不仅声明const成员函数，而且确实也定义为const函数，程序员在定义函数时必须重申const声明。也就是说，const已经成为这种成员函数识别符的一部分，编译器和连接程序都要检查const。定义格式如下：</p><p>类型标识符 类名::函数名（参数列表）const{//函数体}</p><p>const位于函数参数表之后，函数体之前。也可以在类中用内联函数定义const函数。</p><p>类型标识符 函数名（参数列表）const{//函数体}</p><p>在定义成员函数时，函数体之前加上const可以防止覆盖函数改变数据成员的值。</p><p>在常成员函数里，不能更新对象的数据成员，也不能调用该类中没有用const修饰的成员函数。如果将一个对象说明为常对象，则通过该对象只能调用它的const成员函数，不能调用其他成员函数。</p><p>注意：用const声明static成员函数没有什么作用。在C<ins>中声明构造函数和析构函数时使用const关键字均是非法的，但有些C</ins>的编译程序并不给出出错信息。volatile关键字的使用方法与const类似，但因其很少用，此处不介绍。</p><h2 id="55-数组和类"><a class="markdownIt-Anchor" href="#55-数组和类"></a> 5.5 数组和类</h2><p>编译器调用适当的构造函数建立数组的每一个分量。如果找不到合适的构造函数，则产生错误信息。</p><h2 id="56-指向类成员函数的指针"><a class="markdownIt-Anchor" href="#56-指向类成员函数的指针"></a> 5.6 指向类成员函数的指针</h2><p>对象是一个完整的实体。为了支持这一封装，C++包含了指向类成员的指针。可以用普通指针访问内存中给定类型的任何对象，指向类成员的指针则用来访问某个特定类的对象中给定类型的任何成员。</p><p>C++既包含指向类数据成员函数的指针，又包含指向成员函数的指针。他提供一种特殊的指针类型，指针指向类的成员，而不是指向该类的一个对象中该成员的一个实例，这种指针称为指向类成员的指针。不过，指向类数据成员的指针要求数据成员是公有的，用途不大，所以不予介绍，仅简单介绍指向类成员函数的指针。</p><p>类并不是对象，但有时可将其视为对象来使用。可以声明并使用指向对象成员函数的指针。指向对象的指针是比较传统的指针，假设类A的成员函数为“void fa(void)；”，如要建立一个指针pafn，它可以指向任何无参数和无返回值的类A的成员函数：</p><p>void（A:😗 pafn）(void)；</p><p>虽然“::”是作用域分辨符，但在这种情况下，“A::”最好读成“A的成员函数”，这时，从内往外看，此声明可读作：pafn是一个指针，指向类A的成员函数，此成员函数既无参数，也无返回值。下面的例子说明了pafn如何被赋值并用以调用函数fa：</p><p>pafn=A::fa; //指向类A的成员函数fa的指针pafn</p><p>a x; //类A的对象x</p><p>A *px=&amp;x; //指向类A对象x的指针px</p><p>(x.*pafn)(); //调用类A的对象x的成员函数fa</p><p>(px-&gt;pafn)(); //调用类A的对象x的指针px指向的成员函数fa</p><p>指向类A中参数类型列表为list，返回类型为type的成员函数的指针声明形式如下：</p><p>type（A:😗 pointer）（list）；</p><p>如果类A的成员函数fun的原型与pointer所指向的函数的原型一样，则语句</p><p>pointer=A::fun;</p><p>将该函数的地址（这个地址不是真实地址，而是在A类中所有对象的便宜）置给了pointer。在使用指向类成员函数的指针访问对象的某个成员函数时，必须指定一个对象。用对象名或引用调用pointer所指向的函数时，使用运算符“.<em>”，使用指向对象的指针调用pointer所指向的成员函数时，使用运算符“-&gt;</em>”。</p><h2 id="57-求解一元二次方程"><a class="markdownIt-Anchor" href="#57-求解一元二次方程"></a> 5.7 求解一元二次方程</h2><h1 id="第六章-继承和派生"><a class="markdownIt-Anchor" href="#第六章-继承和派生"></a> 第六章 继承和派生</h1><h2 id="61-继承和派生的基本概念"><a class="markdownIt-Anchor" href="#61-继承和派生的基本概念"></a> 6.1 继承和派生的基本概念</h2><p>这种通过特殊化已有的类来建立新类的过程，叫做“类的派生”，原来的类叫做“基类”，新建立的类则叫做“派生类”。另一方面，从类的成员角度看，派生类自动地将基类的所有成员作为自己的成员，这叫做“继承”。基类和派生类又可以分别叫做“父类”和“子类”，有时也称为“一般类”和“特殊类”。</p><p>从一个或多个以前定义的类（基类）产生新类的过程称为派生，这个新类称为派生类。派生的新类同时也可以增加或者重新定义数据和操作，这就产生了类的层次性。</p><p>类的继承是指派生类继承基类的数据成员和成员函数。继承常用来表示类属关系，不能将继承理解为构成关系。</p><p>当从现有的类中派生出新类时，派生类可以有以下几种变化：</p><p>（1）增加新的成员（数据成员或成员函数）</p><p>（2）重新定义已有的成员函数</p><p>（3）改变基类成员的访问权限</p><p>C++派生类使用两种基本的面向对象技术：第一种称为性质约束，即对基类的性质加以限制；第二种称为性质扩展，即增加派生类的性质。</p><p>C++中有两种继承：单一继承和多重继承。对于单一继承，派生类只能有一个基类；对于多重继承，派生类可以有多个基类。</p><h2 id="62-单一继承"><a class="markdownIt-Anchor" href="#62-单一继承"></a> 6.2 单一继承</h2><p>6.2.1 单一继承的一般形式</p><p>在C++，声明单一继承的一般形式如下：</p><p>class 派生类名:访问控制 基类名{</p><p>private:</p><p>成员声明列表</p><p>protected:</p><p>成员声明列表</p><p>public:</p><p>成员声明列表</p><p>};</p><p>这里和一般的类声明一样，用关键字class声明一个新的类。冒号后面的部分指示这个新类是哪个基类的派生类。所谓“访问控制”是指如何控制基类成员在派生类中的访问属性。它是3个关键字public、private、protected中的一个。一对大括号“{}”是用来声明派生类自己的成员的。</p><p>6.2.2 派生类的构造函数和析构函数</p><p>定义派生类的构造函数的一般形式如下：</p><p>派生类名::派生类名（参数表0） : 基类名（参数表）</p><p>{…//函数体}</p><p>冒号后“基类名（参数表）”称为成员初始化列表，参数表给出所调用的基类构造函数所需要的实参。实参的值可以来自“参数表0”，或由表达式给出。</p><p>构造函数（包括析构函数）是不被继承的，所以一个派生类只能调用它的直接基类的构造函数。当定义派生类的一个对象时，首先调用基类的构造函数，对基类成员进行初始化，然后执行派生类的构造函数，如果某个基类仍是一个派生类，则这个过程递归执行。该对象消失时，析构函数的执行顺序和执行构造函数的顺序正好相反。</p><p>6.2.3 类的保护成员</p><p>C++语言规定，使用公有方式产生的派生类成员函数可以直接访问基类中定义的或从另一个基类继承来的公有成员，但不能访问基类的私有成员。</p><p>在类的声明中，关键字protected之后声明的是类的保护成员。保护成员具有私有成员和公有成员的双重角色；对派生类的成员函数而言，它是公有成员，可以被访问；而对其他函数而言则仍是私有成员，不能被访问。</p><p>6.2.4 访问权限和赋值兼容规则</p><p>1.公有派生和赋值兼容规则</p><p>在公有派生的情况下，基类成员的访问权限在派生类中保持不变。这就意味着：</p><p>（1）基类的公有成员在派生类中依然是公有的。</p><p>（2）基类的保护成员在派生类中依然是保护的。</p><p>（3）基类的不可访问的和私有的成员在派生类中也仍然时不可访问的。</p><p>当希望类的某些成员能够被派生类所访问，而又不能被其他的外界函数访问的时候，就应当把它们定义为保护的。</p><p>所谓赋值兼容规则是指在公有派生情况下，一个派生类的对象可以作为基类的对象来使用的情况。</p><p>注意：静态成员可以被继承，这时基类对象和派生类的对象共享该静态成员。</p><p>2.“isa”和“has-a”的区别</p><p>类与类之间的关系有两大类：一是继承和派生问题，二是一个类使用另一个类的问题。后者的简单用途是把另一个类的对象作为自己的数据成员或者成员函数的参数。</p><p>对于继承，首先要掌握公有继承的赋值兼容规则，理解公有继承“就是一个（isa）”的含义。</p><p>分层也可以叫做包含、嵌入或者聚合。公有继承的意思是“isa”。与此相反，分层的意思是指“has-a(有一个)”。</p><p>3.公有继承存取权限表</p><p>注意：静态成员可以被继承，这时，基类对象和派生类的对象共享该静态成员。</p><p>4.私有派生</p><p>通过私有派生，基类的私有和不可访问成员在派生类中是不可访问的，而公有和保护成员这时就成了派生类的私有成员，派生类的对象不能访问继承的基类成员，必须定义公有的成员函数作为接口。更重要的是，虽然派生类的成员函数可通过定义自定义的函数访问基类的成员，但将派生类作为基类在继续派生时，这时即使使用公有派生，原基类公有成员在新的派生类中也将是不可访问的。</p><p>5.保护派生</p><p>派生也可以使用protected。这种派生使原来的权限都降一级使用，即private变为不可访问；protected变为private；public变为protected。因为限制了数据成员和成员函数的访问权限，所以用的比较少。它与private继承的主要区别在于下一级的派生中。</p><h2 id="63-多重继承"><a class="markdownIt-Anchor" href="#63-多重继承"></a> 6.3 多重继承</h2><p>一个类从多个基类派生的一般形式如下：</p><p>class 类名1：访问控制 类名2，访问控制 类名3,…,访问控制 类名n</p><p>{…//定义派生类自己的成员};</p><h2 id="64-二义性及其支配规则"><a class="markdownIt-Anchor" href="#64-二义性及其支配规则"></a> 6.4 二义性及其支配规则</h2><p>对基类成员的访问必须是无二义性的，如使用一个表达式的含义能解释为可访问多个基类中的成员，则这种对基类成员的访问就是不确定的，称这种访问具有二义性。</p><p>6.4.1 作用域分辨符和成员名限定</p><p>从类中派生其他类可能导致几个类使用同一个成员函数名或数据成员名。程序必须确切地告诉编译器使用哪个版本的数据成员或成员函数。</p><p>如果基类中的名字在派生类中再次声明，则派生类中的名字隐藏了基类中的相应名字。C++可以迫使编译器“看到”当前作用域的外层部分，存取那些被隐藏的名字，这是由作用域分辨运算符“::”实现的（简称作用域运算符）。这一过程叫做作用域分辨。作用域分辨操作的一般形式如下：</p><p>类名::标识符</p><p>“类名”可以是任意基类或派生类名，“类标识符”是该类中声明的任一成员名。</p><p>6.4.2 派生类支配基类的同名函数</p><p>基类的成员和派生类新增的成员都具有类作用域，基类在外层，派生类在内层。如果这时派生类定义了一个和基类成员函数同名的新成员函数（因为参数不同属于重载，所以这里是指具有相同参数表的成员函数），派生类的新成员函数就覆盖了外层的同名成员函数。在这种情况下，直接使用成员函数名只能访问派生类的成员函数，只有使用作用域分辨，才能访问基类的同名成员函数。</p><p>派生类D中的名字N支配基类B中同名的名字N，称为名字支配规则。</p><h1 id="第七章-类模板与向量"><a class="markdownIt-Anchor" href="#第七章-类模板与向量"></a> 第七章 类模板与向量</h1><h2 id="71-类模板"><a class="markdownIt-Anchor" href="#71-类模板"></a> 7.1 类模板</h2><p>如果将类看作包含某些数据类型的框架，然后将这些数据类型从类中分离出来形成一个通用的数据类型T，为这个数据类型T设计一个操作集，并且允许原来那些数据类型的类都能使用这个操作集，这将避免因为类的数据类型不同而产生的重复性设计，其实，类型T并不是类，而是对类的描述，常称之为类模板。在编译时，由编译器将类模板与某种特定数据类型联系起来，就产生一个特定的类（模板类）。利用类模板能大大简化程序设计。</p><p>7.1.1 类模板基础知识</p><p>1.类模板的成分及语法</p><p>关键字class在这里的含义是“任意内部类型或用户定义类型”，但T也可能是结构或类。</p><p>对于函数模版及类模板来说，模板层次结构的大部分内容都是一样的，然而在模板声明之后，对类而言便显示出了根本性的差异。为了窗机类模板，在类模板参数表之后应该有类声明。在类中可以像使用其他类型（如int或double）那样使用模板参数。</p><p>类模板声明的一般方法如下：</p><p>template &lt;类模板参数&gt; class 类名{//类体}；</p><p>2.类模板的对象</p><p>类模板也称为参数化类。初始化类模板时，只要传给它指定的数据类型，编译器就用指定类型替代模板参数产生相应的模板类。</p><p>用类模板定义对象的一般格式如下：</p><p>类名&lt;模板实例化参数类型&gt; 对象名（构造函数实参列表）；</p><p>类名&lt;模板实例化参数类型&gt; 对象名；//默认或者无参数构造函数</p><p>使用模板类时，当给模板实例化参数类型一个指定的数据类型时，编译器自动用这个指定数据类型替代模板参数。</p><p>在类体外面定义成员函数时，必须用template重写类模板声明。一般格式如下：</p><p>template &lt;模板参数&gt;</p><p>返回类型 类名&lt;模板类型参数&gt;::成员函数名(函数参数列表){//函数体}</p><p>&lt;模板类型参数&gt; 是指template的“&lt; &gt;”内使用class（或typename）声明的类型参数，构造函数和析构函数没有返回类型。</p><p>模板实例化参数类型包括数据类型和值。编译器不能从构造函数参数列表推断出模板实例化参数类型，所以必须显式地给出对象的参数类型。</p><p>7.1.2 类模板的派生与继承</p><p>类模板也可以继承，继承的方法与普通的类一样。声明模板类继承之前，必须重新声明类模板。模板类的基类和派生类都可以是模板（或非模板）类。类模板的派生与继承很复杂，本书仅简单介绍模板类继承非模板类和从模板类派生一个类模板两种情况。</p><p>可以用一个非模板类为一组模板提供一种共同的实现方法。</p><h2 id="72-向量与泛型算法"><a class="markdownIt-Anchor" href="#72-向量与泛型算法"></a> 7.2 向量与泛型算法</h2><p>在数组生存期内，数组的大小是不会改变的。向量是一维数组的类版本，它与数组相似，其中的元素项总是连续存储的，但它和数组不同的是：向量中存储元素的多少可以在运行中根据需要动态地增长或缩小。向量是类模板，具有成员函数。</p><p>7.2.1 定义向量列表</p><p>向量（vector）类模板定义在头文件vector中，它提供4种构造函数，用来定义由各元素组成的列表。用length表示长度，数据类型用type表示，对象名为name。</p><p>向量定义的赋值运算符“=”，允许同类型的向量列表相互赋值，而不管它们的长度如何。向量可以改变赋值目标的大小，使它的元素数目与赋值源的元素数目相同。</p><p>向量的第一个元素也是从0开始。</p><p>不能使用列表初始化向量，但可以先初始化一个数组，然后把数组的内容复制给向量。</p><p>7.2.2 泛型指针</p><p>“与操作对象的数据类型相互独立”的算法称为泛型算法。也就是说，泛型算法提供了许多可用于向量的操作行为，而这些算法和想要操作的元素类型无关。这是借助一对泛型指针来实现的。向量具有指示第一元素的标记begin和指示结束的标记end，也就是标识要进行操作的元素空间。如果begin不等于end，算法便会首先作用于begin所指元素，并将begin前进一个位置，然后作用于当前begin所指元素，如此继续进行，直到begin等于end为止。因为end是最后一个元素的下一个位置，所以元素存在的范围是半开区间[begin，end)。</p><p>在向量中，泛型指针是在底层指针的行为之上提供一层抽象化机制，取代程序原来的“指针直接操作方式”。假设用T表示向量的参数化数据类型，iterator在STL里面是一种通用指针，它在向量中的作用相当于T*。用iterator声明向量的正向泛型指针的一般形式如下：</p><p>vector<type> :: iterator泛型指针名；</p><p>对向量的访问可以是双向的，图中的rbegin和rend是提供给逆向泛型指针的开始和结束标志。逆向泛型指针的加操作是使它向rend方向移动，减操作向rbegin移动。声明逆向泛型指针使用reverse_iterator。声明的方法如下：</p><p>vector&lt;数据类型&gt; :: reverse_iterator 指针名；</p><p>7.2.3 向量的数据类型</p><p>向量除了可以使用基本数据类型之外，还可以使用构造类型，只要符合构成法则即可。</p><p>7.2.4 向量最基本的操作方法</p><p>1.访问向量容量信息的方法</p><p>（1）size()：返回当前向量中已经存放的对象的个数</p><p>（2）max_size()：返回向量可以容纳最多对象的个数，一般是操作系统的寻址空间所需容纳的对象的个数。这个参数不是用户指定的，它取决于硬件结构。</p><p>（3）capacity()：返回无需再次分配内存就能容纳的对象个数。它的初始值为程序员最初申请的元素个数。当存放空间已满，又增加一个元素时，它在原来的基础上自动翻倍扩充空间，以便存放更多的元素。通俗地讲，也就是已申请的空间。这三者的关系如下。</p><p>（4）empty()：当前向量为空时，返回true。</p><p>2.访问向量中对象的方法</p><p>（1）front()：返回向量中的第一个对象。</p><p>（2）back()：返回向量中的最后一个对象。</p><p>（3）operator<a href="size_type,n"></a>：返回向量中的第n+1个对象（下标为n的向量元素）。</p><p>3.在向量中插入对象的方法</p><p>（1）push_back(const T&amp;)：向向量尾部插入一个对象。</p><p>（2）insert(iterator it,const T&amp;)：向it所指向的向量位置前插入一个对象。</p><p>（3）insert(iterator it,size_type n,const T&amp;X)：向it所指向量位置前插入n个值为X的对象。</p><p>4.在向量中删除对象的方法</p><p>（1）pop_back(const T&amp;)：删除向量中最后一个对象。</p><p>（2）erase（iterator it）：删除it所指向的容器对象。</p><p>（3）clear()：删除向量中的所有对象，empty()返回true。</p><h2 id="73-出圈游戏"><a class="markdownIt-Anchor" href="#73-出圈游戏"></a> 7.3 出圈游戏</h2><h1 id="第八章-多态性和虚函数"><a class="markdownIt-Anchor" href="#第八章-多态性和虚函数"></a> 第八章 多态性和虚函数</h1><h2 id="81-多态性"><a class="markdownIt-Anchor" href="#81-多态性"></a> 8.1 多态性</h2><p>静态联编所支持的多态性称为编译时的多态性。当调用重载函数时，编译器可以根据调用时使用的实参在编译时就确定下来应调用哪个函数。动态联编所支持的多态性称为运行时的多态性，这由虚函数来支持。虚函数类似于重载函数，但与重载函数的实现策略不同，即对虚函数的调用使用动态联编。</p><p>8.1.1 静态联编中的赋值兼容性及名字支配规律</p><p>对象的内存地址空间中只包含数据成员，并不存储有关成员函数的信息。这些成员函数的地址翻译过程与其对象的内存地址无关。</p><p>声明的基类指针只能指向基类，派生类指针只能指向派生。它们的原始类型决定它们只能调用各种的同名函数area。</p><p>8.1.2 动态联编的多态性</p><p>当编译系统编译含有虚函数的类时，将为它建立一个虚函数表，表中的每一个元素都指向一个虚函数的地址。此外，编译器也为类增加一个数据成员，这个数据成员是一个指向该虚函数表的指针，通常称为vptr。</p><p>虚函数的地址翻译取决于对象的内存地址。编译器为含有虚函数类的对象首先建立一个入口地址，这个地址用来存放指向虚函数表的指针vptr，然后按照类中虚函数的声明次序，一一填入函数指针。当调用虚函数时，先通过vptr找到虚函数表，然后再找出虚函数的真正地址。</p><p>派生类能继承基类的虚函数表，而且只要是和基类同名（参数也相同）的成员函数，无论是否使用virtual声明，它们都自动称为虚函数。如果派生类没有改写继承基类的虚函数，则函数指针调用基类的虚函数。如果派生类改写了基类的虚函数，编译器将重新为派生类的虚函数建立地址，函数指针会调用改写过的虚函数。</p><p>虚函数的调用规则是：根据当前对象，优先调用对象本身的成员函数。这和名字支配规律类似，不过虚函数是动态联编的，是在执行期“间接”调用实际上欲联编的函数。</p><h2 id="82-虚函数"><a class="markdownIt-Anchor" href="#82-虚函数"></a> 8.2 虚函数</h2><p>一旦基类定义了虚函数，该基类的派生类中的同名函数也自动称为虚函数。</p><p>8.2.1 虚函数的定义</p><p>虚函数只能是类中的一个成员函数，但不能是静态成员，关键字virtual用于类中该函数的声明中。</p><p>当在派生类中定义了一个同名的成员函数时，只要该成员函数的参数个数和相应类型以及它的返回类型与基类中同名的虚函数完全一样，则无论是否为该成员使用virtual，它都将成为一个虚函数。</p><p>8.2.2 虚函数实现动态性的条件</p><p>关键字virtual指示C<ins>编译器对调用虚函数进行动态联编。这种多态性是程序运行到需要的语句处才动态确定的，所以称为运行时的多态性。不过，使用虚函数并不一定产生多态性，也不一定使用动态联编。例如，在调用中对虚函数使用成员名限定，可以强制C</ins>对该函数的调用使用静态联编。</p><p>产生运行时的多态性有如下3个前提：</p><p>（1）类之间的继承关系满足赋值兼容性规则。</p><p>（2）改写了同名函数。</p><p>（3）根据赋值兼容性规则使用指针（或引用）。</p><p>由于动态联编是在运行时进行的，相对于静态联编，它的运行效率比较低，但它可以使程序员对程序进行高度抽象，设计出可扩充性好的程序。</p><p>8.2.3 构造函数和析构函数调用虚函数</p><p>在构造函数和析构函数中调用虚函数采用静态联编，即他们所调用的虚函数是自己的类或基类中定义的函数，但不是任何在派生类中重定义的虚函数。</p><p>目前推荐的C++标准不支持虚构造函数。由于析构函数不允许有参数，因此一个类只能有一个虚析构函数。虚析构函数使用virtual说明。只要基类的析构函数被说明为虚函数，则派生类的析构函数，无论是否使用virtual进行说明，都自动地成为虚函数。</p><p>delete运算符和析构函数一起工作（new和构造函数一起工作），当使用delete删除一个对象时，delete隐含着对析构函数的一次调用，如果析构函数为虚函数，则这个调用采用动态联编。一般来说，如果一个类中定义了虚函数，析构函数也应说明为虚函数，尤其是在析构函数要完成一些有意义的任务时，例如，释放内存。</p><p>如果基类的析构函数为虚函数，则在派生类为定义析构函数时，编译器所生成的析构函数也为虚函数。</p><p>8.2.4 纯虚函数与抽象类</p><p>在许多情况下，不能再基类中为虚函数给出一个有意义的定义，这时可以将它说明为纯虚函数，将其定义留给派生类去做。说明纯虚函数的一般形式如下：</p><p>class 类名{</p><p>virtual 函数类型 函数名(参数列表)=0;</p><p>};</p><p>一个类可以说明多个纯虚函数，包含有纯虚函数的类称为抽象类。一个抽象类只能作为基类来派生新类，不能说明抽象类的对象。但可以说明指向抽象类对象的指针（或引用）。</p><p>从一个抽象类派生的类必须提供纯虚函数的实现代码，或在该派生类中仍将它说明为纯虚函数，否则编译器将给出错误信息。这说明了纯虚函数的派生类仍是抽象类。如果派生类给了某类所有纯虚函数的实现，则该派生类不再是抽象类。</p><p>如果通过同一个基类派生一系列的类，则将这些类总称为类族。抽象类的这一特点保证了进度类族的每个类都具有（提供）纯虚函数所要求的行为，进而保证了围绕这个类族所建立起来的软件能正常运行，避免了这个类族的用户由于偶然失误而影响系统正常运行。</p><p>抽象类至少含有一个虚函数，而且至少有一个虚函数是纯虚函数，以便将它与空的虚函数区分开来。下面是两种不同的表示方法：</p><p>virtual void area（）=0;</p><p>virtual void area(){}</p><p>在成员函数内可以调用纯虚函数。因为没有为纯虚函数定义代码，所以在构造函数或虚构函数内调用一个纯虚函数将导致程序运行错误。</p><h2 id="83-多重继承与虚函数"><a class="markdownIt-Anchor" href="#83-多重继承与虚函数"></a> 8.3 多重继承与虚函数</h2><h2 id="84-类成员函数的指针与多态性"><a class="markdownIt-Anchor" href="#84-类成员函数的指针与多态性"></a> 8.4 类成员函数的指针与多态性</h2><p>在派生类中，当一个指向基类成员函数的指针指向一个虚函数，并且通过指向对象的基类指针（或引用）访问这个虚函数时，仍发生多态性。</p><h1 id="第9章-运算符重载及流类库"><a class="markdownIt-Anchor" href="#第9章-运算符重载及流类库"></a> 第9章 运算符重载及流类库</h1><h2 id="91-运算符重载"><a class="markdownIt-Anchor" href="#91-运算符重载"></a> 9.1 运算符重载</h2><p>9.1.1 重载对象的赋值运算符</p><p>编译器在默认情况下为每个类生成一个默认的赋值操作，用于同类的两个对象之间相互赋值。默认的含义是逐个为成员赋值，即将一个对象的成员的值赋给另一个对象相应的成员，这种赋值方式对于有些类可能是不正确的。</p><p>C++的关键字“operator”和运算符一起使用就表示一个运算符函数。例如“operator +”表示重载“+”运算符。</p><p>9.1.2 运算符重载的实质</p><p>C<ins>是由函数组成的，在C</ins>内部，任何运算都是通过函数来实现的。因为任何运算都是通过函数来实现的，所以运算符重载其实就是函数重载，要重载某个运算符，只要重载相应的函数就可以了。与以往稍有不同的是，需要使用新的关键字“operator”，它和C<ins>的一个运算符连用，构成一个运算符函数名，例如“operator+”.通过这种构成方法就可以像重载普通函数那样重载运算符函数operator+()。由于C</ins>已经为各种基本数据类型定义了该运算函数，所以只需要为自己定义的类型重载operator+()就可以了。</p><p>一般地，为用户定义的类型重载运算符都要求能够访问这个类型的私有成员，所以只有两条路可走：要么将运算符重载为这个类型的成员函数，要么将运算符重载为这个类型的友元。</p><p>C<ins>的运算符大部分都可以重载，不能重载的只有. 、:: 、* 和 ?: 。前面三个是因为在C</ins>中都有特定的含义，不准重载以避免不必要的麻烦；“?:”则是因为不值得重载。另外，“sizeof”和“#”不是运算符，因而不能重载，而=、（）、[ ] 、-&gt;这4个运算符只能用类运算符来重载。</p><p>9.1.3 &lt;&lt;、&gt;&gt;和++运算符重载实例</p><p>其实，插入符“&lt;&lt;”和提取符“&gt;&gt;”的重载也与其他运算符重载一样，但操作符的左边是流对象的别名而不是被操作的对象，运算符跟在流对象的后面，它们要直接访问类的私有数据，而且流是标准类库，用户只能继承不能修改，更不能是流库的成员，所以它们必须作为类的友元重载。</p><p>插入符函数的一般形式如下：</p><p>ostream &amp;operator&lt;&lt;(ostream &amp; output，类名 &amp;对象名)</p><p>{</p><p>return output;</p><p>}</p><p>output是类ostream对象的引用，它是cout的别名，即ostream&amp;output=cout。调用参数时，output引用cout（即cout的别名）。显然，插入符函数的第2个参数使用引用方式比直接使用对象名的可读性要好一些。</p><p>提取符函数的一般形式如下：</p><p>istram &amp;operator&gt;&gt;(istream &amp; input，类名&amp;对象名)</p><p>{</p><p>return input;</p><p>}</p><p>input是类istream对象的引用。它是cin的别名，即istream&amp;input=cin。调用参数时，input引用cin（即cin的别名）。</p><p>另外，提取符函数需要返回新的对象值，所以应该使用引用，即“类名&amp;对象名”，不能使用“类名 对象名”。插入符函数不改变对象的值，所以两种方法都可以。</p><p>显然，运算符“&lt;&lt;”重载函数有两个参数，第1个是ostream类的一个引用，第2个是自定义类型的一个对象。这个重载方式是友元重载。这个函数的返回类型是一个ostream类型的引用，在函数中实际返回的是该函数的第一个参数，这样做是为了使得“&lt;&lt;”能够连续使用。</p><p>有些C++编译器不区分前缀或后缀运算符，这时只能通过对运算符函数进行重载来反映其为前缀或后缀运算符。</p><p>注意不能自己定义新的运算符，只能是把C++原有的运算符用到自己设计的类上面去。同时，经过重载，运算符并不改变原有的优先级，也不改变它所需的操作数目。当不涉及到定义的类对象时，它仍然执行系统预定义的运算，只有用到自己定义的对象上，才执行新定义的操作。</p><p>应该根据需要进行运算符重载。不排除在某些特殊情况下会有一些特殊的需要，但大多数情况下不会将运算符“+”重载为两个复数相减的运算（尽管有能力这么做）。一般总是要求运算符重载合乎习惯。</p><p>9.1.4 类运算符和友元运算符的区别</p><p>如果运算符所需的操作数（尤其是第一个操作数）希望进行隐式类型转换，则运算符应通过友元来重载。另一方面，如果一个运算符的操作需要修改类对象的状态，则应当使用类运算符，这样更符合数据封装的要求。但参数是引用还是对象，则要根据运算符在使用中可能出现的情况来决定。</p><p>如果对象作为重载运算符函数的参数，则可以使用构造函数将常量转换成该类型的对象。如果使用引用作为参数，因为这些常量不能作为对象名使用，所以编译系统就要报错。</p><p>9.1.5 下标运算符“[ ]”的重载</p><p>运算符“[ ]”只能用类运算符来重载。</p><h2 id="92-流类库"><a class="markdownIt-Anchor" href="#92-流类库"></a> 9.2 流类库</h2><p>C++的流类库由几个进行I/O操作的基础类和几个支持特定种类的源和目标的I/O操作的类组成。</p><p>9.2.1 流类库的基础类</p><p>在C<ins>中，输入输出时同流来完成的。C</ins>的输出操作将一个对象的状态转换成一个字符序列，输出到某个地方。输入操作也是从某个地方接收到一个字符序列，然后将其转换成一个对象的状态所要求的格式。这看起来很像数据在流动，于是把接收输出数据的地方叫做目标，把输入数据来自的地方叫做源。而输入和输出操作可以看成字符序列在源、目标以及对象之间的流动。C<ins>将与输入和输出有关的操作定义为一个类体系，放在一个系统库里，以备用户调用。这个执行输入和输出操作的类体系就叫做流类，提供这个流类实现的系统库就叫做流类库。C</ins>的流类库由几个进行I/O操作的基础类和几个支持特定种类源和目标的I/O操作类组成。</p><p>在C<ins>中，如果在多条继承路径上有一个汇合处，则称这个汇合处的基类为公共基类（ios符合条件）。因为可以通过不同的访问路径访问这个基类，从而使公共的基类会产生多个实例，这样会引起二义性。如果想使这个公共的基类只产生一个实例，则可以将这个基类说明为虚基类。ios类就是isrream类和ostream类的虚基类，用来提供对流进行格式化I/O操作和错误处理的成员函数。用关键字virtual可将公共基类说明为虚基类，虚基类的定义很难处理，这就是为什么最初的C</ins>语言没有能支持多重继承的原因。</p><p>从ios类公有派生的istream和ostream两个类分别提供对流进行提取操作和插入操作的成员函数，而iostream类通过组合istream类和ostream类来支持对一个流进行双向（也就是输入和输出）操作，它并没有提供新的成员函数。</p><p>C++流类库预定义了4个流，它们是cin、cout、cerr、clog。事实上，可以将cin视为类istream的一个对象，而将cout视为类ostream的对象。</p><p>流是一个抽象概念，当实际进行I/O操作时，必须将流和一种具体的物理设备（比如键盘）联接起来。C++的流类库预定义的4个流所联接起来的具体设备为：</p><p>cin 与标准输入设备相联接</p><p>cout 与标准输出设备相联接</p><p>cerr 与标准错误输出设备相联接（非缓冲方式）</p><p>clog 与标准错误输出设备相联接（缓冲方式）</p><p>9.2.2 默认输入输出的格式控制</p><p>关于数值数据，默认方式能够自动识别浮点数并用最短的格式输出，还可以将定点数分成整数和小数部分。</p><p>特别要注意字符的读入规则。对单字符来讲，它将舍去空格，直到读到字符为止。对于单字符对象a，b和c，“cin&gt;&gt;a&gt;&gt;b&gt;&gt;c；”能将连续的3个字符分别正确地赋给相应对象。</p><p>对字符串来讲，它从读到第一个字符开始，到空格符结束。对于字符数组，使用数组名来整体读入。但对于字符指针，尽管为它动态分配了地址，也只能采取逐个赋值的方法，它不仅不以空格结束，反而舍弃空格（读到字符才计数）。因为字符串没有结束位，所以将字符串作为整体输出时，有效字符串后面将出现乱码。不过，可以手工增加表示字符串的结束符“\0”来消除乱码。</p><p>当用键盘同时给一个单字符对象和一个字符串对象赋值时，不要先给字符串赋值。如果先给它赋值，应该强行使用结束符。</p><p>Bool(布尔型)在VC6.0中把输入的0识别为false，其他的值均识别为1。输出时，只有0和1两个值。如果默认输入输出格式不能满足自己的要求，就必须重载它们。</p><p>9.2.3 使用ios_base类</p><p>1.ios_base类简介</p><p>ios_base类派生ios类，ios类又是istream类和ostream类的虚基类。</p><p>表9.1 常量名及含义</p><table><thead><tr><th>常量名</th><th>含义</th></tr></thead><tbody><tr><td>skipws</td><td>跳过输入中的空白</td></tr><tr><td>left</td><td>输出数据按输出域左边对齐输出</td></tr><tr><td>right</td><td>输出数据按输出域右边对齐输出</td></tr><tr><td>intermal</td><td>在指定任何引导标志或基之后填充字符</td></tr><tr><td>dec</td><td>转换基数为十进制形式</td></tr><tr><td>oct</td><td>转换基数为八进制形式</td></tr><tr><td>hex</td><td>转换基数为十六进制形式</td></tr><tr><td>showbase</td><td>输出带有一个表示制式的字符</td></tr><tr><td>showpoint</td><td>浮点输出时必须带有一个小数点和尾部的0</td></tr><tr><td>uppercase</td><td>十六进制数值输出使用大写A~F，科学计数显示使用大写字母E</td></tr><tr><td>showpos</td><td>在正数前添加一个“+”号</td></tr><tr><td>scientific</td><td>使用科学计数法表示浮点数</td></tr><tr><td>fixed</td><td>使用定点形式表示浮点数</td></tr><tr><td>untibuf</td><td>每次插入之后，ostream::osfx刷新该流的缓冲区。默认缓冲单元为cerr</td></tr><tr><td>boolalpha</td><td>把逻辑值输出为true和false（否则输出为1和0）</td></tr><tr><td>adjustfield</td><td>对齐方式域（与left、right、internal配合使用，例如ios_base::adjustfield）</td></tr><tr><td>basefield</td><td>数字方式域（与dex、oct、hex配合使用，例如ios_base::basefield）</td></tr><tr><td>floatfield</td><td>浮点方式域（与fix、scientific配合使用，例如ios_base::floatfield）</td></tr></tbody></table><p>表9.2 处理标志的成员函数及其作用</p><table><thead><tr><th>成员函数</th><th>作 用</th></tr></thead><tbody><tr><td>long flags（long）</td><td>允许程序员设置标志字的值，并返回以前所设置的标志字</td></tr><tr><td>long flags()</td><td>仅返回当前的标志字</td></tr><tr><td>long setf(long,long)</td><td>用于设置标志字的某一位，第2个参数指定所要操作的位，第1个参数指定为该参数所设置的值</td></tr><tr><td>long setf(long)</td><td>用来设置参数指定的标志位</td></tr><tr><td>long unsetf(long)</td><td>清除参数指定的标志位</td></tr><tr><td>int width(int)</td><td>返回以前设置显示数据的域宽</td></tr><tr><td>int width()</td><td>只返回当前域宽（默认宽度为0）</td></tr><tr><td>char fill(char)</td><td>设置填充字符，设置的宽度小时，空余的位置用填充字符来填充，默认条件下是空格。这个函数返回以前设置的填充字符</td></tr><tr><td>char fill()</td><td>获得当前的填充字符</td></tr><tr><td>int precision(int)</td><td>返回以前设置的精度（小数点后的小数位数）</td></tr><tr><td>int precision</td><td>返回当前设置的精度</td></tr></tbody></table><p>2.直接使用格式控制</p><p>表9.1中的名字可以直接用在系统提供的输入输出流中，并且有些是成对的。加no前缀标识取消原操作。</p><p>用width(int)设置宽度的效果只对一次输入或输出有效，在完成一次输入或输出之后，宽度设置自动恢复为0（表示按实际数据宽度输入输出）。在设置输入时，实际输入的字符串最大长度为n-1(宽度n计入结束符)。setw(int)只对紧跟其后的输出有效。</p><p>3.使用成员函数</p><p>在使用成员函数进行格式控制的时候，setf用来设置，unsetf用来恢复默认设置。它们被流对象调用，使用表9.1的常量设置。</p><h2 id="93-文件流"><a class="markdownIt-Anchor" href="#93-文件流"></a> 9.3 文件流</h2><p>在C<ins>里，文件操作是通过流来完成的。C</ins>总共有输入文件流、输出文件流和输入输出文件流3种，并已将它们标准化。</p><p>要打开一个输入文件流，需要定义一个ifstream类型的对象；要打开一个输出文件流，需要定义一个ofstream类型的对象；如果要打开输入输出文件流，则要定义一个fstream类型的对象。这3种类型都定义在头文件<fstream>里。</p><p>9.3.1 使用文件流</p><p>流类具有支持文件的能力，在建立和使用文件时，就像使用cin和cout一样方便。</p><p>可以总结出对文件进行操作的方法如下：</p><p>（1）打开一个相应的文件流.</p><p>（2）把这个流和相应的文件关联起来。</p><p>因为ifstream、ofstream和fstream这3个类都具有自动打开文件的构造函数，而这个构造函数就具有open()的功能。因此，事实上可以用一条语句：</p><p>ofstream myStream(“myText.txt”);</p><p>来完成上述两步。如果指定文件路径，路径中的“\”号必须使用转义字符表示。</p><p>（3）操作文件流。</p><p>综上所述，流是I/O流类的中心概念。流是一种抽象，它负责在数据的生产者和消费者之间建立联系并管理数据的流动，程序将流对象看做是文件对象的化身。</p><p>一个输出流对象是信息流动的目标，ofstream是最重要的输出流。一个输入流对象是数据流动的源头，ifstream是最重要的输入流。一个iostream对象可以是数据流动的源或目的，fstream就是从它派生的。</p><p>其实，文件流的对象是字节流，而且文本文件和二进制文件均是字节流。将文件与流关联起来，就是使用“&gt;&gt;”和“&lt;&lt;”对文件进行读写。但不能使用空格，这是由“&gt;&gt;”和“&lt;&lt;”原来的性质所决定的。</p><p>9.3.2 几个典型流成员函数</p><p>1.输出流的open函数</p><p>open函数的原型如下：</p><p>void open(char const *,int filemode,int =filebuf::openprot);</p><p>它有3个参数，第一个是要打开的文件名，第2个是文件的打开方式，第3个是文件的保护方式，一般都使用默认值。第2个参数可以取如下所示的值：</p><p>ios_base::in 打开文件进行读操作，这种方式可避免删除现存文件的内容</p><p>ios_base::out 打开文件进行写操作，这是默认模式</p><p>ios_base::ate 打开一个已有的输入或输出文件并查找到文件尾</p><p>ios_base::app 打开文件以便在文件尾部添加数据</p><p>ios_base::binary 指定文件以二进制方式打开，默认为文本方式</p><p>ios_base::trunc 如文件存在，将其长度截断为零并清除原有内容</p><p>除ios_base::app方式之外，在其他几种方式下，文件刚刚打开是，指示当前读写位置的文件指针都定位于文件的开始位置，而ios_base::app使文件当前的写指针定位于文件尾。这几种方式也可以通过“或”运算符“|”同时使用。</p><p>2.输入流类的open函数</p><p>使用默认构造函数建立对象，然后调用open成员函数打开文件。</p><p>输入流的打开模式如下所示：</p><p>ios_base::in 打开文件用于输入（默认）</p><p>ios_base::binary 指定文件以二进制方式打开，默认为文本方式</p><p>3.close成员函数</p><p>close成员函数用来关闭与一个文件流相关联的磁盘文件。如果没有关闭该文件，因为文件流是对象，所以在文件流对象的生存期结束时，将自动关闭该文件。不过，应养成及时关闭不再使用的文件的习惯，以避免误操作或者干扰而产生的错误。</p><p>4.错误处理函数</p><p>在对一个流对象进行I/O操作时，可能会产生错误。当错误发生时，可以使用文件流的错误处理成员函数进行错误类型判别。这些成员函数的作用见表9.3。</p><p>可以使用这些函数检查当前流的状态，例如：</p><p>if(cin.good()) cin&gt;&gt;data;</p><p>函数clear更多地是用于在已知流发生错误的情况下清除流的错误状态，也可以用于设置流的错误状态。除非发生致命错误（hardfail），否则可以使用函数clear清除流的错误状态。</p><p>“！”运算符已经过了重载，它与fail函数执行相同的功能，因此表达式if(!cout)等价于if(cout.fail())，if(cout)等价于if(!cout.fail())。</p><p>表9.3 成员函数及其功能</p><table><thead><tr><th>函 数</th><th>功 能</th></tr></thead><tbody><tr><td>bad()</td><td>如果进行非法操作，返回true，否则返回false</td></tr><tr><td>clear()</td><td>设置内部错误状态，如果用缺省参量调用则清除所有错误位</td></tr><tr><td>eof()</td><td>如果提取操作已经到达文件尾，则返回true，否则返回false</td></tr><tr><td>good()</td><td>如果没有错误条件和没有设置文件结束标志，返回true，否则返回false</td></tr><tr><td>fail()</td><td>与good相反，操作失败返回false，否则返回true</td></tr><tr><td>is_open()</td><td>判定流对象是否成功地与文件关联，若是，返回true，否则返回false</td></tr></tbody></table><p>9.3.3 文件存取综合实例</p><h1 id="第10章-面向对象设计实例"><a class="markdownIt-Anchor" href="#第10章-面向对象设计实例"></a> 第10章 面向对象设计实例</h1><h2 id="101-过程抽象和数据抽象"><a class="markdownIt-Anchor" href="#101-过程抽象和数据抽象"></a> 10.1 过程抽象和数据抽象</h2><p>抽象是形成概念的必要手段，它是从许多事物中舍弃个别的、非本质性的特征，抽取共同及本质性的特征的过程。</p><p>对于分析而言，抽象原则具有两方面的意义：</p><p>（1）尽管问题域中的事物很复杂，但分析员并不需要了解和描述其全部特征，只需要分析研究与系统目标有关的事物及其本质特征。对于那些与系统目标无关的特征和许多具体的细节，即使有所了解，也应该舍弃。</p><p>（2）通过舍弃个体事物在细节上的差异，抽取其共同特征可以得到一批事物的抽象概念。</p><p>过程抽象是指任何一个完成确定功能的操作序列，其使用者都可以把它看做一个单一的实体，尽管实际上它可能是由一系列更低级的操作完成的。运用过程抽象，软件开发者可以把一个复杂的功能分解为一些子功能，过程抽象对于在对象范围内组织对象的成员函数是很有用的。</p><p>数据抽象是指根据施加于数据之上的操作来定义数据类型，并限定数据的值只能由这些操作来修改和观察。</p><h2 id="102-发现对象并建立对象层"><a class="markdownIt-Anchor" href="#102-发现对象并建立对象层"></a> 10.2 发现对象并建立对象层</h2><p>软件开发者将被开发的整个业务范围称作“问题域”，可以按如下步骤考虑发现对象并建立对象层。</p><p>1.将问题域和系统责任作为出发点</p><p>2.正确运用抽象原则</p><p>在OOA中正确地运用抽象原则，首先要舍弃那些与系统责任无关的事物，只注意与系统责任有关的事物。其次，对于与系统责任有关的事物，也不是把他们的任何特征都在相应的对象中表达出来，而是要舍弃那些与系统责任无关的特征。判断事物是否与系统责任有关的关键问题，一是该事物是否为系统提供了一些有用的信息（是否需要系统为它保存和管理某些信息）；二是它是否向系统提供了某些服务（是否需要系统描述它的某些行为）。</p><p>3.寻找候选对象的基本方法</p><p>寻找候选对象的基本方法的主要策略是从问题域、系统边界和系统责任三方面找出可能有的候选对象。</p><p>4.审查和筛选对象</p><p>5.异常情况的检查和调整</p><p>一般认为下述情况都算异常情况，则需要进行调整。</p><p>（1）类的数据成员或成员函数不适合该类的全部对象。</p><p>（2）不同类的数据成员或成员函数相同或相似。</p><p>（3）对同一事物的重复描述。</p><h2 id="103-定义数据成员和成员函数"><a class="markdownIt-Anchor" href="#103-定义数据成员和成员函数"></a> 10.3 定义数据成员和成员函数</h2><p>为了发现对象的数据成员，首先应考虑借鉴以往的OOA结果，看看相同或相似的问题域是否有已开发的OOA模型，尽可能复用其中同类对象数据成员的定义。然后重点研究当前问题域和系统责任，针对本系统应该设置的每一类对象，按照问题域的实际情况，以系统责任为目标进行正确地抽象，从而找出每一类对象应有的数据成员。</p><p>1.寻找数据成员的一般方法</p><p>2.审查与筛选数据成员</p><p>对于初步发现的数据成员，要进行审查和筛选。即对每个数据成员提出以下问题：</p><p>（1）这个数据成员是否体现了以系统责任为目标的抽象。</p><p>（2）这个数据成员是否描述了这个对象本身的特征。</p><p>（3）该属性是否符合人们日常的思维习惯。</p><p>（4）这个数据成员是不是可以通过继承得到。</p><p>（5）是否可以从其他数据成员直接导出的数据成员。</p><p>3.定义成员函数</p><p>使用中要特别注意区分成员函数、非成员函数和友元函数三者。</p><h2 id="104-如何发现基类和派生类结构"><a class="markdownIt-Anchor" href="#104-如何发现基类和派生类结构"></a> 10.4 如何发现基类和派生类结构</h2><p>1.学习当前领域的分类学知识</p><p>分析员应该学习一些与当前问题域有关的分类学知识，，因为问题域现行的分类方法（如果有），往往比较正确地反映了事物的特征、类别以及各种概念的一般性与特殊性。</p><p>2.按照常识考虑事物的分类</p><p>从不同的角度考虑问题域中事物的分类，可以形成一些建立基类与派生类结构的初步设想，从而启发自己发现一些确实需要的基类与派生类结构。</p><p>3.构建基类与派生类</p><p>按照基类与派生类结构的两种定义，可引导我们从两种不同的思路去发现基类与派生类结构。一种思路是把每一个类看做是一个对象集合，分析这些集合之间的包含关系。另一种思路是看一个类是不是具有另一个类的全部特征。这包括两种情况：一是建立这些类时已经计划让某个类继承另一个类的全部成员，此时应建立基类与派生类结构来落实这种继承；另一种情况是起初只是孤立地建立每一个类，现在发现一个类中定义的成员（数据成员和成员函数）全部在另一个类中重新出现了，此时应该考虑建立基类与派生类结构，把后者作为前者的派生类，以简化定义。</p><p>4.考察类的成员</p><p>对系统中的每个类，从以下两个方面考察它们的成员；一是看一个类的成员是否适合这个类的全部对象。如果某些数据成员和成员函数只能适合该类的一部分对象，说明应该从这个类中划分出一些派生类，建立基类与派生类关系。</p><p>另一方面检查是否有两个（或更多的）类含有一些共同的数据成员和成员函数。如果有，则考虑若把这些共同的数据成员和成员函数提取出来后能否构成一个在概念上是包含原来那些类的基类，组成一个基类与派生类结构。</p><p>还要对发现的结构进行审查、调整和简化，处理异常情况，才能建立合适的结构。</p><h2 id="105-接口继承与实现继承"><a class="markdownIt-Anchor" href="#105-接口继承与实现继承"></a> 10.5 接口继承与实现继承</h2><p>现在假设设计一个可以供其他类继承的基类，派生类使用公有继承方式。公有继承实际上是由两个不同部分组成的，即函数接口的继承和函数实现的继承。可概括成如下两点：</p><p>（1）继承的总是成员函数的接口。对于基类是正确的任何事情，对于它的派生类必须也是正确的。</p><p>（2）声明纯虚函数的目的是使派生类仅仅继承函数接口，而纯虚函数的实现则由派生类去完成。</p><p>（3）声明虚函数的目的是使派生类既能继承基类对此虚函数的实现，又能继承虚函数提供的接口。</p><p>（4）声明实函数的目的是使派生类既能继承基类对此实函数的实现，又能继承实函数提供的接口。</p><p>1.纯虚函数</p><p>纯虚函数最显著的两个特征是：</p><p>（1）它们必须由继承它的非抽象类重新说明</p><p>（2）它们在抽象类中没有定义</p><p>2.虚函数</p><p>虚函数的情况不同于纯虚函数，派生类继承虚函数的接口，虚函数一般只提供一个可供派生类选择的实现。之所以声明虚函数，目的在于使派生类既继承函数接口，也继承虚函数的实现。</p><p>3.实函数</p><p>一个实成员函数指定它自己在派生类中保持不变。因此，声明实函数的目的是使派生类既继承这个函数的实现，也继承其函数接口。</p><p>4.避免重新定义继承的实函数</p><p>虽然在派生类中可以重定义基类的同名实函数，但是从使用安全角度来看，为了提高程序质量，在实际应用中应避免这样做。</p><h2 id="106-设计实例"><a class="markdownIt-Anchor" href="#106-设计实例"></a> 10.6 设计实例</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker学习实践记录</title>
      <link href="/2020/08/15/2020-08-15-Docker%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5%E8%AE%B0%E5%BD%95/"/>
      <url>/2020/08/15/2020-08-15-Docker%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="docker学习实践记录"><a class="markdownIt-Anchor" href="#docker学习实践记录"></a> Docker学习实践记录</h1><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>关于docker 其实也接触过有一段时间的，曾这个周末有些时间，做一些记录，大部分内容都是收录网上的教程，做一个总结。</p><h2 id="docker简介"><a class="markdownIt-Anchor" href="#docker简介"></a> Docker简介</h2><h3 id="什么是docker"><a class="markdownIt-Anchor" href="#什么是docker"></a> 什么是Docker</h3><p><strong>Docker</strong> 使用  <a href="https://golang.org/">Go 语言</a> 进行开发实现，基于 <code>Linux</code> 内核的 <a href="https://zh.wikipedia.org/wiki/Cgroups">cgroup</a>，<a href="https://en.wikipedia.org/wiki/Linux_namespaces">namespace</a>，以及 <a href="https://docs.docker.com/storage/storagedriver/overlayfs-driver/">OverlayFS</a> 类的 <a href="https://en.wikipedia.org/wiki/Union_mount">Union FS</a> 等技术，对进程进行封装隔离，属于 <a href="https://en.wikipedia.org/wiki/Operating-system-level_virtualization">操作系统层面的虚拟化技术</a>。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。</p><p>Linux容器是与系统其他部分隔离开的一系列进程，从另一个镜像运行，并由该镜像提供支持进程所需的全部文件。容器提供的镜像包含了应用的所有依赖项，因而在从开发到测试再到生产的整个过程中，它都具有可移植性和一致性。</p><p><img src= "/img/loading.gif" data-lazy-src="http://images.zhuoke.xyz/1190037-20180203180225718-1372384956.png" alt="普通虚拟化技术和Docker的对比" /></p><p>而这种对进程进行封装隔离的容器又与传统虚拟化一些虚拟机并不相同，</p><blockquote><p>虚拟化使得许多操作系统可同时在单个系统上运行。</p><p>容器则可共享同一个操作系统内核，将应用进程与系统其他部分隔离开。</p></blockquote><h3 id="docker-如何工作"><a class="markdownIt-Anchor" href="#docker-如何工作"></a> Docker 如何工作？</h3><p>Docker 技术使用 Linux 内核和内核功能（例如 <em>Cgroups</em> <em>和 namespaces</em>）来分隔进程，以便各进程相互独立运行。这种独立性正是采用容器的目的所在；它可以独立运行多种进程、多个应用程序，更加充分地发挥基础设施的作用，同时保持各个独立系统的安全性。</p><p>容器工具（包括 Docker）可提供基于镜像的部署模式。这使得它能够轻松跨多种环境，与其依赖程序共享应用或服务组。Docker 还可在这一容器环境中自动部署应用程序（或者合并多种流程，以构建单个应用程序）。</p><p>此外，由于这些工具基于 Linux 容器构建，使得 Docker 既易于使用，又别具一格 —— 它可为用户提供前所未有的高度应用程访问权限、快速部署以及版本控制和分发能力。</p><h2 id="基本概念"><a class="markdownIt-Anchor" href="#基本概念"></a> 基本概念</h2><h3 id="镜像"><a class="markdownIt-Anchor" href="#镜像"></a> 镜像</h3><p>Docker 镜像是一个特殊的文件系统，类似于Linux中的root文件系统一样，在内核启动后被挂载为用户提供空间支持，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p><h4 id="分层存储"><a class="markdownIt-Anchor" href="#分层存储"></a> 分层存储</h4><p>因为镜像包含操作系统完整的 <code>root</code> 文件系统，其体积往往是庞大的，因此在 Docker 设计时，就充分利用 <a href="https://en.wikipedia.org/wiki/Union_mount">Union FS</a> 的技术，将其设计为分层存储的架构。所以严格来说，镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。</p><p>镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。</p><p>分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。<a href="https://zhuanlan.zhihu.com/p/115845957">缩小Docker镜像大小</a>正是利用这个特征大幅度缩小了docker的大小。</p><h3 id="容器"><a class="markdownIt-Anchor" href="#容器"></a> 容器</h3><p>镜像（<code>Image</code>）和容器（<code>Container</code>）的关系，就像是面向对象程序设计中的 <code>类</code> 和 <code>实例</code> 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p><p>容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 <a href="https://en.wikipedia.org/wiki/Linux_namespaces">命名空间</a>。因此容器可以拥有自己的 <code>root</code> 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。也因为这种隔离的特性，很多人初学 Docker 时常常会混淆容器和虚拟机。</p><p>前面讲过镜像使用的是分层存储，容器也是如此。每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为 <strong>容器存储层</strong>。</p><p>容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。</p><p>按照 Docker 最佳实践的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用 <a href="https://yeasy.gitbook.io/docker_practice/data_management/volume">数据卷（Volume）</a>、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。</p><p>数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器删除或者重新运行之后，数据却不会丢失。即便如此也不推荐mysql之类涉及持久的数据存储运行在docker中。仓库</p><p>镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，<a href="https://yeasy.gitbook.io/docker_practice/repository/registry">Docker Registry</a> 就是这样的服务。</p><p>一个 <strong>Docker Registry</strong> 中可以包含多个 <strong>仓库</strong>（<code>Repository</code>）；每个仓库可以包含多个 <strong>标签</strong>（<code>Tag</code>）；每个标签对应一个镜像。</p><p>通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 <code>&lt;仓库名&gt;:&lt;标签&gt;</code> 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 <code>latest</code> 作为默认标签。</p><p>以 <a href="https://hub.docker.com/_/ubuntu">Ubuntu 镜像</a> 为例，<code>ubuntu</code> 是仓库的名字，其内包含有不同的版本标签，如，<code>16.04</code>, <code>18.04</code>。我们可以通过 <code>ubuntu:16.04</code>，或者 <code>ubuntu:18.04</code> 来具体指定所需哪个版本的镜像。如果忽略了标签，比如 <code>ubuntu</code>，那将视为 <code>ubuntu:latest</code>。</p><p>仓库名经常以 <em>两段式路径</em> 形式出现，比如 <code>jwilder/nginx-proxy</code>，前者往往意味着 Docker Registry 多用户环境下的用户名，后者则往往是对应的软件名。但这并非绝对，取决于所使用的具体 Docker Registry 的软件或服务。</p><h4 id="docker-registry-公开服务"><a class="markdownIt-Anchor" href="#docker-registry-公开服务"></a> <strong>Docker Registry 公开服务</strong></h4><p>Docker Registry 公开服务是开放给用户使用、允许用户管理镜像的 Registry 服务。一般这类公开服务允许用户免费上传、下载公开的镜像，并可能提供收费服务供用户管理私有镜像。</p><p>最常使用的 Registry 公开服务是官方的 <a href="https://hub.docker.com/">Docker Hub</a>，这也是默认的 Registry，并拥有大量的高质量的官方镜像。除此以外，还有 Red Hat 的 <a href="https://quay.io/repository/">Quay.io</a>；Google 的 <a href="https://cloud.google.com/container-registry/">Google Container Registry</a>，<a href="https://kubernetes.io/">Kubernetes</a> 的镜像使用的就是这个服务。</p><p>由于某些原因，在国内访问这些服务可能会比较慢。国内的一些云服务商提供了针对 Docker Hub 的镜像服务（<code>Registry Mirror</code>），这些镜像服务被称为 <strong>加速器</strong>。常见的有 <a href="https://cr.console.aliyun.com/#/accelerator">阿里云加速器</a>、<a href="https://www.daocloud.io/mirror#accelerator-doc">DaoCloud 加速器</a> 等。使用加速器会直接从国内的地址下载 Docker Hub 的镜像，比直接从 Docker Hub 下载速度会提高很多。在 <a href="https://yeasy.gitbook.io/docker_practice/install/mirror">安装 Docker</a> 一节中有详细的配置方法。</p><p>国内也有一些云服务商提供类似于 Docker Hub 的公开服务。比如 <a href="https://c.163.com/hub#/m/library/">网易云镜像服务</a>、<a href="https://hub.daocloud.io/">DaoCloud 镜像市场</a>、<a href="https://cr.console.aliyun.com/">阿里云镜像库</a> 等。</p><h4 id="私有-docker-registry"><a class="markdownIt-Anchor" href="#私有-docker-registry"></a> <strong>私有 Docker Registry</strong></h4><p>除了使用公开服务外，用户还可以在本地搭建私有 Docker Registry。Docker 官方提供了 <a href="https://hub.docker.com/_/registry/">Docker Registry</a> 镜像，可以直接使用做为私有 Registry 服务。在 <a href="https://yeasy.gitbook.io/docker_practice/repository/registry">私有仓库</a> 一节中，会有进一步的搭建私有 Registry 服务的讲解。</p><p>开源的 Docker Registry 镜像只提供了 <a href="https://docs.docker.com/registry/spec/api/">Docker Registry API</a> 的服务端实现，足以支持 <code>docker</code> 命令，不影响使用。但不包含图形界面，以及镜像维护、用户管理、访问控制等高级功能。在官方的商业化版本 <a href="https://docs.docker.com/datacenter/dtr/2.0/">Docker Trusted Registry</a> 中，提供了这些高级功能。</p><p>除了官方的 Docker Registry 外，还有第三方软件实现了 Docker Registry API，甚至提供了用户界面以及一些高级功能。比如，<a href="https://github.com/goharbor/harbor">Harbor</a> 和 <a href="https://yeasy.gitbook.io/docker_practice/repository/nexus3_registry">Sonatype Nexus</a>。</p><h2 id="centos下安装docker"><a class="markdownIt-Anchor" href="#centos下安装docker"></a> CentOS下安装Docker</h2><h3 id="使用脚本自动安装"><a class="markdownIt-Anchor" href="#使用脚本自动安装"></a> 使用脚本自动安装</h3><p>在测试或开发环境中 Docker 官方为了简化安装流程，提供了一套便捷的安装脚本，CentOS 系统上可以使用这套脚本安装，另外可以通过 <code>--mirror</code> 选项使用国内源进行安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line">$ sudo sh get-docker.sh --mirror Aliyun</span><br><span class="line"># $ sudo sh get-docker.sh --mirror AzureChinaCloud</span><br></pre></td></tr></table></figure><p>执行这个命令后，脚本就会自动的将一切准备工作做好，并且把 Docker CE 的稳定(stable)版本安装在系统中。</p><h3 id="启动-docker-ce"><a class="markdownIt-Anchor" href="#启动-docker-ce"></a> 启动 Docker CE</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl enable docker</span><br><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure><h3 id="建立-docker-用户组"><a class="markdownIt-Anchor" href="#建立-docker-用户组"></a> 建立 docker 用户组</h3><p>默认情况下，<code>docker</code> 命令会使用 <a href="https://en.wikipedia.org/wiki/Unix_domain_socket">Unix socket</a> 与 Docker 引擎通讯。而只有 <code>root</code> 用户和 <code>docker</code> 组的用户才可以访问 Docker 引擎的 Unix socket。出于安全考虑，一般 Linux 系统上不会直接使用 <code>root</code> 用户。因此，更好地做法是将需要使用 <code>docker</code> 的用户加入 <code>docker</code> 用户组。</p><p>建立 <code>docker</code> 组：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo groupadd docker</span><br></pre></td></tr></table></figure><p>将当前用户加入 <code>docker</code> 组：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure><p>退出当前终端并重新登录，进行如下测试。</p><h3 id="测试-docker-是否安装正确"><a class="markdownIt-Anchor" href="#测试-docker-是否安装正确"></a> 测试 Docker 是否安装正确</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ docker run hello-world</span><br><span class="line">Unable to find image &#x27;hello-world:latest&#x27; locallylatest: Pulling from library/hello-worldd1725b59e92d: Pull completeDigest: sha256:0add3ace90ecb4adbf7777e9aacf18357296e799f81cabc9fde470971e499788Status: Downloaded newer image for hello-world:latest</span><br><span class="line">Hello from Docker!This message shows that your installation appears to be working correctly.</span><br><span class="line">To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.    (amd64) 3. The Docker daemon created a new container from that image which runs the    executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it    to your terminal.</span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bash</span><br><span class="line">Share images, automate workflows, and more with a free Docker ID: https://hub.docker.com/</span><br><span class="line">For more examples and ideas, visit: https://docs.docker.com/get-started/</span><br></pre></td></tr></table></figure><h3 id="镜像加速"><a class="markdownIt-Anchor" href="#镜像加速"></a> 镜像加速</h3><p>如果在使用过程中发现拉取 Docker 镜像十分缓慢，可以配置 Docker 国内镜像加速。</p><p>请在 <code>/etc/docker/daemon.json</code> 中写入如下内容（如果文件不存在请新建该文件）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [</span><br><span class="line">    &quot;https://hub-mirror.c.163.com&quot;,</span><br><span class="line">    &quot;https://mirror.baidubce.com&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="docker-基础命令"><a class="markdownIt-Anchor" href="#docker-基础命令"></a> docker 基础命令</h2><ul><li><p>查看本地镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>可以看到本地所有的镜像信息：</p><p>​</p><table><thead><tr><th style="text-align:right">\REPOSITORY</th><th>TAG</th><th style="text-align:left">IMAGEID</th><th>CREATED</th><th>SIZE</th></tr></thead><tbody><tr><td style="text-align:right">xiaozuo1/dockerjib</td><td>v2</td><td style="text-align:left">a81abdf5aa7c</td><td>50 years ago</td><td>50 years ago</td></tr></tbody></table></li><li><p>查看正在运行的容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1docker ps</span><br></pre></td></tr></table></figure></li><li><p>查看所有容器包括已关闭容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1docker ps -a</span><br></pre></td></tr></table></figure></li><li><p>删除已停止容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1docker rm + 容器id/容器名称</span><br></pre></td></tr></table></figure></li><li><p>停止正在运行的容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1docker stop 容器id/容器名称</span><br></pre></td></tr></table></figure></li><li><p>删除镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1docker rmi 镜像id/镜像名称</span><br></pre></td></tr></table></figure></li></ul><hr /><p>参考（照搬自：）</p><p><a href="https://www.cnblogs.com/clsn/p/8410309.html">Docker容器入门</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java开发学习路线</title>
      <link href="/2020/07/10/Java%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
      <url>/2020/07/10/Java%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="java开发学习路线"><a class="markdownIt-Anchor" href="#java开发学习路线"></a> <strong>Java开发学习路线</strong></h1><ul><li><p>编程基础</p><ul><li><p>Java语言</p><ul><li><p>语言基础</p><ul><li><p>基础语法</p></li><li><p>面向对象</p><ul><li><p>封装</p></li><li><p>继承</p></li><li><p>多态</p></li></ul></li><li><p>接口</p></li><li><p>容器</p></li><li><p>异常</p></li><li><p>泛型</p></li><li><p>反射</p></li><li><p>注解</p></li><li><p>I/O</p></li><li><p>图形化（Swing）</p></li></ul></li><li><p>JVM</p><ul><li><p>类加载机制</p></li><li><p>字节码执行机制</p></li><li><p>JVM内存模型</p></li><li><p>GC垃圾回收</p></li><li><p>JVM性能监控与故障定位</p></li><li><p>JVM调优</p></li></ul></li><li><p>多线程/并发</p><ul><li><p>并发编程的基础</p><ul><li><p>创建线程的几种方式</p></li><li><p>基础语法</p><ul><li><p>snyc</p></li><li><p>volatile</p></li></ul></li><li><p>基础概念</p><ul><li><p>原子性</p></li><li><p>可见性</p></li><li><p>指令重排</p></li></ul></li></ul></li><li><p>线程池</p></li><li><p>锁</p></li><li><p>并发容器</p></li><li><p>原子类</p></li><li><p>JUC并发工具类</p></li></ul></li></ul></li><li><p>数据机构和算法</p><ul><li><p>数据结构</p><ul><li><p>字符串</p></li><li><p>数组</p></li><li><p>链表</p></li><li><p>二叉树</p></li><li><p>堆、栈、队列</p></li><li><p>哈希</p></li></ul></li><li><p>算法</p><ul><li><p>排序</p></li><li><p>查找</p></li><li><p>算法思想</p><ul><li><p>贪心</p></li><li><p>分治</p></li></ul></li><li><p>动态规划</p></li><li><p>回溯</p></li></ul></li></ul></li><li><p>计算机网络</p><ul><li><p>ARP协议</p></li><li><p>IP协议、ICMP协议</p></li><li><p>TCP、UDP协议</p></li><li><p>DNS/HTTP/HTTPS协议</p></li><li><p>Session/Cookie</p></li></ul></li><li><p>数据库/SQL</p><ul><li><p>SQL语句书写</p><ul><li><p>CRUD</p></li><li><p>join</p></li></ul></li><li><p>SQL语句优化</p></li><li><p>事务以及隔离级别</p></li><li><p>索引</p></li><li><p>锁</p></li></ul></li><li><p>操作系统</p><ul><li><p>进程/线程</p></li><li><p>并发/锁</p></li><li><p>内存管理和调度</p></li><li><p>I/O原理</p></li></ul></li><li><p>设计模式</p><ul><li><p>单例</p></li><li><p>工厂</p></li><li><p>代理</p></li><li><p>策略</p></li><li><p>模板方法</p></li><li><p>观察者</p></li><li><p>适配器</p></li><li><p>责任链</p></li><li><p>建造者</p></li></ul></li></ul></li><li><p>研发工具</p><ul><li><p>集成开发环境</p><ul><li><p>Eclipse</p></li><li><p>Intellij idea</p></li><li><p>VSCode</p></li></ul></li><li><p>Linux系统</p><ul><li><p>常用命令</p></li><li><p>Shell脚本</p></li></ul></li><li><p>项目管理/构建工具</p><ul><li><p>Maven</p></li><li><p>Gradle</p></li></ul></li><li><p>代码管理工具</p><ul><li><p>SVN</p></li><li><p>Git</p><ul><li><p>Github</p></li><li><p>Gitlab</p></li><li><p>source tree</p></li><li><p>tortoisegit</p></li></ul></li></ul></li></ul></li><li><p>应用框架</p><ul><li><p>后端</p><ul><li><p>Spring家族框架</p><ul><li><p>Spring</p><ul><li><p>IoC</p></li><li><p>AOP</p></li></ul></li><li><p>SpringMVC</p></li><li><p>Spring Boot</p><ul><li><p>自动配置、开箱即用</p></li><li><p>整合Web</p></li><li><p>整合数据库(事务问题)</p></li><li><p>整合权限</p><ul><li><p>shiro</p></li><li><p>Spring Security</p></li></ul></li><li><p>整合各种中间件</p><ul><li><p>Redis</p></li><li><p>MQ</p></li><li><p>RPC框架</p></li><li><p>NIO框架</p></li></ul></li></ul></li></ul></li><li><p>服务器软件</p><ul><li><p>Web服务器</p><ul><li>Nginx</li></ul></li><li><p>应用服务器</p><ul><li><p>Tomcat</p></li><li><p>Jetty</p></li><li><p>Undertow</p></li></ul></li></ul></li><li><p>中间件</p><ul><li><p>缓存</p><ul><li><p>Redis</p><ul><li><p>基础数据类型</p><ul><li>应用场景</li></ul></li><li><p>事务</p></li><li><p>消息通知</p></li><li><p>管道</p></li><li><p>持久化</p></li><li><p>集群</p></li></ul></li><li><p>memcache</p></li></ul></li><li><p>消息队列</p><ul><li><p>RocketMQ</p></li><li><p>RabbitMQ</p></li><li><p>Kafka</p></li></ul></li><li><p>RPC框架</p><ul><li><p>Dubbo</p></li><li><p>gRPC</p></li><li><p>Thrift</p></li><li><p>Spring Cloud</p></li><li><p>Netty</p></li></ul></li></ul></li><li><p>数据库</p><ul><li><p>ORM层框架</p><ul><li><p>MyBatis</p></li><li><p>Hibernate</p></li><li><p>JPA</p></li></ul></li><li><p>连接池</p><ul><li><p>Druid</p></li><li><p>HikariCP</p></li><li><p>C3P0</p></li></ul></li><li><p>分库分表</p><ul><li><p>MyCat</p></li><li><p>Sharding-JDBC</p></li><li><p>Sharding-Sphere</p></li></ul></li></ul></li><li><p>搜索引擎</p><ul><li><p>ElasticSearch</p></li><li><p>Solr</p></li></ul></li><li><p>分布式/微服务</p><ul><li><p>服务发现/注册</p><ul><li><p>Eureka</p></li><li><p>Consul</p></li><li><p>Zookeeper</p></li><li><p>Nacos</p></li></ul></li><li><p>网关</p><ul><li><p>Zuul</p></li><li><p>Gateway</p></li></ul></li><li><p>服务调用（负载均衡）</p><ul><li><p>Ribbon</p></li><li><p>Feign</p></li></ul></li><li><p>熔断/降级</p><ul><li><p>Hystrix</p></li><li><p>Sentinel</p></li></ul></li><li><p>配置中心</p><ul><li><p>Config</p></li><li><p>Appllp</p></li><li><p>Nacos</p></li></ul></li><li><p>认证和鉴权</p><ul><li><p>Shiro</p></li><li><p>Spring Security</p></li><li><p>OAuth2</p></li><li><p>SSO</p></li></ul></li><li><p>分布式事务</p><ul><li><p>JTA接口</p><ul><li>Atomikos组件</li></ul></li><li><p>2PC、3PC</p></li><li><p>XA模式</p></li><li><p>TCC模式</p><ul><li><p>tcc-transaction</p></li><li><p>ByteTCC</p></li><li><p>EasyTransaction</p></li><li><p>Seata</p></li></ul></li><li><p>SAGA模式</p><ul><li><p>ServiceComb</p></li><li><p>Seata</p></li></ul></li><li><p>LCN模式</p><ul><li>tx-lcn</li></ul></li></ul></li><li><p>任务调度</p><ul><li><p>Quartz</p></li><li><p>Elastic-Job</p></li></ul></li><li><p>链路追踪与监控</p><ul><li><p>Zipkin</p></li><li><p>Sleuth</p></li><li><p>Skywalking</p></li></ul></li><li><p>日志分析与监控</p><ul><li><p>ELK</p><ul><li><p>ElasticSearch</p><ul><li>日志存储与分析</li></ul></li><li><p>Logstash</p><ul><li>日志收集</li></ul></li><li><p>Kibana</p><ul><li>日志可视化</li></ul></li></ul></li></ul></li></ul></li><li><p>虚拟化/容器化</p><ul><li><p>容器技术</p><ul><li>docker</li></ul></li><li><p>容器编排技术</p><ul><li><p>Kubemetes</p></li><li><p>Swarm</p></li></ul></li></ul></li></ul></li><li><p>前端</p><ul><li><p>基础套餐</p><ul><li><p>三大件</p><ul><li><p>HTML</p></li><li><p>JavaScript</p></li><li><p>CSS</p></li></ul></li><li><p>基础库</p><ul><li><p>jQuery</p></li><li><p>Ajax</p></li></ul></li></ul></li><li><p>模板框架</p><ul><li><p>JSP/JSTL</p></li><li><p>Thymeleaf</p></li><li><p>FreeMarker</p></li></ul></li><li><p>组件化框架</p><ul><li><p>Vue</p></li><li><p>React</p></li><li><p>Angular</p></li><li><p>Node</p></li></ul></li></ul></li></ul></li><li><p>运维知识（配置）</p><ul><li><p>web服务器</p><ul><li>nginx</li></ul></li><li><p>应用服务器</p><ul><li>Tomcat/Jetty/Undertow</li></ul></li><li><p>CDN加速</p></li><li><p>持续开发/持续发布</p><ul><li>Jenkins</li></ul></li><li><p>代码质量检查</p><ul><li>sonar</li></ul></li><li><p>日志收集/分析</p><ul><li>ELK</li></ul></li></ul></li><li><p>成神之路</p><ul><li><p>徒手撕代码</p></li><li><p>光脚造轮子</p></li><li><p>闭眼睛深度调优</p></li><li><p>吊打面试官</p></li></ul></li><li><p>平稳降落</p><ul><li>调整心态、注意健康，飞得多高不重要，重要的是如何平稳降落</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在spring boot 调用 cmd 命令</title>
      <link href="/2020/07/10/%E5%9C%A8spring%20boot%20%E8%B0%83%E7%94%A8%20cmd%20%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/07/10/%E5%9C%A8spring%20boot%20%E8%B0%83%E7%94%A8%20cmd%20%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="在spring-boot-调用-cmd-命令"><a class="markdownIt-Anchor" href="#在spring-boot-调用-cmd-命令"></a> 在spring boot 调用 cmd 命令</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(AreaUtil.camelName(<span class="string">&quot;ioaName&quot;</span>));</span><br><span class="line">Runtime runtime = Runtime.getRuntime();</span><br><span class="line">Process p = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//此处执行的是ipconfig命令，可以换成任何cmd 里的命令。</span></span><br><span class="line">    p = runtime.exec(<span class="string">&quot;cmd /c ipconfig /all&quot;</span>);</span><br><span class="line">    System.out.println(AreaUtil.camelName(<span class="string">&quot;ioaName&quot;</span>));</span><br><span class="line">    BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(p.getInputStream(), <span class="string">&quot;GBK&quot;</span>));</span><br><span class="line">    String line = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        System.out.println(line + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">        p.destroy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;do soming&quot;</span> + Calendar.getInstance().getTime());</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> cmd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> mybatis-plus日志控制</title>
      <link href="/2020/07/08/mybatis-plus%E6%97%A5%E5%BF%97%E6%8E%A7%E5%88%B6/"/>
      <url>/2020/07/08/mybatis-plus%E6%97%A5%E5%BF%97%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="mybatis-plus日志控制"><a class="markdownIt-Anchor" href="#mybatis-plus日志控制"></a> mybatis-plus日志控制</h1><h2 id="开启日志"><a class="markdownIt-Anchor" href="#开启日志"></a> 开启日志</h2><p>yml中配置中添加打印SQL配置：</p><p>在 <strong>application.yml</strong> 中 <strong>mybatis-plus</strong>下的 ** configuration:**下添加一行打印sql配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>添加mybatis-plus后整体配置为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus:</span><br><span class="line">  type-aliases-package: com.sc.iot</span><br><span class="line">  type-aliases-super-type: java.lang.Object</span><br><span class="line">  configuration:</span><br><span class="line">    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</span><br><span class="line">    map-underscore-to-camel-case: true</span><br><span class="line">    cache-enabled: true</span><br><span class="line">    lazy-loading-enabled: true</span><br><span class="line">    multiple-result-sets-enabled: true</span><br><span class="line">    use-generated-keys: true</span><br><span class="line">    default-statement-timeout: 60</span><br><span class="line">    default-fetch-size: 100</span><br></pre></td></tr></table></figure><h1 id="日志生成路径"><a class="markdownIt-Anchor" href="#日志生成路径"></a> 日志生成路径</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">logging.path=/Users/jackie/workspace/rome/ </span><br><span class="line">logging.file=springbootdemo.log</span><br></pre></td></tr></table></figure><ul><li>logging.path</li></ul><p>该属性用来配置日志文件的路径</p><ul><li>logging.file</li></ul><p>该属性用来配置日志文件名，如果该属性不配置，默认文件名为spring.log<br />重启项目后可以就可以看见 log文件了<br /><img src= "/img/loading.gif" data-lazy-src="http://images.zhuoke.xyz/5f042b8a3ca27.png" alt="" /></p>]]></content>
      
      
      
        <tags>
            
            <tag> MybatisPlus </tag>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云使用宝塔面板部署Hexo</title>
      <link href="/2020/07/08/%E9%98%BF%E9%87%8C%E4%BA%91%E4%BD%BF%E7%94%A8%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF%E9%83%A8%E7%BD%B2Hexo/"/>
      <url>/2020/07/08/%E9%98%BF%E9%87%8C%E4%BA%91%E4%BD%BF%E7%94%A8%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF%E9%83%A8%E7%BD%B2Hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="阿里云使用宝塔面板部署hexo"><a class="markdownIt-Anchor" href="#阿里云使用宝塔面板部署hexo"></a> 阿里云使用宝塔面板部署Hexo</h1><p>先前一直只是简单的 用nginx加git部署hexo，但是由于nginx是在安装zabbix时一块儿安装的，nginx找不到安装路径，于是打算从新在阿里云上安装宝塔，再通过宝塔安装 nginx，部署hexo。</p><h2 id="安装宝塔"><a class="markdownIt-Anchor" href="#安装宝塔"></a> 安装宝塔</h2><p>一行命令安装宝塔（真香）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh</span><br></pre></td></tr></table></figure><p>输入y，并回车。接下来便是等待宝塔面板进行安装。</p><p>安装后会显示自动生成的账号密码：类似如下</p><p><img src= "/img/loading.gif" data-lazy-src="http://images.zhuoke.xyz/20190802173406483.png" alt="宝塔安装成功界面" /></p><!--记得阿里云放行安全组 8888 80 两个端口--><p>安装完后登录宝塔，首次登陆会提示我们安装环境，我们勾选左侧包含Nginx的即可。其他的也可以顺带安装好mysql与php。</p><h2 id="git部署"><a class="markdownIt-Anchor" href="#git部署"></a> git部署</h2><p>我们在home文件夹下</p><h3 id="新建两个文件夹githexo"><a class="markdownIt-Anchor" href="#新建两个文件夹githexo"></a> 新建两个文件夹git，hexo</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd ..   //这里是因为默认执行目录是root，需要返回根目录</span><br><span class="line">cd home</span><br><span class="line">mkdir -p git</span><br><span class="line">mkdir -p hexo</span><br><span class="line">cd git</span><br><span class="line">git init --bare hexoBlog.git</span><br></pre></td></tr></table></figure><p>此时显示一行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Initialized empty Git repository in /home/hexoBlog.git/</span><br></pre></td></tr></table></figure><p>代表我们的git储存库已经创建成功。</p><p>然后 在目录 <code>/home/git/hexoBlog.git/hooks</code>下</p><h3 id="新建文件post-receive"><a class="markdownIt-Anchor" href="#新建文件post-receive"></a> 新建文件post-receive</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /home/git/hexoBlog.git/hooks  </span><br><span class="line">vim post-receive</span><br></pre></td></tr></table></figure><p>写入以下代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">git --work-tree=/home/hexo --git-dir=/home/git/hexoBlog.git checkout -f</span><br></pre></td></tr></table></figure><p>给post-receive权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /home/git/hexoBlog.git/hooks/post-receive</span><br></pre></td></tr></table></figure><h2 id="配置nginx"><a class="markdownIt-Anchor" href="#配置nginx"></a> 配置Nginx</h2><p>宝塔面板默认的nginx配置文件在/www/server/nginx/conf下这里我们通过 include 的方式导入博客 ；</p><p>在vhost文件夹下</p><h3 id="新建文件blogconf"><a class="markdownIt-Anchor" href="#新建文件blogconf"></a> 新建文件blog.conf</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim blog.conf</span><br></pre></td></tr></table></figure><p>文件内容为</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line"><span class="attribute">listen</span>    <span class="number">80</span>;</span><br><span class="line"><span class="attribute">root</span> /home/hexo;<span class="comment">#这里是博客路径</span></span><br><span class="line"><span class="attribute">server_name</span> zhuoke.xyz;<span class="comment"># 域名或ip</span></span><br><span class="line"><span class="attribute">location</span> /&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="修改nginxconf"><a class="markdownIt-Anchor" href="#修改nginxconf"></a> 修改nginx.conf</h3><p>在http下使用include添加刚才的blog.conf文件；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include /www/server/nginx/conf/vhost/*.conf;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="http://images.zhuoke.xyz/image-20200708214658941.png" alt="image-20200708214658941" /></p><h3 id="重启nginx服务"><a class="markdownIt-Anchor" href="#重启nginx服务"></a> 重启Nginx服务</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx restart</span><br></pre></td></tr></table></figure><h2 id="本地hexo配置"><a class="markdownIt-Anchor" href="#本地hexo配置"></a> 本地Hexo配置</h2><p>按照这个格式配置，如果你只推送到aliyun就配置那一行就行了，推送到多个平台务必按照以下格式进行填写（注意缩进）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">      <span class="attr">github:</span> <span class="string">git@github.com:HowarZheng/howarzheng.github.io.git,master</span></span><br><span class="line">      <span class="attr">coding:</span> <span class="string">https://git.dev.tencent.com/xigzheng/xigzheng.git,master</span></span><br><span class="line">      <span class="comment">#gitee: https://gitee.com/howarzheng_001/howarzheng_001.git,master</span></span><br><span class="line">      <span class="attr">aliyun:</span> <span class="string">root@120.55.161.99:/home/git/hexoBlog</span></span><br></pre></td></tr></table></figure><p>然后本地运行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>后输入密码即可将本地的文件推到阿里云了</p><h2 id="git报错"><a class="markdownIt-Anchor" href="#git报错"></a> git报错</h2><p>由于阿里云初始化了系统磁盘，所以git本地在推送时 会出现一个报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!   </span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="http://images.zhuoke.xyz/image-20200708105156654.png" alt="WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED" /></p><h3 id="出现原因"><a class="markdownIt-Anchor" href="#出现原因"></a> 出现原因</h3><p>更换系统后，需要重新匹配远程服务器信息。</p><h3 id="解决方案"><a class="markdownIt-Anchor" href="#解决方案"></a> 解决方案</h3><p>把**/c/Users/Daemon/.ssh/known_hosts** 文件中(服务器)地址ip的公钥删除，再次输入密码推送就可以了。</p><p><img src= "/img/loading.gif" data-lazy-src="http://images.zhuoke.xyz/image-20200708105431408.png" alt="推送成功图片" /></p><h2 id="服务器更换端口"><a class="markdownIt-Anchor" href="#服务器更换端口"></a> 服务器更换端口</h2><p>config中 git url 改为</p><p><code>site: ssh://root@8.129.84.9:520/home/git/hexoBlog</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 宝塔 </tag>
            
            <tag> 阿里云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注解@Scheduled的定时任务配置</title>
      <link href="/2020/07/01/%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3@Scheduled%E7%9A%84%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/07/01/%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3@Scheduled%E7%9A%84%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="注解scheduled的定时任务配置"><a class="markdownIt-Anchor" href="#注解scheduled的定时任务配置"></a> 注解@Scheduled的定时任务配置</h1><p>在SpringBoot为我们内置了@Scheduled定时任务，添加相应的注解即可开启定时任务。</p><h2 id="在入口程序类添加注解enablescheduling开启功能自动扫描"><a class="markdownIt-Anchor" href="#在入口程序类添加注解enablescheduling开启功能自动扫描"></a> 在入口程序类添加注解@EnableScheduling开启功能自动扫描</h2><p><img src= "/img/loading.gif" data-lazy-src="http://172.16.99.11:25015/server/../Public/Uploads/2020-06-17/5ee9d66b33806.png" alt="" /></p><h2 id="新建一个任务类"><a class="markdownIt-Anchor" href="#新建一个任务类"></a> 新建一个任务类</h2><ul><li>要在任务的类上写@Component</li><li>要在任务方法上写@Scheduled</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public class Jobs &#123;</span><br><span class="line">    //表示方法执行完成后5秒</span><br><span class="line">    @Scheduled(fixedDelay = 5000)</span><br><span class="line">    public void fixedDelayJob() throws InterruptedException &#123;</span><br><span class="line">        System.out.println(&quot;fixedDelay 每隔5秒&quot; + new Date());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //表示每隔3秒</span><br><span class="line">    @Scheduled(fixedRate = 3000)</span><br><span class="line">    public void fixedRateJob() &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;fixedRate 每隔3秒&quot; + new Date());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //表示每天8时30分0秒执行</span><br><span class="line">    @Scheduled(cron = &quot;0 0,30 0,8 ? * ? &quot;)</span><br><span class="line">    public void cronJob() &#123;</span><br><span class="line">        System.out.println(new Date() + &quot; ...&gt;&gt;cron....&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设置定时任务时间间隔的三种方式"><a class="markdownIt-Anchor" href="#设置定时任务时间间隔的三种方式"></a> 设置定时任务时间间隔的三种方式</h2><h3 id="fixeddelay"><a class="markdownIt-Anchor" href="#fixeddelay"></a> fixedDelay</h3><p>表示定时任务运行结束后才开始计时</p><h3 id="fixedrate"><a class="markdownIt-Anchor" href="#fixedrate"></a> fixedRate</h3><p>与任务运行时长无关</p><h3 id="cron时间表达式"><a class="markdownIt-Anchor" href="#cron时间表达式"></a> cron时间表达式</h3><p>设置每天或每小时每分钟等时间间隔来执行<br />cron表达式语法<br /><code>[秒] [分] [小时] [日] [月] [周] [年]</code><br />cron一共有7位，但是最后一位是年，可以留空，所以我们可以写6位：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* 第一位，表示秒，取值0-59</span><br><span class="line">* 第二位，表示分，取值0-59</span><br><span class="line">* 第三位，表示小时，取值0-23</span><br><span class="line">* 第四位，日期天/日，取值1-31</span><br><span class="line">* 第五位，日期月份，取值1-12</span><br><span class="line">* 第六位，星期，取值1-7，星期一，星期二...，注：不是第1周，第二周的意思</span><br><span class="line">          另外：1表示星期天，2表示星期一。</span><br><span class="line">* 第7为，年份，可以留空，取值1970-2099</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0 */5 * * * ?   每5分钟执行</span><br><span class="line">0 0 3 * * ?     每天3点执行</span><br><span class="line">0 5 3 * * ?     每天3点5分执行</span><br><span class="line">0 5 3 ? * *     每天3点5分执行，与上面作用相同</span><br><span class="line">0 5/10 3 * * ?  每天3点的 5分，15分，25分，35分，45分，55分这几个时间点执行</span><br><span class="line">0 10 3 ? * 1    每周星期天，3点10分 执行，注：1表示星期天    </span><br><span class="line">0 10 3 ? * 1#3  每个月的第三个星期，星期天 执行，#号只能出现在星期的位置</span><br></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/p/9d18039c0f08" title="参考原文">参考原文</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 定时任务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql语句优化</title>
      <link href="/2020/06/27/sql%E8%AF%AD%E5%8F%A5%E4%BC%98%E5%8C%96/"/>
      <url>/2020/06/27/sql%E8%AF%AD%E5%8F%A5%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="单表优化"><a class="markdownIt-Anchor" href="#单表优化"></a> 单表优化</h1><p>将日常工作或平时看到的sql的语句优化汇总 总结。暂时只是 记录了简单的的sql调优，对于数据库单表的分库分表以后有空再总结记录一下吧。</p><h2 id="索引"><a class="markdownIt-Anchor" href="#索引"></a> 索引</h2><ul><li>索引并不是越多越好，要根据查询有针对性的创建，考虑在WHERE和ORDER BY命令上涉及的列建立索引，可根据EXPLAIN来查看是否用了索引还是全表扫描索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。</li><li>值分布很稀少的字段不适合建索引，例如&quot;性别&quot;这种只有两三个值的字段</li><li>字符字段只建前缀索引</li><li>字符字段最好不要做主键</li><li>不用外键，由程序保证约束</li><li>尽量不用UNIQUE，由程序保证约束<br />使用多列索引时主意顺序和查询条件保持一致，同时删除不必要的单列索引</li></ul><h2 id="字段"><a class="markdownIt-Anchor" href="#字段"></a> 字段</h2><ul><li>尽量使用TINYINT、SMALLINT、MEDIUM_INT作为整数类型而非INT，如果非负则加上UNSIGNED<br />VARCHAR的长度只分配真正需要的空间</li><li>使用枚举或整数代替字符串类型</li><li>尽量使用TIMESTAMP而非DATETIME，</li><li>单表不要有太多字段，建议在20以内</li><li>避免使用NULL字段，很难查询优化且占用额外索引空间</li><li>用整型来存IP</li></ul><h2 id="查询sql"><a class="markdownIt-Anchor" href="#查询sql"></a> 查询SQL</h2><h3 id="表名顺序"><a class="markdownIt-Anchor" href="#表名顺序"></a> 表名顺序</h3><p>数据库的解析器按照从右到左的顺序处理FROM子句中的表名，FROM子句中写在最后的表将被最先处理，在FROM子句中包含多个表的情况下,你必须选择记录条数最少的表放在最后，如果有3个以上的表连接查询,那就需要选择那个被其他表所引用的表放在最后。</p><p>例如：查询员工的编号，姓名，工资，工资等级，部门名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select emp.empno,emp.ename,emp.sal,salgrade.grade,dept.dname</span><br><span class="line">from salgrade,dept,emp</span><br><span class="line">where (emp.deptno = dept.deptno) and (emp.sal between salgrade.losal and salgrade.hisal)</span><br></pre></td></tr></table></figure><ul><li>如果三个表是完全无关系的话，将记录和列名最少的表，写在最后，然后依次类推</li><li>如果三个表是有关系的话，将引用最多的表，放在最后，然后依次类推</li></ul><h3 id="where"><a class="markdownIt-Anchor" href="#where"></a> WHERE</h3><h4 id="连接顺序"><a class="markdownIt-Anchor" href="#连接顺序"></a> 连接顺序</h4><p>数据库采用自右而左的顺序解析WHERE子句,根据这个原理,表之间的连接必须写在其他WHERE条件之左,那些可以过滤掉最大数量记录的条件必须写在WHERE子句的之右。</p><p>例如：查询员工的编号，姓名，工资，部门名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select emp.empno,emp.ename,emp.sal,dept.dname</span><br><span class="line">from emp,dept</span><br><span class="line">where (emp.deptno = dept.deptno) and (emp.sal &gt; 1500)</span><br></pre></td></tr></table></figure><h4 id="操作符"><a class="markdownIt-Anchor" href="#操作符"></a> 操作符</h4><p>应尽量避免在 where 子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。</p><h4 id="null-值判断"><a class="markdownIt-Anchor" href="#null-值判断"></a> null 值判断</h4><p>应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> t <span class="keyword">where</span> num <span class="keyword">is</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure><p>可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> t <span class="keyword">where</span> num<span class="operator">=</span><span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="like"><a class="markdownIt-Anchor" href="#like"></a> like</h4><p>下面的查询也将导致全表扫描：<br />select id from t where name like ‘%abc%’<br />若要提高效率，可以考虑全文检索。(mysql的话 没救了 )</p><h4 id="避免使用参数"><a class="markdownIt-Anchor" href="#避免使用参数"></a> 避免使用参数</h4><p>如果在 where 子句中使用参数，也会导致全表扫描。因为SQL只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时；它必须在编译时进行选择。然而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> t <span class="keyword">where</span> num<span class="operator">=</span><span class="variable">@num</span></span><br></pre></td></tr></table></figure><p>可以改为强制查询使用索引：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> t <span class="keyword">with</span>(index(索引名)) <span class="keyword">where</span> num<span class="operator">=</span><span class="variable">@num</span></span><br></pre></td></tr></table></figure><h4 id="避免对字段进行表达式操作"><a class="markdownIt-Anchor" href="#避免对字段进行表达式操作"></a> 避免对字段进行表达式操作</h4><p>应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> t <span class="keyword">where</span> num<span class="operator">/</span><span class="number">2</span><span class="operator">=</span><span class="number">100</span></span><br></pre></td></tr></table></figure><p>应改为:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> t <span class="keyword">where</span> num<span class="operator">=</span><span class="number">100</span><span class="operator">*</span><span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="避免对字段进行函数操作"><a class="markdownIt-Anchor" href="#避免对字段进行函数操作"></a> 避免对字段进行函数操作</h4><p>应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> t <span class="keyword">where</span> <span class="built_in">substring</span>(name,<span class="number">1</span>,<span class="number">3</span>)<span class="operator">=</span><span class="string">&#x27;abc&#x27;</span><span class="comment">--name以abc开头的id</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> t <span class="keyword">where</span> datediff(<span class="keyword">day</span>,createdate,<span class="string">&#x27;2005-11-30&#x27;</span>)<span class="operator">=</span><span class="number">0</span><span class="comment">--&#x27;2005-11-30&#x27;生成的id</span></span><br></pre></td></tr></table></figure><p>应改为:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> t <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;abc%&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> t <span class="keyword">where</span> createdate<span class="operator">&gt;=</span><span class="string">&#x27;2005-11-30&#x27;</span> <span class="keyword">and</span> createdate<span class="operator">&lt;</span><span class="string">&#x27;2005-12-1&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="尽量使用-exists-代替-in"><a class="markdownIt-Anchor" href="#尽量使用-exists-代替-in"></a> 尽量使用 exists 代替 in</h3><p>多时候用 exists 代替 in 是一个好的选择：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> num <span class="keyword">from</span> a <span class="keyword">where</span> num <span class="keyword">in</span>(<span class="keyword">select</span> num <span class="keyword">from</span> b)</span><br></pre></td></tr></table></figure><p>用下面的语句替换：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> num <span class="keyword">from</span> a <span class="keyword">where</span> <span class="keyword">exists</span>(<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> b <span class="keyword">where</span> num<span class="operator">=</span>a.num)</span><br></pre></td></tr></table></figure><h3 id="select"><a class="markdownIt-Anchor" href="#select"></a> SELECT</h3><h4 id="避免使用号"><a class="markdownIt-Anchor" href="#避免使用号"></a> 避免使用*号</h4><p>数据库在解析的过程中,会将*依次转换成所有的列名，这个工作是通过查询数据字典完成的，这意味着将耗费更多的时间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select empno,ename from emp;</span><br></pre></td></tr></table></figure><h4 id="or改写成in"><a class="markdownIt-Anchor" href="#or改写成in"></a> OR改写成IN</h4><p>OR的效率是n级别，IN的效率是log(n)级别，in的个数建议控制在200以内</p><h4 id="in-和-not-in"><a class="markdownIt-Anchor" href="#in-和-not-in"></a> in 和 not in</h4><p>in 和 not in  也要慎用，否则会导致全表扫描，如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> t <span class="keyword">where</span> num <span class="keyword">in</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>对于连续的数值，能用 between 就不要用 in 了：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> t <span class="keyword">where</span> num <span class="keyword">between</span> <span class="number">1</span> <span class="keyword">and</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="尽量使用表变量来代替临时表"><a class="markdownIt-Anchor" href="#尽量使用表变量来代替临时表"></a> 尽量使用表变量来代替临时表。</h3><p>尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）。</p><p>参考网址<br /><a href="https://www.cnblogs.com/Little-Li/p/8031295.html">https://www.cnblogs.com/Little-Li/p/8031295.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot语法技巧</title>
      <link href="/2020/06/03/SpringBoot%E8%AF%AD%E6%B3%95%E6%8A%80%E5%B7%A7/"/>
      <url>/2020/06/03/SpringBoot%E8%AF%AD%E6%B3%95%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="controller-接收时间"><a class="markdownIt-Anchor" href="#controller-接收时间"></a> Controller 接收时间</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestParam(value = &quot;date&quot;, required = false)</span><span class="meta">@DateTimeFormat(pattern=&quot;yyyy-MM-dd&quot;)</span> LocalDate date;</span><br></pre></td></tr></table></figure><p>@DateTimeFormat来控制入参，@JsonFormat来控制出参<br />@DateTimeFormat(pattern=“yyyy-MM-dd HH:mm:ss”)<br />@JsonFormat(timezone = “GMT+8”,pattern = “yyyy-MM-dd HH:mm:ss”)</p><p>原文链接：<a href="https://blog.csdn.net/xiangluer/article/details/81913137">https://blog.csdn.net/xiangluer/article/details/81913137</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用反射机制将实体类转Map</title>
      <link href="/2020/06/03/%E5%88%A9%E7%94%A8%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E5%B0%86%E5%AE%9E%E4%BD%93%E7%B1%BB%E8%BD%ACMap/"/>
      <url>/2020/06/03/%E5%88%A9%E7%94%A8%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E5%B0%86%E5%AE%9E%E4%BD%93%E7%B1%BB%E8%BD%ACMap/</url>
      
        <content type="html"><![CDATA[<p>在Controller返回时需要在一个对象中加一个字段属性 ，又不想改动对应的实体类增加属性，于是将对象利用反射机制将实体类转Map再添加kay-value。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String,Object&gt; <span class="title">objectToMap</span><span class="params">(Object object)</span></span>&#123;</span><br><span class="line">    Map&lt;String,Object&gt; result=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">//获得类的的属性名 数组</span></span><br><span class="line">    Field[]fields=object.getClass().getDeclaredFields();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//使用Modifier 判断过滤私有属性</span></span><br><span class="line">            <span class="keyword">if</span> (Modifier.isPrivate(field.getModifiers())) &#123;</span><br><span class="line">                String name = <span class="keyword">new</span> String(field.getName());</span><br><span class="line">                result.put(name, field.get(object));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zabbix</title>
      <link href="/2020/05/27/Zabbix/"/>
      <url>/2020/05/27/Zabbix/</url>
      
        <content type="html"><![CDATA[<h2 id="linux下zabbix服务端的安装配置"><a class="markdownIt-Anchor" href="#linux下zabbix服务端的安装配置"></a> Linux下Zabbix服务端的安装配置</h2><h3 id="关闭selinux和firewall"><a class="markdownIt-Anchor" href="#关闭selinux和firewall"></a> 关闭selinux和firewall</h3><h4 id="检测selinux是否关闭"><a class="markdownIt-Anchor" href="#检测selinux是否关闭"></a> 检测selinux是否关闭</h4><p>[root@localhost ~]# getenforce</p><p>Disabled                                     #Disabled 为关闭</p><h4 id="临时关闭"><a class="markdownIt-Anchor" href="#临时关闭"></a> 临时关闭</h4><p>[root@localhost ~]# <code>setenforce 0</code>  #设置SELinux 成为enforcing模式</p><h4 id="永久关闭"><a class="markdownIt-Anchor" href="#永久关闭"></a> 永久关闭</h4><p>[root@localhost ~]# <code>vi /etc/selinux/config：</code></p><p>将SELINUX=enforcing改为SELINUX=disabled</p><p>设置后需要重启才能生效</p><h3 id="查看默认防火墙状态"><a class="markdownIt-Anchor" href="#查看默认防火墙状态"></a> 查看默认防火墙状态</h3><p>[root@localhost ~]# <code>firewall-cmd --state</code></p><p>not running           #关闭后显示not running，开启后显示running</p><h4 id="停止firewall"><a class="markdownIt-Anchor" href="#停止firewall"></a> 停止firewall</h4><p>[root@localhost ~]#<code>systemctl stop firewalld.service</code></p><h4 id="禁止firewall开机启动"><a class="markdownIt-Anchor" href="#禁止firewall开机启动"></a> 禁止firewall开机启动</h4><p>[root@localhost ~]#<code>systemctl disable firewalld.service</code></p><h3 id="zabbix34程序安装"><a class="markdownIt-Anchor" href="#zabbix34程序安装"></a> Zabbix3.4程序安装</h3><h4 id="配置zabbix的yum源重点是这里多次尝试从官方下载的文件在yum安装时会失败看网上分析是被墙了"><a class="markdownIt-Anchor" href="#配置zabbix的yum源重点是这里多次尝试从官方下载的文件在yum安装时会失败看网上分析是被墙了"></a> 配置zabbix的yum源（重点是这里，多次尝试从官方下载的文件，在yum安装时会失败，看网上分析是被墙了）</h4><p>[root@localhost ~]# <code>rpm -ivh http://mirrors.aliyun.com/zabbix/zabbix/3.0/rhel/7/x86_64/zabbix-release-3.0-1.el7.noarch.rpm</code></p><p><code>vim /etc/yum.repos.d/zabbix.repo</code></p><p>请将zabbix.repo的内容清空，并将如下内容直接复制进去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[zabbix]</span><br><span class="line"></span><br><span class="line">name=Zabbix Official Repository - $basearch</span><br><span class="line"></span><br><span class="line">baseurl=http://mirrors.aliyun.com/zabbix/zabbix/3.0/rhel/7/$basearch/</span><br><span class="line"></span><br><span class="line">enabled=1</span><br><span class="line"></span><br><span class="line">gpgcheck=1</span><br><span class="line"></span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-ZABBIX</span><br><span class="line"></span><br><span class="line">[zabbix-non-supported]</span><br><span class="line"></span><br><span class="line">name=Zabbix Official Repository non-supported - $basearch</span><br><span class="line"></span><br><span class="line">baseurl=http://mirrors.aliyun.com/zabbix/non-supported/rhel/7/$basearch/</span><br><span class="line"></span><br><span class="line">enabled=1</span><br><span class="line"></span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-ZABBIX</span><br><span class="line"></span><br><span class="line">gpgcheck=1</span><br></pre></td></tr></table></figure><h4 id="安装zabbix程序包安装mysql-zabbxi-agent"><a class="markdownIt-Anchor" href="#安装zabbix程序包安装mysql-zabbxi-agent"></a> 安装zabbix程序包，安装mysql、zabbxi-agent</h4><p>[root@localhost ~]# <code>yum install -y zabbix-server-mysql zabbix-web-mysql zabbix-agent mariadb-server</code></p><h4 id="启动mariadb并设置开机启动创建数据库实例授权"><a class="markdownIt-Anchor" href="#启动mariadb并设置开机启动创建数据库实例授权"></a> 启动mariadb并设置开机启动，创建数据库实例，授权</h4><p>[root@localhost ~]# <code>systemctl start mariadb</code>     #启动mariadb</p><p>[root@localhost ~]# <code>systemctl enable mariadb</code>  #设置开机启动</p><p>[root@localhost ~]#<code>mysql</code>                         #登入数据库</p><p>MariaDB [(none)]&gt;<code>create database zabbix character set utf8 collate utf8_bin;</code>  #创建数据库实例</p><p>Query OK, 1 row affected (0.00 sec)</p><p>MariaDB [(none)]&gt; <code>grant all privileges on zabbix.* to zabbix@'%' identified by 'zabbix';</code>  #授权所有主机访问数据库实例zabbix，用户名/密码：zabbix/zabbix</p><p>Query OK, 0 rows affected (0.00 sec)</p><p>MariaDB [(none)]&gt; <code>grant all privileges on zabbix.* to zabbix@localhost identified by 'zabbix';</code> #授权localhost主机名访问数据库实例zabbix，用户名/密码：zabbix/zabbix</p><p>Query OK, 0 rows affected (0.00 sec)</p><p>MariaDB [(none)]&gt; <code>grant all privileges on zabbix.* to zabbix@localhost.localdomain identified by 'zabbix';</code> #授权localhost.localdomain主机访问数据库实例zabbix，用户名/密码：zabbix/zabbix</p><p>Query OK, 0 rows affected (0.00 sec)</p><p>导入初始模式和数据</p><p>[root@localhost ~]#    <code>cd /usr/share/doc/zabbix-server</code> 后面使用Tab键补全              #进入create.sql.gz所在目录 此处路径会存在问题，因为zabbix的版本已经更新了。</p><p>[root@localhost zabbix-server-mysql-3.4.4]# <code>zcat create.sql.gz |mysql -uroot zabbix</code>  #导入初始模式</p><h4 id="启动zabbix-server服务"><a class="markdownIt-Anchor" href="#启动zabbix-server服务"></a> 启动zabbix-server服务</h4><h5 id="配置zabbix-server的配置文件zabbix_serverconf"><a class="markdownIt-Anchor" href="#配置zabbix-server的配置文件zabbix_serverconf"></a> 配置zabbix-server的配置文件zabbix_server.conf</h5><p>[root@localhost zabbix-server-mysql-3.4.4]# <code>vi /etc/zabbix/zabbix_server.conf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DBHost=localhost</span><br><span class="line"></span><br><span class="line">DBName=zabbix</span><br><span class="line"></span><br><span class="line">DBUser=zabbix</span><br><span class="line"></span><br><span class="line">DBPassword=zabbix</span><br></pre></td></tr></table></figure><h5 id="启动zabbix-server服务-2"><a class="markdownIt-Anchor" href="#启动zabbix-server服务-2"></a> 启动zabbix-server服务</h5><p>[root@localhost zabbix-server-mysql-3.4.4]# <code>systemctl start zabbix-server</code>         #启动zabbix-server服务</p><p>[root@localhost zabbix-server-mysql-3.4.4]# <code>systemctl enable zabbix-server</code>     #设置zabbix-server服务开机自启动</p><h5 id="编辑apache的配置文件消注释设置正确的时区"><a class="markdownIt-Anchor" href="#编辑apache的配置文件消注释设置正确的时区"></a> 编辑Apache的配置文件，消注释设置正确的时区</h5><p>[root@localhost zabbix-server-mysql-3.4.4]# <code>vi /etc/httpd/conf.d/zabbix.conf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">php_value max_execution_time 300</span><br><span class="line"></span><br><span class="line">php_value memory_limit 128M</span><br><span class="line"></span><br><span class="line">php_value post_max_size 16M</span><br><span class="line"></span><br><span class="line">php_value upload_max_filesize 2M</span><br><span class="line"></span><br><span class="line">php_value max_input_time 300</span><br><span class="line"></span><br><span class="line">php_value always_populate_raw_post_data -1</span><br><span class="line"></span><br><span class="line">php_value date.timezone Asia/Shanghai</span><br></pre></td></tr></table></figure><p>启动httpd服务 ，设置开机启动httpd服务</p><p>[root@localhost ~]# <code>systemctl start httpd</code>       #启动httpd服务</p><p>[root@localhost ~]# <code>systemctl enable httpd</code>   #设置开机启动httpd服务</p><h3 id="启动zabbix-agent并设置开机自启动"><a class="markdownIt-Anchor" href="#启动zabbix-agent并设置开机自启动"></a> 启动zabbix-agent并设置开机自启动</h3><p>[root@localhost ~]# <code>systemctl start zabbix-agent</code>         # 启动zabbix-agent服务</p><p>[root@localhost ~]# <code>systemctl enable zabbix-agent</code>       # 设置zabbix-agent服务开机自启动</p><h3 id="zabbix-web网页安装"><a class="markdownIt-Anchor" href="#zabbix-web网页安装"></a> Zabbix Web网页安装</h3><ul><li><p>在浏览器输入地址http://服务器ip/zabbix/setup.php，出现欢迎界面，点击下一步</p></li><li><p>出现必要条件检测界面，正常都是OK，点击下一步</p></li><li><p>配置DB连接，与zabbix_server.conf文件中主机、数据库名称、用户名、密码保持一致，点击下一步<br /><img src= "/img/loading.gif" data-lazy-src="https://img01.sogoucdn.com/app/a/100520146/166f9acfc16ae93aa3610b8055b4d09c" alt="UTOOLS1590563756971.png" /></p></li><li><p>zabbix服务器详细信息，点击下一步</p></li><li><p>安装前汇总，检查信息无误，点击下一步安装</p></li><li><p>安装成功 配置文件目录  Configuration file “/etc/zabbix/web/zabbix.conf.php” created.</p></li><li><p>zabbix网页登录</p><p>在浏览器输入http://zabbix服务器ip/zabbix/index.php，输入管理员用户名Admin(区分大小写)，默认密码zabbix，点击登入即可。<br /><img src= "/img/loading.gif" data-lazy-src="https://img03.sogoucdn.com/app/a/100520146/717a18651ade170517a1c4f9e6bc64f6" alt="UTOOLS1590563863434.png" /></p></li></ul><h2 id="windows下zabbix客户端配置"><a class="markdownIt-Anchor" href="#windows下zabbix客户端配置"></a> Windows下Zabbix客户端配置</h2><h3 id="安装前注意事项"><a class="markdownIt-Anchor" href="#安装前注意事项"></a> 安装前注意事项</h3><p>安装前请关闭 防火墙 或者修改防火墙规则 允许访问10050端口<br />尽量关闭360</p><h3 id="下载agent"><a class="markdownIt-Anchor" href="#下载agent"></a> 下载agent</h3><p>注意：下载的agent的版本应该尽量与server端的版本一致 （版本为：Zabbix 4.4.6）<br /><a href="https://www.yuque.com/attachments/yuque/0/2020/zip/1342721/1590550547641-90f64058-47c3-4b7a-9701-ee8729400554.zip?_lake_card=%7B%22uid%22%3A%221590550546218-0%22%2C%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2020%2Fzip%2F1342721%2F1590550547641-90f64058-47c3-4b7a-9701-ee8729400554.zip%22%2C%22name%22%3A%22zabbix_agent-4.4.6-windows-amd64.zip%22%2C%22size%22%3A844098%2C%22type%22%3A%22application%2Fx-zip-compressed%22%2C%22ext%22%3A%22zip%22%2C%22progress%22%3A%7B%22percent%22%3A99%7D%2C%22status%22%3A%22done%22%2C%22percent%22%3A0%2C%22id%22%3A%221gxiu%22%2C%22card%22%3A%22file%22%7D">4.46安装包</a></p><p><a href="https://www.zabbix.com/cn/download_agents#tab:40LTS" title="安装包下载网址">agent官网压缩包下载网址</a></p><p>在c盘根目录下创建文件夹 zabbix<br />将agent软件包解压到zabbix文件夹内<br />下载的软件包解压后有两个文件夹，分别是/bin,/conf<br /><img src= "/img/loading.gif" data-lazy-src="https://img01.sogoucdn.com/app/a/100520146/277e6af13053856f6bb97f4169b03e52" alt="1590463688(1).jpg" /></p><h3 id="修改配置"><a class="markdownIt-Anchor" href="#修改配置"></a> 修改配置</h3><p>修改配置文件中的内容<br />配置文件位置：C:\zabbix\conf\zabbix_agentd.win.conf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LogFile=c:\zabbix\zabbix_agentd.log    //日志存放位置</span><br><span class="line">Server=172.16.33.***         //zabbix_server主机IP地址</span><br><span class="line">ServerActive=172.16.33.***       //zabbix_server主机IP地址</span><br><span class="line">Hostname=172.16.33.***         //被监控主机名，自身主机名</span><br></pre></td></tr></table></figure><h2 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h2><p>用管理员权限打开cmd<br />切换路径到C:\zabbix\bin</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd c:/zabbix/bin</span><br></pre></td></tr></table></figure><p>指定配置文件安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zabbix_agentd.exe -i -c C:\zabbix\conf\zabbix_agentd.conf</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zabbix_agentd.exe -s -c C:\zabbix\conf\zabbix_agentd.conf</span><br></pre></td></tr></table></figure><p>安装运行成功截图<br /><img src= "/img/loading.gif" data-lazy-src="https://img04.sogoucdn.com/app/a/100520146/6efbfc02b589f49d56d296e96cfbc34f" alt="1590464393(1).jpg" /><br />此时可在任务管理器中查看到zabbix_agent服务，正在运行<br /><img src= "/img/loading.gif" data-lazy-src="https://img02.sogoucdn.com/app/a/100520146/032c5edcb53c04c909d70cd1e27a44bb" alt="1590464479(1).jpg" /></p><h2 id="agent卸载"><a class="markdownIt-Anchor" href="#agent卸载"></a> agent卸载</h2><p>在bin目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zabbix_agentd.exe -d -c C:\zabbix\conf\zabbix_agentd.conf</span><br></pre></td></tr></table></figure><p>删除服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc delete &quot;Zabbix Agent&quot;</span><br></pre></td></tr></table></figure><h2 id="linux下-zabbix-客户端配置"><a class="markdownIt-Anchor" href="#linux下-zabbix-客户端配置"></a> Linux下 zabbix 客户端配置</h2><h3 id="配置zabbix的yum源"><a class="markdownIt-Anchor" href="#配置zabbix的yum源"></a> 配置zabbix的yum源</h3><ul><li>使用 vim命令 打开 nexus3-145-centos7.repo 文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/yum.repos.d/nexus3-145-centos7.repo</span><br></pre></td></tr></table></figure><ul><li>在末尾添加以下Zabbix镜像仓库配置</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 145私有Zabbix镜像仓库</span><br><span class="line">[zabbix]</span><br><span class="line">name=Zabbix Official Repository - $basearch</span><br><span class="line">baseurl=http://172.16.96.145:8665/repository/yum-104/zabbix/zabbix/4.4/rhel/$releasever/$basearch/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure><p><a href="http://172.16.99.11:25015/web/#/7?page_id=159" title="详细文档">配置公司私有源详细文档</a></p><h4 id="安装zabbix-agent"><a class="markdownIt-Anchor" href="#安装zabbix-agent"></a> 安装zabbix-agent</h4><pre><code> yum -y install zabbix-agent</code></pre><h4 id="修改agent的配置文件"><a class="markdownIt-Anchor" href="#修改agent的配置文件"></a> 修改agent的配置文件</h4><pre><code>vim /etc/zabbix/zabbix_agentd.conf</code></pre><p>修改配置文件中的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LogFile=c:\zabbix\zabbix_agentd.log    //日志存放位置</span><br><span class="line">Server=172.16.33.***         //zabbix_server主机IP地址</span><br><span class="line">ServerActive=172.16.33.***       //zabbix_server主机IP地址</span><br><span class="line">Hostname=172.16.33.***        //被监控主机名，自身主机名</span><br></pre></td></tr></table></figure><p>####客户端相关命令</p><p>#####自启动<br />systemctl enable zabbix-agent.service<br />#####启动命令<br />systemctl start zabbix-agent.service<br />#####停止命令<br />systemctl stop zabbix-agent.service</p><h3 id="通过10050端口查看客户端是否运行"><a class="markdownIt-Anchor" href="#通过10050端口查看客户端是否运行"></a> 通过10050端口查看客户端是否运行</h3><pre><code>netstat -tunple | grep 10050</code></pre><p><img src= "/img/loading.gif" data-lazy-src="https://img02.sogoucdn.com/app/a/100520146/ef172a1f1fd5b65fbc2ffb1cb87be452" alt="UTOOLS1590564093632.png" /></p><p><a href="https://blog.csdn.net/wc1695040842/article/details/86811071">参考地址: CentOS7安装zabbix-agent</a></p><h4 id="卸载zabbix-agent"><a class="markdownIt-Anchor" href="#卸载zabbix-agent"></a> 卸载zabbix-agent</h4><pre><code> yum -y remove zabbix-agent</code></pre><p>作者：悠悠之生<br />链接：<a href="https://www.jianshu.com/p/75b9048bed25">https://www.jianshu.com/p/75b9048bed25</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>easypoi导出Word</title>
      <link href="/2020/05/13/easypoi%E5%AF%BC%E5%87%BAWord/"/>
      <url>/2020/05/13/easypoi%E5%AF%BC%E5%87%BAWord/</url>
      
        <content type="html"><![CDATA[<h2 id="导入依赖"><a class="markdownIt-Anchor" href="#导入依赖"></a> 导入依赖</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;cn.afterturn&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;easypoi-base&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;3.0.3&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;cn.afterturn&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;easypoi-web&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;3.0.3&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;cn.afterturn&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;easypoi-annotation&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;3.0.3&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="模板"><a class="markdownIt-Anchor" href="#模板"></a> 模板</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;image&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img04.sogoucdn.com/app/a/100520146/055d73623cafb1e74480b36c37c411a8" alt="UTOOLS1589359638024.png" /><br />路径：file/exceltemplate</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><h3 id="u"><a class="markdownIt-Anchor" href="#u"></a> U</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 导出word</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;第一步生成替换后的word文件，只支持docx&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;第二步下载生成的文件&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;第三步删除生成的临时文件&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * 模版变量中变量格式：&#123;&#123;foo&#125;&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> templatePath word模板地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> temDir 生成临时文件存放地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params 替换的参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request HttpServletRequest</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response HttpServletResponse</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exportWord</span><span class="params">(String templatePath, String temDir, String fileName, Map&lt;String, Object&gt; params, HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        Assert.notNull(templatePath,<span class="string">&quot;模板路径不能为空&quot;</span>);</span><br><span class="line">        Assert.notNull(temDir,<span class="string">&quot;临时文件路径不能为空&quot;</span>);</span><br><span class="line">        Assert.notNull(fileName,<span class="string">&quot;导出文件名不能为空&quot;</span>);</span><br><span class="line">        Assert.isTrue(fileName.endsWith(<span class="string">&quot;.docx&quot;</span>),<span class="string">&quot;word导出请使用docx格式&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!temDir.endsWith(<span class="string">&quot;/&quot;</span>))&#123;</span><br><span class="line">            temDir = temDir + File.separator;</span><br><span class="line">        &#125;</span><br><span class="line">        File temdir = <span class="keyword">new</span> File(templatePath);</span><br><span class="line">        <span class="keyword">if</span> (!temdir.exists()) &#123;</span><br><span class="line">            System.out.println(temdir);</span><br><span class="line">        &#125;</span><br><span class="line">        File dir = <span class="keyword">new</span> File(temDir);</span><br><span class="line">        <span class="keyword">if</span> (!dir.exists()) &#123;</span><br><span class="line">            dir.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String userAgent = request.getHeader(<span class="string">&quot;user-agent&quot;</span>).toLowerCase();</span><br><span class="line">            <span class="keyword">if</span> (userAgent.contains(<span class="string">&quot;msie&quot;</span>) || userAgent.contains(<span class="string">&quot;like gecko&quot;</span>)) &#123;</span><br><span class="line">                fileName = URLEncoder.encode(fileName, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                fileName = <span class="keyword">new</span> String(fileName.getBytes(<span class="string">&quot;utf-8&quot;</span>), <span class="string">&quot;ISO-8859-1&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            XWPFDocument doc = WordExportUtil.exportWord07(templatePath, params);</span><br><span class="line">            String tmpPath = temDir + fileName;</span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(tmpPath);</span><br><span class="line">            doc.write(fos);</span><br><span class="line">            <span class="comment">// 设置强制下载不打开</span></span><br><span class="line">            response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename=&quot;</span> + <span class="string">&quot;strDate&quot;</span> + <span class="string">&quot;.docx&quot;</span>);</span><br><span class="line"></span><br><span class="line">            response.setContentType(<span class="string">&quot;application/force-download&quot;</span>);</span><br><span class="line">            <span class="comment">// 设置文件名</span></span><br><span class="line"><span class="comment">//            response.addHeader(&quot;Content-Disposition&quot;, &quot;attachment;fileName=&quot; + fileName);</span></span><br><span class="line">            OutputStream out = response.getOutputStream();</span><br><span class="line">            doc.write(out);</span><br><span class="line">            out.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">//            delAllFile(temDir);//这一步看具体需求，要不要删</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="调用"><a class="markdownIt-Anchor" href="#调用"></a> 调用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@RequestMapping(&quot;export&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">export</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//2.获取静态资源：word模板和默认头像</span></span><br><span class="line">        String templatePath =<span class="keyword">new</span> File(<span class="string">&quot;&quot;</span>).getAbsolutePath()+<span class="string">&quot;/file/word&quot;</span>;</span><br><span class="line">        log.info(<span class="string">&quot;静态资源路径：&quot;</span>+templatePath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.获取图片Base64转码</span></span><br><span class="line">        <span class="comment">//imagePath为图片所在的目录和图片名</span></span><br><span class="line">        String imagePath = templatePath + <span class="string">&quot;/6597b68d127104737849f8272efce9cf.jpg&quot;</span>;</span><br><span class="line">        <span class="comment">//image为转换后的图片Base64字符串</span></span><br><span class="line"><span class="comment">//        String imageurl = Base64ByLocalUtil.ImageToBase64ByLocal(imagePath);</span></span><br><span class="line">        ImageEntity image = <span class="keyword">new</span> ImageEntity();</span><br><span class="line">        image.setHeight(<span class="number">1000</span>);</span><br><span class="line">        image.setWidth(<span class="number">2500</span>);</span><br><span class="line">        image.setUrl(imagePath);</span><br><span class="line"></span><br><span class="line">        Map&lt;String,Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        params.put(<span class="string">&quot;image&quot;</span>,image);</span><br><span class="line">        <span class="comment">//这里是我说的一行代码</span></span><br><span class="line">        SciTestController.exportWord(<span class="keyword">new</span> File(<span class="string">&quot;&quot;</span>).getAbsolutePath()+reroute+<span class="string">&quot;exceltemplate&quot;</span>+File.separator+<span class="string">&quot;export.docx&quot;</span>,<span class="string">&quot;D:/test&quot;</span>,<span class="string">&quot;aaa.docx&quot;</span>,params,request,response);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Centos7安装npm</title>
      <link href="/2020/05/12/Centos7%E5%AE%89%E8%A3%85npm/"/>
      <url>/2020/05/12/Centos7%E5%AE%89%E8%A3%85npm/</url>
      
        <content type="html"><![CDATA[<h2 id="npm"><a class="markdownIt-Anchor" href="#npm"></a> npm</h2><h3 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h3><ul><li>下载</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://npm.taobao.org/mirrors/node/v10.14.1/node-v10.14.1-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><ul><li>解压重命名</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf  node-v8.0.0-linux-x64.tar.xz</span><br><span class="line">mv node-v8.1.4-linux-x64 node</span><br></pre></td></tr></table></figure><ul><li>配置环境变量</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>根据自己实际目录在文件末尾加入以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#set for nodejs  </span><br><span class="line">export NODE_HOME=/usr/local/node  </span><br><span class="line">export PATH=$NODE_HOME/bin:$PATH</span><br></pre></td></tr></table></figure><p>使配置文件生效并查看是否安装成功</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>可下载源码编译安装，但编译时间较长不推荐</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://npm.taobao.org/mirrors/node/v10.13.0/node-v10.13.0.tar.gz</span><br></pre></td></tr></table></figure><h2 id="一些nom命令"><a class="markdownIt-Anchor" href="#一些nom命令"></a> 一些nom命令</h2><ul><li>安装cnpm</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">cnpm -v</span><br></pre></td></tr></table></figure><ul><li>直接换源<br />单次：<code>npm install --registry=https://registry.npm.taobao.org</code><br />永久： <code>npm config set registry https://registry.npm.taobao.org</code></li><li>查看数据源</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure><ul><li>删除数据源</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm config rm proxy</span><br><span class="line"></span><br><span class="line">npm config rm https-proxy</span><br></pre></td></tr></table></figure><h2 id="pm2-start-appjs"><a class="markdownIt-Anchor" href="#pm2-start-appjs"></a> pm2 start app.js</h2>]]></content>
      
      
      
        <tags>
            
            <tag> Centos7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springcloud之eureka&amp;feign</title>
      <link href="/2020/05/08/springcloud%E4%B9%8Beureka/"/>
      <url>/2020/05/08/springcloud%E4%B9%8Beureka/</url>
      
        <content type="html"><![CDATA[<h2 id="pom"><a class="markdownIt-Anchor" href="#pom"></a> pom</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    &lt;!--        cloud--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">2.1</span><span class="number">.4</span>.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">2.0</span><span class="number">.1</span>.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- cloud 依赖--&gt;</span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;Hoxton.SR1&lt;/version&gt;</span><br><span class="line">            &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">            &lt;scope&gt;<span class="keyword">import</span>&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br></pre></td></tr></table></figure><h2 id="pom-2"><a class="markdownIt-Anchor" href="#pom-2"></a> pom</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: localhost</span><br><span class="line">    preferIpAddress: <span class="keyword">true</span></span><br><span class="line">  client:</span><br><span class="line">    #   服务器端不注册eureka(默认<span class="keyword">true</span>)</span><br><span class="line">#    registerWithEureka: <span class="keyword">true</span></span><br><span class="line">    #   服务器端不需要抓取服务列表(默认<span class="keyword">true</span>)</span><br><span class="line">#    fetchRegistry: <span class="keyword">false</span></span><br><span class="line">    #   注册url(配置之后报错Reached through: #include <span class="string">&quot;navbar.ftl&quot;</span>  [in template <span class="string">&quot;eureka/status.ftl&quot;</span> at line <span class="number">22</span>, column <span class="number">7</span>])</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http:<span class="comment">//$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br><span class="line">      enabled: <span class="keyword">true</span> #需要手动开启</span><br></pre></td></tr></table></figure><p>当主页404加上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  freemarker:</span><br><span class="line">    preferFileSystemAccess: <span class="keyword">false</span></span><br></pre></td></tr></table></figure><h2 id="application"><a class="markdownIt-Anchor" href="#application"></a> Application</h2><p>启动类加上注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br></pre></td></tr></table></figure><h2 id="feignclient"><a class="markdownIt-Anchor" href="#feignclient"></a> FeignClient</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(name=&quot;sc&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ScappFeignClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/sciUserInfo/queryOneById&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function">String <span class="title">findById</span><span class="params">(<span class="meta">@RequestParam(value = &quot;suiId&quot;, required = false)</span> Long suiId)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>contos7部署运行jar包</title>
      <link href="/2020/04/17/contos7%E9%83%A8%E7%BD%B2%E8%BF%90%E8%A1%8Cjar%E5%8C%85/"/>
      <url>/2020/04/17/contos7%E9%83%A8%E7%BD%B2%E8%BF%90%E8%A1%8Cjar%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="安装配置centos7环境"><a class="markdownIt-Anchor" href="#安装配置centos7环境"></a> 安装配置Centos7环境</h1><h2 id="网络配置"><a class="markdownIt-Anchor" href="#网络配置"></a> 网络配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-eth0</span><br></pre></td></tr></table></figure><p>将ONBOOT=no改为ONBOOT=yes<br />：wq 退出<br />重启网络配置</p><h2 id="安装传输文件"><a class="markdownIt-Anchor" href="#安装传输文件"></a> 安装传输文件</h2><h3 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install lrzsz -y</span><br></pre></td></tr></table></figure><h3 id="查看是否安装完成"><a class="markdownIt-Anchor" href="#查看是否安装完成"></a> 查看是否安装完成</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep lrzsz -y</span><br></pre></td></tr></table></figure><h3 id="从服务器上传文件到本地"><a class="markdownIt-Anchor" href="#从服务器上传文件到本地"></a> 从服务器上传文件到本地：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sz</span><br></pre></td></tr></table></figure><h3 id="从本地上传文件到服务器"><a class="markdownIt-Anchor" href="#从本地上传文件到服务器"></a> 从本地上传文件到服务器：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rz</span><br></pre></td></tr></table></figure><h2 id="centos7-开启端口"><a class="markdownIt-Anchor" href="#centos7-开启端口"></a> CentOS7 开启端口</h2><p>CentOS7之后，无法使用iptables控制Linuxs的端口，原因：Centos 7使用firewalld代替了原来的iptables。</p><h3 id="firewalld的基本使用"><a class="markdownIt-Anchor" href="#firewalld的基本使用"></a> firewalld的基本使用</h3><p>启动： systemctl start firewalld</p><p>关闭： systemctl stop firewalld</p><p>查看状态： systemctl status firewalld</p><p>开机禁用  ： systemctl disable firewalld</p><p>开机启用  ： systemctl enable firewalld</p><h3 id="systemctl是centos7的服务管理工具中主要的工具它融合之前service和chkconfig的功能于一体"><a class="markdownIt-Anchor" href="#systemctl是centos7的服务管理工具中主要的工具它融合之前service和chkconfig的功能于一体"></a> systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。</h3><p>启动一个服务：systemctl start firewalld.service<br />关闭一个服务：systemctl stop firewalld.service<br />重启一个服务：systemctl restart firewalld.service<br />显示一个服务的状态：systemctl status firewalld.service<br />在开机时启用一个服务：systemctl enable firewalld.service<br />在开机时禁用一个服务：systemctl disable firewalld.service<br />查看服务是否开机启动：systemctl is-enabled firewalld.service<br />查看已启动的服务列表：systemctl list-unit-files|grep enabled<br />查看启动失败的服务列表：systemctl --failed</p><h3 id="配置firewalld-cmd"><a class="markdownIt-Anchor" href="#配置firewalld-cmd"></a> 配置firewalld-cmd</h3><p>查看版本： firewall-cmd --version</p><p>查看帮助： firewall-cmd --help</p><p>显示状态： firewall-cmd --state</p><p>查看所有打开的端口： firewall-cmd --zone=public --list-ports</p><p>更新防火墙规则： firewall-cmd --reload</p><p>查看区域信息:  firewall-cmd --get-active-zones</p><p>查看指定接口所属区域： firewall-cmd --get-zone-of-interface=eth0</p><p>拒绝所有包：firewall-cmd --panic-on</p><p>取消拒绝状态： firewall-cmd --panic-off</p><p>查看是否拒绝： firewall-cmd --query-panic</p><h2 id="安装-java环境"><a class="markdownIt-Anchor" href="#安装-java环境"></a> 安装 java环境</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install java-1.8.0-openjdk</span><br></pre></td></tr></table></figure><p>使用rz上传 使用java -jar 运行jar包</p><p>参考：<a href="https://www.cnblogs.com/Ryez/p/11504896.html">CentOS 7 开放端口</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Centos7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx代理</title>
      <link href="/2020/04/17/nginx%E4%BB%A3%E7%90%86/"/>
      <url>/2020/04/17/nginx%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="nginx"><a class="markdownIt-Anchor" href="#nginx"></a> nginx</h2><h3 id="安装与运行"><a class="markdownIt-Anchor" href="#安装与运行"></a> 安装与运行</h3><p>解压压缩包进入解压路径<br />cmd切换到该路径<br />运行命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx</span><br></pre></td></tr></table></figure><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>N</mi></msubsup><msubsup><mo>∫</mo><mi>a</mi><mi>b</mi></msubsup><mi>g</mi><mo stretchy="false">(</mo><mi>t</mi><mo separator="true">,</mo><mi>i</mi><mo stretchy="false">)</mo><mtext>d</mtext><mi>t</mi></mrow><annotation encoding="application/x-tex">\sum_{i=0}^N\int_{a}^{b}g(t,i)\text{d}t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.399828em;vertical-align:-0.35582em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.981231em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.044008em;"><span style="top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span style="top:-3.2579000000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35582em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mclose">)</span><span class="mord text"><span class="mord">d</span></span><span class="mord mathdefault">t</span></span></span></span></p><h3 id="配置文件"><a class="markdownIt-Anchor" href="#配置文件"></a> 配置文件</h3><p>配置文件路径在解压所在路径的conf文件夹下的nginx.conf<br />添加代理<br />监听本机12345端口代理127.0.0.1:3306；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 12345;</span><br><span class="line">        proxy_pass 127.0.0.1:3306;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多个代理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 3366;</span><br><span class="line">        proxy_pass 172.16.33.25:3306;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 8068;</span><br><span class="line">        proxy_pass 172.16.96.145:8068;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 25015;</span><br><span class="line">        proxy_pass 172.16.99.11:25015;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 880;</span><br><span class="line">        proxy_pass 172.16.99.13:80;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="访问方法"><a class="markdownIt-Anchor" href="#访问方法"></a> 访问方法</h3><p>nginx所在ip加上监听的端口以及后续地址</p><p>例：</p><p>原网址： <a href="http://172.16.96.145:8068/sc_internship/sc2020/scbe/service-app-sample">http://172.16.96.145:8068/sc_internship/sc2020/scbe/service-app-sample</a><br />在运行172.16.33.25运行nginx后监听8068端口代理对应的网址为<br /><a href="http://172.16.33.25:8068/sc_internship/sc2020/scbe/service-app-sample">http://172.16.33.25:8068/sc_internship/sc2020/scbe/service-app-sample</a></p><h3 id="配置文件修改重装载命令"><a class="markdownIt-Anchor" href="#配置文件修改重装载命令"></a> 配置文件修改重装载命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis_plus使用笔记</title>
      <link href="/2020/03/27/Mybatis_plus%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/03/27/Mybatis_plus%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>#使用Mybatis——plus</p><h2 id="使用通用模板"><a class="markdownIt-Anchor" href="#使用通用模板"></a> 使用通用模板</h2><h3 id="使用流程"><a class="markdownIt-Anchor" href="#使用流程"></a> 使用流程</h3><ul><li>实现层也要继承对应的实现类</li><li>service层需要继承IService&lt;实体类&gt;</li><li>mapper层继承对应的BaseMapper&lt;实体类&gt;</li><li>ServiceImpl层继承ServiceImpl&lt;对应的Mapper类, 实体类&gt;</li></ul><h4 id="实体类中-id属性加注解"><a class="markdownIt-Anchor" href="#实体类中-id属性加注解"></a> 实体类中 ID属性加注解</h4><p>@TableId(value = “spe_id”, type = IdType.Auto)</p><table><thead><tr><th>type</th><th>function</th></tr></thead><tbody><tr><td>AUTO</td><td>主键自增（数据库中需要设置主键自增）</td></tr><tr><td>NONE</td><td>默认 （跟随全局策略走）</td></tr><tr><td>UUID</td><td>UUID类型主键</td></tr><tr><td>ID_WORKER</td><td>数值类型 （数据库中也必须是数值类型 否则会报错）</td></tr><tr><td>ID_WORKER_STR</td><td>字符串类型 （数据库也要保证一样字符类型）</td></tr><tr><td>INPUT</td><td>用户自定义了  （数据类型和数据库保持一致就行）</td></tr></tbody></table><h4 id="全局主键策略实现"><a class="markdownIt-Anchor" href="#全局主键策略实现"></a> 全局主键策略实现</h4><p>需要在application.yml文件中添加</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">com/mp/mapper/*</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">uuid/none/input/id_worker/id_worker_str/auto</span>   <span class="string">表示全局主键都采用该策略（如果全局策略和局部策略都有设置，局部策略优先级高）</span></span><br></pre></td></tr></table></figure><p>注意： 当设为自增时 saveOrUpdate时无法查重（每次id不一样 会自动自增）</p><h2 id="使用-lambda-表达式-查询"><a class="markdownIt-Anchor" href="#使用-lambda-表达式-查询"></a> 使用 lambda 表达式 查询</h2><h3 id="条件构造器关系介绍"><a class="markdownIt-Anchor" href="#条件构造器关系介绍"></a> 条件构造器关系介绍</h3><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdn.net/20181001173726837?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3MDM0Mjk0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="" /><br />QueryWrapper  与 UpdateWrapper  都是Entity 对象封装操作类<br />LambdaQueryWrapper 与 LambdaUpdateWrapper 是实现抽象类AbstractLambdaWrapper的子类 ： 用于Lambda语法使用的查询Wrapper</p><h3 id="条件构造器使用中的各个方法格式和说明"><a class="markdownIt-Anchor" href="#条件构造器使用中的各个方法格式和说明"></a> 条件构造器使用中的各个方法格式和说明</h3><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdn.net/20181001202710403?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3MDM0Mjk0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="" /></p><h3 id="crud-例子"><a class="markdownIt-Anchor" href="#crud-例子"></a> CRUD 例子</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    queryWrapper</span><br><span class="line">            .isNull(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">            .ge(<span class="string">&quot;age&quot;</span>, <span class="number">12</span>)</span><br><span class="line">            .isNotNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> delete = mapper.delete(queryWrapper);</span><br><span class="line">    System.out.println(<span class="string">&quot;delete return count = &quot;</span> + delete);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>删除的查询条件为name字段为null的and年龄大于等于12的and email字段不为null的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectMaps</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    queryWrapper.isNotNull(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; maps = mapper.selectMaps(queryWrapper);</span><br><span class="line">    <span class="keyword">for</span> (Map&lt;String, Object&gt; map : maps) &#123;</span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打印结果</span></span><br><span class="line"><span class="comment"> * &#123;name=lqf, id=1046282328366391406, age=12, email=lqf@163.com, status=false&#125;</span></span><br><span class="line"><span class="comment"> * &#123;name=lqf, id=1046282328366391407, age=12, email=lqf@163.com, status=false&#125;</span></span><br><span class="line"><span class="comment"> * &#123;name=lqf, id=1046282328366391408, age=12, email=lqf@163.com, status=false&#125;</span></span><br><span class="line"><span class="comment"> * &#123;name=lqf, id=1046282328366391409, age=12, email=lqf@163.com, status=false&#125;</span></span><br><span class="line"><span class="comment"> * &#123;name=lqf, id=1046282328366391410, age=12, email=lqf@163.com, status=false&#125;</span></span><br><span class="line"><span class="comment"> * &#123;name=lqf, id=1046282328366391411, age=12, email=lqf@163.com, status=false&#125;</span></span><br><span class="line"><span class="comment"> * &#123;name=lqf, id=1046282328366391412, age=12, email=lqf@163.com, status=false&#125;</span></span><br><span class="line"><span class="comment"> * &#123;name=lqf, id=1046282328366391413, age=12, email=lqf@163.com, status=false&#125;</span></span><br><span class="line"><span class="comment"> * &#123;name=lqf, id=1046282328366391414, age=12, email=lqf@163.com, status=false&#125;</span></span><br><span class="line"><span class="comment"> * &#123;name=lqf, id=1046282328366391415, age=12, email=lqf@163.com, status=false&#125;</span></span><br><span class="line"><span class="comment"> * &#123;name=lqf, id=1046282328366391416, age=12, email=lqf@163.com, status=false&#125;</span></span><br><span class="line"><span class="comment"> * &#123;name=lqf, id=1046282328366391417, age=12, email=lqf@163.com, status=false&#125;</span></span><br><span class="line"><span class="comment"> * &#123;name=lqf, id=1046282328366391418, age=12, email=lqf@163.com, status=false&#125;</span></span><br><span class="line"><span class="comment"> * json类型的键值对模式</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>queryWrapper 实体对象封装操作类（为 null时查询所有信息）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page         分页查询条件（可以为 RowBounds.DEFAULT）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类（可以为 null）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    IPage&lt;User&gt; userIPage = mapper.selectPage(page, queryWrapper);</span><br><span class="line">    System.out.println(userIPage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据 entity 条件，查询全部记录（并翻页）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> entity        实体对象 (set 条件值,不能为 null)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> updateWrapper 实体对象封装操作类（可以为 null,里面的 entity 用于生成 where 语句）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改值</span></span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setStatus(<span class="keyword">true</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改条件s</span></span><br><span class="line">    UpdateWrapper&lt;User&gt; userUpdateWrapper = <span class="keyword">new</span> UpdateWrapper&lt;&gt;();</span><br><span class="line">    userUpdateWrapper.eq(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;lqf&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> update = mapper.update(user, userUpdateWrapper);</span><br><span class="line"></span><br><span class="line">    System.out.println(update);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据 whereEntity 条件，更新记录</p><h2 id="使用-mybatis-plus-自动生成实体类"><a class="markdownIt-Anchor" href="#使用-mybatis-plus-自动生成实体类"></a> 使用 Mybatis-plus 自动生成实体类</h2><h3 id="简单使用"><a class="markdownIt-Anchor" href="#简单使用"></a> 简单使用</h3><h4 id="导入maven依赖"><a class="markdownIt-Anchor" href="#导入maven依赖"></a> 导入Maven依赖</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;mybatis-plus.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.freemarker&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;freemarker&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="编写测试类"><a class="markdownIt-Anchor" href="#编写测试类"></a> 编写测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.toolkit.StringPool;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.InjectionConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.*;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.builder.ConfigBuilder;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.converts.MySqlTypeConvert;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.po.TableInfo;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.querys.MySqlQuery;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.DateType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.FileType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.IColumnType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.exceptions.MybatisPlusException;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.toolkit.StringPool;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.toolkit.StringUtils;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.InjectionConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.*;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.po.TableInfo;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * mybatis代码生成器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 演示例子，执行 main 方法控制台输入模块表名回车自动生成对应项目目录中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 读取控制台内容</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">scanner</span><span class="params">(String tip)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        StringBuilder help = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        help.append(<span class="string">&quot;请输入&quot;</span> + tip + <span class="string">&quot;：&quot;</span>);</span><br><span class="line">        System.out.println(help.toString());</span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNext()) &#123;</span><br><span class="line">            String ipt = scanner.next();</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotEmpty(ipt)) &#123;</span><br><span class="line">                <span class="keyword">return</span> ipt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MybatisPlusException(<span class="string">&quot;请输入正确的&quot;</span> + tip + <span class="string">&quot;！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 代码生成器</span></span><br><span class="line">        AutoGenerator mpg = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 全局配置</span></span><br><span class="line">        GlobalConfig gc = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        String projectPath = System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line">        gc.setOutputDir(projectPath + <span class="string">&quot;/src/main/java&quot;</span>);</span><br><span class="line">        gc.setServiceName(<span class="string">&quot;%sService&quot;</span>);<span class="comment">//service 命名方式</span></span><br><span class="line">        gc.setServiceImplName(<span class="string">&quot;%sServiceImpl&quot;</span>);<span class="comment">//service impl 命名方式</span></span><br><span class="line">        <span class="comment">// 自定义文件命名，注意 %s 会自动填充表实体属性！</span></span><br><span class="line">        gc.setMapperName(<span class="string">&quot;%sMapper&quot;</span>);</span><br><span class="line">        gc.setXmlName(<span class="string">&quot;%sMapper&quot;</span>);</span><br><span class="line">        gc.setAuthor(<span class="string">&quot;cmx&quot;</span>);</span><br><span class="line">        gc.setOpen(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// gc.setSwagger2(true); 实体属性 Swagger2 注解</span></span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数据源配置</span></span><br><span class="line">        DataSourceConfig dsc = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        dsc.setUrl(<span class="string">&quot;jdbc:oracle:thin:@xxx:xxx&quot;</span>);</span><br><span class="line">        <span class="comment">// dsc.setSchemaName(&quot;public&quot;);</span></span><br><span class="line">        dsc.setDriverName(<span class="string">&quot;oracle.jdbc.OracleDriver&quot;</span>);</span><br><span class="line">        dsc.setUsername(<span class="string">&quot;xxx&quot;</span>);dsc.setPassword(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 包配置</span></span><br><span class="line">        PackageConfig pc = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        pc.setModuleName(scanner(<span class="string">&quot;模块名&quot;</span>));</span><br><span class="line">        pc.setParent(<span class="string">&quot;com.cmx.tcn&quot;</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义配置</span></span><br><span class="line">        InjectionConfig cfg = <span class="keyword">new</span> InjectionConfig() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// to do nothing</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果模板引擎是 freemarker</span></span><br><span class="line">        String templatePath = <span class="string">&quot;/templates/mapper.xml.ftl&quot;</span>;</span><br><span class="line">        <span class="comment">// 如果模板引擎是 velocity</span></span><br><span class="line">        <span class="comment">// String templatePath = &quot;/templates/mapper.xml.vm&quot;;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义输出配置</span></span><br><span class="line">        List&lt;FileOutConfig&gt; focList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 自定义配置会被优先输出</span></span><br><span class="line">        focList.add(<span class="keyword">new</span> FileOutConfig(templatePath) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">outputFile</span><span class="params">(TableInfo tableInfo)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！</span></span><br><span class="line">                <span class="keyword">return</span> projectPath + <span class="string">&quot;/src/main/resources/mapper/&quot;</span> + pc.getModuleName()</span><br><span class="line">                        + <span class="string">&quot;/&quot;</span> + tableInfo.getEntityName() + <span class="string">&quot;Mapper&quot;</span> + StringPool.DOT_XML;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        cfg.setFileCreate(new IFileCreate() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public boolean isCreate(ConfigBuilder configBuilder, FileType fileType, String filePath) &#123;</span></span><br><span class="line"><span class="comment">                // 判断自定义文件夹是否需要创建</span></span><br><span class="line"><span class="comment">                checkDir(&quot;调用默认方法创建的目录&quot;);</span></span><br><span class="line"><span class="comment">                return false;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        cfg.setFileOutConfigList(focList);</span><br><span class="line">        mpg.setCfg(cfg);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置模板</span></span><br><span class="line">        TemplateConfig templateConfig = <span class="keyword">new</span> TemplateConfig();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置自定义输出模板</span></span><br><span class="line">        <span class="comment">//指定自定义模板路径，注意不要带上.ftl/.vm, 会根据使用的模板引擎自动识别</span></span><br><span class="line">        <span class="comment">// templateConfig.setEntity(&quot;templates/entity2.java&quot;);</span></span><br><span class="line">        <span class="comment">// templateConfig.setService();</span></span><br><span class="line">        <span class="comment">// templateConfig.setController();</span></span><br><span class="line"></span><br><span class="line">        templateConfig.setXml(<span class="keyword">null</span>);</span><br><span class="line">        mpg.setTemplate(templateConfig);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 策略配置</span></span><br><span class="line">        StrategyConfig strategy = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line"><span class="comment">//        strategy.setSuperEntityClass(&quot;com.baomidou.ant.common.BaseEntity&quot;);</span></span><br><span class="line">        strategy.setEntityLombokModel(<span class="keyword">true</span>);</span><br><span class="line">        strategy.setRestControllerStyle(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//        strategy.setSuperControllerClass(&quot;com.baomidou.ant.common.BaseController&quot;);</span></span><br><span class="line">        strategy.setInclude(scanner(<span class="string">&quot;表名，多个英文逗号分割&quot;</span>).split(<span class="string">&quot;,&quot;</span>));</span><br><span class="line"><span class="comment">//        strategy.setSuperEntityColumns(&quot;id&quot;);</span></span><br><span class="line">        strategy.setControllerMappingHyphenStyle(<span class="keyword">true</span>);</span><br><span class="line">        strategy.setTablePrefix(pc.getModuleName() + <span class="string">&quot;_&quot;</span>);</span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line">        mpg.setTemplateEngine(<span class="keyword">new</span> FreemarkerTemplateEngine());</span><br><span class="line">        mpg.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用快捷键（ctrl+shift+F10）或者右键该类点击Run 运行代码 即可生成对应代码</p><h3 id="常用参数"><a class="markdownIt-Anchor" href="#常用参数"></a> 常用参数</h3><h4 id="设置date策略"><a class="markdownIt-Anchor" href="#设置date策略"></a> 设置Date策略</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  AutoGenerator generator = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line">gc.setDateType(DateType.ONLY_DATE); <span class="comment">// 时间策略 默认TIME_PACK</span></span><br></pre></td></tr></table></figure><p>setDateType()可设置三种策略分别如下表：(数据库类型为datetime)</p><table><thead><tr><th></th><th>ONLY_DATE</th><th>SQL_PACK</th><th>TIME_PACK</th></tr></thead><tbody><tr><td>实体类对应数据类型</td><td>Date</td><td>Timestamp</td><td>Date</td></tr></tbody></table><h4 id="自定义转换模板"><a class="markdownIt-Anchor" href="#自定义转换模板"></a> 自定义转换模板</h4><p>模板语法官网:<br /><a href="http://freemaer.foofun.cn/dgui_quickstart_basics.html">freemarker中文官方文档</a></p><ul><li>复制源码中默认的模板到entity.java.ftl文件至/main/resources/templates文件下方，重命名为entity2.java.ftl（ftl文件为freemarker模板）<br /><img src= "/img/loading.gif" data-lazy-src="https://upload-images.jianshu.io/upload_images/8190955-061902949c8ba968.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="查找源码模板" /></li><li>根据freemaeker语法修改模板<br />导入Date包并修改为Date数据类型</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;#list table.fields as field&gt;</span><br><span class="line">    &lt;#if (field.propertyType) ==&quot;LocalDateTime&quot;&gt;</span><br><span class="line">import java.util.Date;</span><br><span class="line">    &lt;#break&gt;</span><br><span class="line">    &lt;/#if&gt;</span><br><span class="line">&lt;/#list&gt;</span><br><span class="line">    &lt;#if (field.propertyType) ==&quot;LocalDateTime&quot;&gt;</span><br><span class="line">    private Date $&#123;field.propertyName&#125;;</span><br><span class="line">    &lt;#else&gt;</span><br><span class="line">    private $&#123;field.propertyType&#125; $&#123;field.propertyName&#125;;</span><br><span class="line">    &lt;/#if&gt;</span><br></pre></td></tr></table></figure><ul><li>Generator中设置模板路径</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置模板</span></span><br><span class="line">TemplateConfig templateConfig = <span class="keyword">new</span> TemplateConfig();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置自定义输出模板</span></span><br><span class="line"><span class="comment">//指定自定义模板路径，注意不要带上.ftl/.vm, 会根据使用的模板引擎自动识别</span></span><br><span class="line"> templateConfig.setEntity(<span class="string">&quot;templates/entity.java&quot;</span>);</span><br><span class="line"><span class="comment">// templateConfig.setService();</span></span><br><span class="line"><span class="comment">// templateConfig.setController();</span></span><br><span class="line"></span><br><span class="line">templateConfig.setXml(<span class="keyword">null</span>);</span><br><span class="line">generator.setTemplate(templateConfig);</span><br><span class="line"></span><br><span class="line">cfg.setFileOutConfigList(focList);</span><br><span class="line">generator.setCfg(cfg);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> MybatisPlus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring boot 核心笔记</title>
      <link href="/2020/02/03/Spring%20boot%20%E6%A0%B8%E5%BF%83%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/02/03/Spring%20boot%20%E6%A0%B8%E5%BF%83%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>butterfly </title>
      <link href="/2020/02/03/butterfly/"/>
      <url>/2020/02/03/butterfly/</url>
      
        <content type="html"><![CDATA[<p>一个安装butterfly主题过程记录</p><span id="more"></span><h2 id="主題安裝和升級"><a class="markdownIt-Anchor" href="#主題安裝和升級"></a> 主題安裝和升級</h2><p>安裝<br />查看 npm 安装的模块<br />查看当前项目的依赖模块如下：<br /><code>npm ls --depth 0</code></p><p>查看全局依赖模块命令如下：</p><p><code>npm ls -g --depth 0</code><br />在你的博客根目录</p><p><code>git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly</code><br />修改站點配置文件_config.yml，把theme（主題）改為Butterfly</p><h2 id="添加-valine-评论"><a class="markdownIt-Anchor" href="#添加-valine-评论"></a> 添加 valine 评论</h2><p><a href="https://valine.js.org/quickstart.html">官方文档</a><br />安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install valine --save</span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">valine:</span><br><span class="line">  enable: ture # if you want use valine,please set this value is true</span><br><span class="line">  appId:  hxN4EMnnWWFNeyk4xbNxQJT7-gzGzoHsz # leancloud application app id</span><br><span class="line">  appKey: lewYKS5k1rb7D5sVgI4QeTAx # leancloud application app key</span><br><span class="line">  notify: false # valine mail notify (true/false) Deprecated in v1.4.0+</span><br><span class="line">  verify: false # valine verify code (true/false) Deprecated in v1.4.0+</span><br><span class="line">  pageSize: 10 # comment list page size</span><br><span class="line">  avatar: monsterid # gravatar style https://valine.js.org/#/avatar</span><br><span class="line">  lang: zh-cn # i18n: zh-CN/zh-TW/en/ja</span><br><span class="line">  placeholder: Please leave your footprints # valine comment input placeholder(like: Please leave your footprints )</span><br><span class="line">  guest_info: nick,mail,link #valine comment header info</span><br><span class="line">  recordIP: false # Record reviewer IP</span><br><span class="line">  serverURLs: # This configuration is suitable for domestic custom domain name users, overseas version will be automatically detected (no need to manually fill in)</span><br><span class="line">  emojiCDN: //i0.hdslb.com/bfs/emote/ # emoji CDN</span><br><span class="line">  enableQQ: false # enable the Nickname box to automatically get QQ Nickname and QQ Avatar</span><br><span class="line">  requiredFields: nick,mail # required fields nick/mail/link</span><br><span class="line">  bg: # valine background</span><br><span class="line">  count: false # dispaly comment count in top_img</span><br></pre></td></tr></table></figure><p>同時在 Hexo 下的 source/_data/ 創建一個 json 文件 valine.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line"><span class="attr">&quot;tv_doge&quot;</span>: <span class="string">&quot;6ea59c827c414b4a2955fe79e0f6fd3dcd515e24.png&quot;</span>,</span><br><span class="line"><span class="attr">&quot;tv_親親&quot;</span>: <span class="string">&quot;a8111ad55953ef5e3be3327ef94eb4a39d535d06.png&quot;</span>,</span><br><span class="line"><span class="attr">&quot;tv_偷笑&quot;</span>: <span class="string">&quot;bb690d4107620f1c15cff29509db529a73aee261.png&quot;</span>,</span><br><span class="line"><span class="attr">&quot;tv_再見&quot;</span>: <span class="string">&quot;180129b8ea851044ce71caf55cc8ce44bd4a4fc8.png&quot;</span>,</span><br><span class="line"><span class="attr">&quot;tv_冷漠&quot;</span>: <span class="string">&quot;b9cbc755c2b3ee43be07ca13de84e5b699a3f101.png&quot;</span>,</span><br><span class="line"><span class="attr">&quot;tv_發怒&quot;</span>: <span class="string">&quot;34ba3cd204d5b05fec70ce08fa9fa0dd612409ff.png&quot;</span>,</span><br><span class="line"><span class="attr">&quot;tv_發財&quot;</span>: <span class="string">&quot;34db290afd2963723c6eb3c4560667db7253a21a.png&quot;</span>,</span><br><span class="line"><span class="attr">&quot;tv_可愛&quot;</span>: <span class="string">&quot;9e55fd9b500ac4b96613539f1ce2f9499e314ed9.png&quot;</span>,</span><br><span class="line"><span class="attr">&quot;tv_吐血&quot;</span>: <span class="string">&quot;09dd16a7aa59b77baa1155d47484409624470c77.png&quot;</span>,</span><br><span class="line"><span class="attr">&quot;tv_呆&quot;</span>: <span class="string">&quot;fe1179ebaa191569b0d31cecafe7a2cd1c951c9d.png&quot;</span>,</span><br><span class="line"><span class="attr">&quot;tv_嘔吐&quot;</span>: <span class="string">&quot;9f996894a39e282ccf5e66856af49483f81870f3.png&quot;</span>,</span><br><span class="line"><span class="attr">&quot;tv_困&quot;</span>: <span class="string">&quot;241ee304e44c0af029adceb294399391e4737ef2.png&quot;</span>,</span><br><span class="line"><span class="attr">&quot;tv_壞笑&quot;</span>: <span class="string">&quot;1f0b87f731a671079842116e0991c91c2c88645a.png&quot;</span>,</span><br><span class="line"><span class="attr">&quot;tv_大佬&quot;</span>: <span class="string">&quot;093c1e2c490161aca397afc45573c877cdead616.png&quot;</span>,</span><br><span class="line"><span class="attr">&quot;tv_大哭&quot;</span>: <span class="string">&quot;23269aeb35f99daee28dda129676f6e9ea87934f.png&quot;</span>,</span><br><span class="line"><span class="attr">&quot;tv_委屈&quot;</span>: <span class="string">&quot;d04dba7b5465779e9755d2ab6f0a897b9b33bb77.png&quot;</span>,</span><br><span class="line"><span class="attr">&quot;tv_害羞&quot;</span>: <span class="string">&quot;a37683fb5642fa3ddfc7f4e5525fd13e42a2bdb1.png&quot;</span>,</span><br><span class="line"><span class="attr">&quot;tv_尷尬&quot;</span>: <span class="string">&quot;7cfa62dafc59798a3d3fb262d421eeeff166cfa4.png&quot;</span>,</span><br><span class="line"><span class="attr">&quot;tv_微笑&quot;</span>: <span class="string">&quot;70dc5c7b56f93eb61bddba11e28fb1d18fddcd4c.png&quot;</span>,</span><br><span class="line"><span class="attr">&quot;tv_思考&quot;</span>: <span class="string">&quot;90cf159733e558137ed20aa04d09964436f618a1.png&quot;</span>,</span><br><span class="line"><span class="attr">&quot;tv_驚嚇&quot;</span>: <span class="string">&quot;0d15c7e2ee58e935adc6a7193ee042388adc22af.png&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr /><p>发现了一个新的的<a href="https://github.com/GamerNoTitle/Valine-Magic">valine表情包仓库</a></p><p>原本配置修改一下下~~</p><p>valine下cdn改为</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">emojiCDN:</span> <span class="string">https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/</span> <span class="comment"># emoji CDN</span></span><br></pre></td></tr></table></figure><p>可以在仓库中选择其他的 cdn 与其他表情包</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/xiaozhuo_Q/images/raw/master/blog/image-20210829211449327.png" alt="image-20210829211449327" /></p><p>新的 valine.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;bilibilitv2&quot;</span>: <span class="string">&quot;bilibilitv/[tv_doge].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv3&quot;</span>: <span class="string">&quot;bilibilitv/[tv_亲亲].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv4&quot;</span>: <span class="string">&quot;bilibilitv/[tv_偷笑].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv5&quot;</span>: <span class="string">&quot;bilibilitv/[tv_再见].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv6&quot;</span>: <span class="string">&quot;bilibilitv/[tv_冷漠].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv7&quot;</span>: <span class="string">&quot;bilibilitv/[tv_发怒].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv8&quot;</span>: <span class="string">&quot;bilibilitv/[tv_发财].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv9&quot;</span>: <span class="string">&quot;bilibilitv/[tv_可爱].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv10&quot;</span>: <span class="string">&quot;bilibilitv/[tv_吐血].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv11&quot;</span>: <span class="string">&quot;bilibilitv/[tv_呆].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv12&quot;</span>: <span class="string">&quot;bilibilitv/[tv_呕吐].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv13&quot;</span>: <span class="string">&quot;bilibilitv/[tv_困].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv14&quot;</span>: <span class="string">&quot;bilibilitv/[tv_坏笑].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv15&quot;</span>: <span class="string">&quot;bilibilitv/[tv_大佬].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv16&quot;</span>: <span class="string">&quot;bilibilitv/[tv_大哭].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv17&quot;</span>: <span class="string">&quot;bilibilitv/[tv_委屈].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv18&quot;</span>: <span class="string">&quot;bilibilitv/[tv_害羞].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv19&quot;</span>: <span class="string">&quot;bilibilitv/[tv_尴尬].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv20&quot;</span>: <span class="string">&quot;bilibilitv/[tv_微笑].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv21&quot;</span>: <span class="string">&quot;bilibilitv/[tv_思考].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv22&quot;</span>: <span class="string">&quot;bilibilitv/[tv_惊吓].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv23&quot;</span>: <span class="string">&quot;bilibilitv/[tv_打脸].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv24&quot;</span>: <span class="string">&quot;bilibilitv/[tv_抓狂].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv25&quot;</span>: <span class="string">&quot;bilibilitv/[tv_抠鼻].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv26&quot;</span>: <span class="string">&quot;bilibilitv/[tv_斜眼笑].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv27&quot;</span>: <span class="string">&quot;bilibilitv/[tv_无奈].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv28&quot;</span>: <span class="string">&quot;bilibilitv/[tv_晕].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv29&quot;</span>: <span class="string">&quot;bilibilitv/[tv_流汗].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv30&quot;</span>: <span class="string">&quot;bilibilitv/[tv_流泪].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv31&quot;</span>: <span class="string">&quot;bilibilitv/[tv_流鼻血].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv32&quot;</span>: <span class="string">&quot;bilibilitv/[tv_点赞].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv33&quot;</span>: <span class="string">&quot;bilibilitv/[tv_生气].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv34&quot;</span>: <span class="string">&quot;bilibilitv/[tv_生病].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv35&quot;</span>: <span class="string">&quot;bilibilitv/[tv_疑问].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv36&quot;</span>: <span class="string">&quot;bilibilitv/[tv_白眼].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv37&quot;</span>: <span class="string">&quot;bilibilitv/[tv_皱眉].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv38&quot;</span>: <span class="string">&quot;bilibilitv/[tv_目瞪口呆].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv39&quot;</span>: <span class="string">&quot;bilibilitv/[tv_睡着].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv40&quot;</span>: <span class="string">&quot;bilibilitv/[tv_笑哭].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv41&quot;</span>: <span class="string">&quot;bilibilitv/[tv_腼腆].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv42&quot;</span>: <span class="string">&quot;bilibilitv/[tv_色].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv43&quot;</span>: <span class="string">&quot;bilibilitv/[tv_调侃].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv44&quot;</span>: <span class="string">&quot;bilibilitv/[tv_调皮].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv45&quot;</span>: <span class="string">&quot;bilibilitv/[tv_鄙视].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv46&quot;</span>: <span class="string">&quot;bilibilitv/[tv_闭嘴].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv47&quot;</span>: <span class="string">&quot;bilibilitv/[tv_难过].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv48&quot;</span>: <span class="string">&quot;bilibilitv/[tv_馋].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv49&quot;</span>: <span class="string">&quot;bilibilitv/[tv_鬼脸].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv50&quot;</span>: <span class="string">&quot;bilibilitv/[tv_黑人问号].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibilitv51&quot;</span>: <span class="string">&quot;bilibilitv/[tv_鼓掌].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibili22332&quot;</span>: <span class="string">&quot;bilibili2233/[2233娘_卖萌].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibili22333&quot;</span>: <span class="string">&quot;bilibili2233/[2233娘_吃惊].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibili22334&quot;</span>: <span class="string">&quot;bilibili2233/[2233娘_吐魂].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibili22335&quot;</span>: <span class="string">&quot;bilibili2233/[2233娘_喝水].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibili22336&quot;</span>: <span class="string">&quot;bilibili2233/[2233娘_困惑].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibili22337&quot;</span>: <span class="string">&quot;bilibili2233/[2233娘_大哭].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibili22338&quot;</span>: <span class="string">&quot;bilibili2233/[2233娘_大笑].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibili22339&quot;</span>: <span class="string">&quot;bilibili2233/[2233娘_委屈].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibili223310&quot;</span>: <span class="string">&quot;bilibili2233/[2233娘_怒].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibili223311&quot;</span>: <span class="string">&quot;bilibili2233/[2233娘_无言].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibili223312&quot;</span>: <span class="string">&quot;bilibili2233/[2233娘_汗].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibili223313&quot;</span>: <span class="string">&quot;bilibili2233/[2233娘_疑问].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibili223314&quot;</span>: <span class="string">&quot;bilibili2233/[2233娘_第一].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibili223315&quot;</span>: <span class="string">&quot;bilibili2233/[2233娘_耶].png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bilibili223316&quot;</span>: <span class="string">&quot;bilibili2233/[2233娘_郁闷].png&quot;</span>,<span class="attr">&quot;Heybox1&quot;</span>: <span class="string">&quot;Heybox/expression_cube.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox2&quot;</span>: <span class="string">&quot;Heybox/expression_cube_bingbujiandan.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox3&quot;</span>: <span class="string">&quot;Heybox/expression_cube_bizui.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox4&quot;</span>: <span class="string">&quot;Heybox/expression_cube_cangsang.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox5&quot;</span>: <span class="string">&quot;Heybox/expression_cube_dalian.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox6&quot;</span>: <span class="string">&quot;Heybox/expression_cube_doge.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox7&quot;</span>: <span class="string">&quot;Heybox/expression_cube_gandong.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox8&quot;</span>: <span class="string">&quot;Heybox/expression_cube_guai.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox9&quot;</span>: <span class="string">&quot;Heybox/expression_cube_gugu.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox10&quot;</span>: <span class="string">&quot;Heybox/expression_cube_han.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox11&quot;</span>: <span class="string">&quot;Heybox/expression_cube_hbi.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox12&quot;</span>: <span class="string">&quot;Heybox/expression_cube_heirenwenhao.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox13&quot;</span>: <span class="string">&quot;Heybox/expression_cube_huaji.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox14&quot;</span>: <span class="string">&quot;Heybox/expression_cube_jiayou.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox15&quot;</span>: <span class="string">&quot;Heybox/expression_cube_jingya.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox16&quot;</span>: <span class="string">&quot;Heybox/expression_cube_kaixin.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox17&quot;</span>: <span class="string">&quot;Heybox/expression_cube_ku.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox18&quot;</span>: <span class="string">&quot;Heybox/expression_cube_kun.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox19&quot;</span>: <span class="string">&quot;Heybox/expression_cube_kuqi.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox20&quot;</span>: <span class="string">&quot;Heybox/expression_cube_nu.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox21&quot;</span>: <span class="string">&quot;Heybox/expression_cube_penshui.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox22&quot;</span>: <span class="string">&quot;Heybox/expression_cube_qiliang.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox23&quot;</span>: <span class="string">&quot;Heybox/expression_cube_shengqi.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox24&quot;</span>: <span class="string">&quot;Heybox/expression_cube_shuijiao.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox25&quot;</span>: <span class="string">&quot;Heybox/expression_cube_tanqi.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox26&quot;</span>: <span class="string">&quot;Heybox/expression_cube_tanshou.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox27&quot;</span>: <span class="string">&quot;Heybox/expression_cube_tu.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox28&quot;</span>: <span class="string">&quot;Heybox/expression_cube_wa.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox29&quot;</span>: <span class="string">&quot;Heybox/expression_cube_weiqu.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox30&quot;</span>: <span class="string">&quot;Heybox/expression_cube_weixiao.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox31&quot;</span>: <span class="string">&quot;Heybox/expression_cube_wulianku.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox32&quot;</span>: <span class="string">&quot;Heybox/expression_cube_xia.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox33&quot;</span>: <span class="string">&quot;Heybox/expression_cube_xiaocry.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox34&quot;</span>: <span class="string">&quot;Heybox/expression_cube_xihuan.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox35&quot;</span>: <span class="string">&quot;Heybox/expression_cube_xuexi.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox36&quot;</span>: <span class="string">&quot;Heybox/expression_cube_yun.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox37&quot;</span>: <span class="string">&quot;Heybox/expression_cube_zan.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox38&quot;</span>: <span class="string">&quot;Heybox/expression_heyboxgirl.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox39&quot;</span>: <span class="string">&quot;Heybox/expression_heyboxgirl_v2.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox40&quot;</span>: <span class="string">&quot;Heybox/expression_heygirl.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox41&quot;</span>: <span class="string">&quot;Heybox/expression_heygirl_aidao.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox42&quot;</span>: <span class="string">&quot;Heybox/expression_heygirl_baipiaoguai.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox43&quot;</span>: <span class="string">&quot;Heybox/expression_heygirl_chi.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox44&quot;</span>: <span class="string">&quot;Heybox/expression_heygirl_chigua.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox45&quot;</span>: <span class="string">&quot;Heybox/expression_heygirl_eihei.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox46&quot;</span>: <span class="string">&quot;Heybox/expression_heygirl_haha.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox47&quot;</span>: <span class="string">&quot;Heybox/expression_heygirl_haixiu.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox48&quot;</span>: <span class="string">&quot;Heybox/expression_heygirl_henaicha.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox49&quot;</span>: <span class="string">&quot;Heybox/expression_heygirl_huaji.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox50&quot;</span>: <span class="string">&quot;Heybox/expression_heygirl_jing.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox51&quot;</span>: <span class="string">&quot;Heybox/expression_heygirl_jixialai.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox52&quot;</span>: <span class="string">&quot;Heybox/expression_heygirl_kaikele.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox53&quot;</span>: <span class="string">&quot;Heybox/expression_heygirl_ku.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox54&quot;</span>: <span class="string">&quot;Heybox/expression_heygirl_kujiuruhou.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox55&quot;</span>: <span class="string">&quot;Heybox/expression_heygirl_nielian.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox56&quot;</span>: <span class="string">&quot;Heybox/expression_heygirl_qiaokaixin.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox57&quot;</span>: <span class="string">&quot;Heybox/expression_heygirl_qiehua.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox58&quot;</span>: <span class="string">&quot;Heybox/expression_heygirl_rua.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox59&quot;</span>: <span class="string">&quot;Heybox/expression_heygirl_toukan.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox60&quot;</span>: <span class="string">&quot;Heybox/expression_heygirl_tu.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox61&quot;</span>: <span class="string">&quot;Heybox/expression_heygirl_wuyu.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox62&quot;</span>: <span class="string">&quot;Heybox/expression_heygirl_xihuan.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox63&quot;</span>: <span class="string">&quot;Heybox/expression_heygirl_yiwen.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox64&quot;</span>: <span class="string">&quot;Heybox/expression_heygirl_zhe.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox65&quot;</span>: <span class="string">&quot;Heybox/expression_heziji_1.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox66&quot;</span>: <span class="string">&quot;Heybox/expression_heziji_10.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox67&quot;</span>: <span class="string">&quot;Heybox/expression_heziji_11.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox68&quot;</span>: <span class="string">&quot;Heybox/expression_heziji_12.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox69&quot;</span>: <span class="string">&quot;Heybox/expression_heziji_13.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox70&quot;</span>: <span class="string">&quot;Heybox/expression_heziji_14.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox71&quot;</span>: <span class="string">&quot;Heybox/expression_heziji_15.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox72&quot;</span>: <span class="string">&quot;Heybox/expression_heziji_16.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox73&quot;</span>: <span class="string">&quot;Heybox/expression_heziji_17.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox74&quot;</span>: <span class="string">&quot;Heybox/expression_heziji_18.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox75&quot;</span>: <span class="string">&quot;Heybox/expression_heziji_19.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox76&quot;</span>: <span class="string">&quot;Heybox/expression_heziji_2.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox77&quot;</span>: <span class="string">&quot;Heybox/expression_heziji_20.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox78&quot;</span>: <span class="string">&quot;Heybox/expression_heziji_21.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox79&quot;</span>: <span class="string">&quot;Heybox/expression_heziji_22.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox80&quot;</span>: <span class="string">&quot;Heybox/expression_heziji_23.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox81&quot;</span>: <span class="string">&quot;Heybox/expression_heziji_24.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox82&quot;</span>: <span class="string">&quot;Heybox/expression_heziji_25.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox83&quot;</span>: <span class="string">&quot;Heybox/expression_heziji_26.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox84&quot;</span>: <span class="string">&quot;Heybox/expression_heziji_27.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox85&quot;</span>: <span class="string">&quot;Heybox/expression_heziji_28.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox86&quot;</span>: <span class="string">&quot;Heybox/expression_heziji_29.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox87&quot;</span>: <span class="string">&quot;Heybox/expression_heziji_3.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox88&quot;</span>: <span class="string">&quot;Heybox/expression_heziji_30.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox89&quot;</span>: <span class="string">&quot;Heybox/expression_heziji_31.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox90&quot;</span>: <span class="string">&quot;Heybox/expression_heziji_32.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox91&quot;</span>: <span class="string">&quot;Heybox/expression_heziji_4.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox92&quot;</span>: <span class="string">&quot;Heybox/expression_heziji_5.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox93&quot;</span>: <span class="string">&quot;Heybox/expression_heziji_6.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox94&quot;</span>: <span class="string">&quot;Heybox/expression_heziji_7.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox95&quot;</span>: <span class="string">&quot;Heybox/expression_heziji_8.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Heybox96&quot;</span>: <span class="string">&quot;Heybox/expression_heziji_9.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Sweetie-Bunny1&quot;</span>: <span class="string">&quot;Sweetie-Bunny/12311678.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Sweetie-Bunny2&quot;</span>: <span class="string">&quot;Sweetie-Bunny/12311679.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Sweetie-Bunny3&quot;</span>: <span class="string">&quot;Sweetie-Bunny/12311680.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Sweetie-Bunny4&quot;</span>: <span class="string">&quot;Sweetie-Bunny/12311681.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Sweetie-Bunny5&quot;</span>: <span class="string">&quot;Sweetie-Bunny/12311682.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Sweetie-Bunny6&quot;</span>: <span class="string">&quot;Sweetie-Bunny/12311683.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Sweetie-Bunny7&quot;</span>: <span class="string">&quot;Sweetie-Bunny/12311684.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Sweetie-Bunny8&quot;</span>: <span class="string">&quot;Sweetie-Bunny/12311685.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Sweetie-Bunny9&quot;</span>: <span class="string">&quot;Sweetie-Bunny/12311686.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Sweetie-Bunny10&quot;</span>: <span class="string">&quot;Sweetie-Bunny/12311687.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Sweetie-Bunny11&quot;</span>: <span class="string">&quot;Sweetie-Bunny/12311688.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Sweetie-Bunny12&quot;</span>: <span class="string">&quot;Sweetie-Bunny/12311689.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Sweetie-Bunny13&quot;</span>: <span class="string">&quot;Sweetie-Bunny/12311690.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Sweetie-Bunny14&quot;</span>: <span class="string">&quot;Sweetie-Bunny/12311691.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Sweetie-Bunny15&quot;</span>: <span class="string">&quot;Sweetie-Bunny/12311692.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Sweetie-Bunny16&quot;</span>: <span class="string">&quot;Sweetie-Bunny/12311693.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Sweetie-Bunny17&quot;</span>: <span class="string">&quot;Sweetie-Bunny/12311694.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Sweetie-Bunny18&quot;</span>: <span class="string">&quot;Sweetie-Bunny/12311695.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Sweetie-Bunny19&quot;</span>: <span class="string">&quot;Sweetie-Bunny/12311696.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Sweetie-Bunny20&quot;</span>: <span class="string">&quot;Sweetie-Bunny/12311697.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Sweetie-Bunny21&quot;</span>: <span class="string">&quot;Sweetie-Bunny/12311698.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Sweetie-Bunny22&quot;</span>: <span class="string">&quot;Sweetie-Bunny/12311699.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Sweetie-Bunny23&quot;</span>: <span class="string">&quot;Sweetie-Bunny/12311700.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Sweetie-Bunny24&quot;</span>: <span class="string">&quot;Sweetie-Bunny/12311701.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Sweetie-Bunny25&quot;</span>: <span class="string">&quot;Sweetie-Bunny/12311702.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Sweetie-Bunny26&quot;</span>: <span class="string">&quot;Sweetie-Bunny/12311703.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Sweetie-Bunny27&quot;</span>: <span class="string">&quot;Sweetie-Bunny/12311704.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Sweetie-Bunny28&quot;</span>: <span class="string">&quot;Sweetie-Bunny/12311705.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Sweetie-Bunny29&quot;</span>: <span class="string">&quot;Sweetie-Bunny/12311706.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Sweetie-Bunny30&quot;</span>: <span class="string">&quot;Sweetie-Bunny/12311707.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Sweetie-Bunny31&quot;</span>: <span class="string">&quot;Sweetie-Bunny/12311708.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Sweetie-Bunny32&quot;</span>: <span class="string">&quot;Sweetie-Bunny/12311709.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Sweetie-Bunny33&quot;</span>: <span class="string">&quot;Sweetie-Bunny/12311710.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Sweetie-Bunny34&quot;</span>: <span class="string">&quot;Sweetie-Bunny/12311711.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Sweetie-Bunny35&quot;</span>: <span class="string">&quot;Sweetie-Bunny/12311712.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Sweetie-Bunny36&quot;</span>: <span class="string">&quot;Sweetie-Bunny/12311713.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Sweetie-Bunny37&quot;</span>: <span class="string">&quot;Sweetie-Bunny/12311714.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Sweetie-Bunny38&quot;</span>: <span class="string">&quot;Sweetie-Bunny/12311715.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Sweetie-Bunny39&quot;</span>: <span class="string">&quot;Sweetie-Bunny/12311716.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Sweetie-Bunny40&quot;</span>: <span class="string">&quot;Sweetie-Bunny/12311717.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Snow-Miku1&quot;</span>: <span class="string">&quot;Snow-Miku/3583066@2x.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Snow-Miku2&quot;</span>: <span class="string">&quot;Snow-Miku/3583067@2x.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Snow-Miku3&quot;</span>: <span class="string">&quot;Snow-Miku/3583068@2x.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Snow-Miku4&quot;</span>: <span class="string">&quot;Snow-Miku/3583069@2x.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Snow-Miku5&quot;</span>: <span class="string">&quot;Snow-Miku/3583070@2x.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Snow-Miku6&quot;</span>: <span class="string">&quot;Snow-Miku/3583071@2x.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Snow-Miku7&quot;</span>: <span class="string">&quot;Snow-Miku/3583072@2x.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Snow-Miku8&quot;</span>: <span class="string">&quot;Snow-Miku/3583073@2x.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Snow-Miku9&quot;</span>: <span class="string">&quot;Snow-Miku/3583074@2x.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Snow-Miku10&quot;</span>: <span class="string">&quot;Snow-Miku/3583075@2x.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Snow-Miku11&quot;</span>: <span class="string">&quot;Snow-Miku/3583076@2x.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Snow-Miku12&quot;</span>: <span class="string">&quot;Snow-Miku/3583077@2x.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Snow-Miku13&quot;</span>: <span class="string">&quot;Snow-Miku/3583078@2x.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Snow-Miku14&quot;</span>: <span class="string">&quot;Snow-Miku/3583079@2x.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Snow-Miku15&quot;</span>: <span class="string">&quot;Snow-Miku/3583080@2x.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Snow-Miku16&quot;</span>: <span class="string">&quot;Snow-Miku/3583081@2x.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Snow-Miku17&quot;</span>: <span class="string">&quot;Snow-Miku/3583082@2x.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Snow-Miku18&quot;</span>: <span class="string">&quot;Snow-Miku/3583083@2x.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Snow-Miku19&quot;</span>: <span class="string">&quot;Snow-Miku/3583084@2x.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Snow-Miku20&quot;</span>: <span class="string">&quot;Snow-Miku/3583085@2x.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Snow-Miku21&quot;</span>: <span class="string">&quot;Snow-Miku/3583086@2x.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Snow-Miku22&quot;</span>: <span class="string">&quot;Snow-Miku/3583087@2x.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Snow-Miku23&quot;</span>: <span class="string">&quot;Snow-Miku/3583088@2x.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Snow-Miku24&quot;</span>: <span class="string">&quot;Snow-Miku/3583089@2x.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Snow-Miku25&quot;</span>: <span class="string">&quot;Snow-Miku/3583090@2x.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Snow-Miku26&quot;</span>: <span class="string">&quot;Snow-Miku/3583091@2x.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Snow-Miku27&quot;</span>: <span class="string">&quot;Snow-Miku/3583092@2x.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Snow-Miku28&quot;</span>: <span class="string">&quot;Snow-Miku/3583093@2x.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Snow-Miku29&quot;</span>: <span class="string">&quot;Snow-Miku/3583094@2x.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Snow-Miku30&quot;</span>: <span class="string">&quot;Snow-Miku/3583095@2x.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Snow-Miku31&quot;</span>: <span class="string">&quot;Snow-Miku/3583096@2x.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Snow-Miku32&quot;</span>: <span class="string">&quot;Snow-Miku/3583097@2x.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Snow-Miku33&quot;</span>: <span class="string">&quot;Snow-Miku/3583098@2x.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Snow-Miku34&quot;</span>: <span class="string">&quot;Snow-Miku/3583099@2x.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Snow-Miku35&quot;</span>: <span class="string">&quot;Snow-Miku/3583100@2x.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Snow-Miku36&quot;</span>: <span class="string">&quot;Snow-Miku/3583101@2x.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Snow-Miku37&quot;</span>: <span class="string">&quot;Snow-Miku/3583102@2x.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Snow-Miku38&quot;</span>: <span class="string">&quot;Snow-Miku/3583103@2x.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Snow-Miku39&quot;</span>: <span class="string">&quot;Snow-Miku/3583104@2x.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Snow-Miku40&quot;</span>: <span class="string">&quot;Snow-Miku/3583105@2x.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Mafumafu1&quot;</span>: <span class="string">&quot;Mafumafu/199749454.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Mafumafu2&quot;</span>: <span class="string">&quot;Mafumafu/199749455.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Mafumafu3&quot;</span>: <span class="string">&quot;Mafumafu/199749456.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Mafumafu4&quot;</span>: <span class="string">&quot;Mafumafu/199749457.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Mafumafu5&quot;</span>: <span class="string">&quot;Mafumafu/199749458.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Mafumafu6&quot;</span>: <span class="string">&quot;Mafumafu/199749459.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Mafumafu7&quot;</span>: <span class="string">&quot;Mafumafu/199749460.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Mafumafu8&quot;</span>: <span class="string">&quot;Mafumafu/199749461.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Mafumafu9&quot;</span>: <span class="string">&quot;Mafumafu/199749462.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Mafumafu10&quot;</span>: <span class="string">&quot;Mafumafu/199749463.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Mafumafu11&quot;</span>: <span class="string">&quot;Mafumafu/199749464.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Mafumafu12&quot;</span>: <span class="string">&quot;Mafumafu/199749465.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Mafumafu13&quot;</span>: <span class="string">&quot;Mafumafu/199749466.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Mafumafu14&quot;</span>: <span class="string">&quot;Mafumafu/199749467.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Mafumafu15&quot;</span>: <span class="string">&quot;Mafumafu/199749468.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Mafumafu16&quot;</span>: <span class="string">&quot;Mafumafu/199749469.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Mafumafu17&quot;</span>: <span class="string">&quot;Mafumafu/199749470.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Mafumafu18&quot;</span>: <span class="string">&quot;Mafumafu/199749471.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Mafumafu19&quot;</span>: <span class="string">&quot;Mafumafu/199749472.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Mafumafu20&quot;</span>: <span class="string">&quot;Mafumafu/199749473.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Mafumafu21&quot;</span>: <span class="string">&quot;Mafumafu/199749474.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Mafumafu22&quot;</span>: <span class="string">&quot;Mafumafu/199749475.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Mafumafu23&quot;</span>: <span class="string">&quot;Mafumafu/199749476.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Mafumafu24&quot;</span>: <span class="string">&quot;Mafumafu/199749477.png&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个小的计划表</title>
      <link href="/2020/02/02/%E4%B8%80%E4%B8%AA%E5%B0%8F%E7%9A%84%E8%AE%A1%E5%88%92%E8%A1%A8/"/>
      <url>/2020/02/02/%E4%B8%80%E4%B8%AA%E5%B0%8F%E7%9A%84%E8%AE%A1%E5%88%92%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>放假到现在咸鱼快半个月了啊 不能继续摸鱼了 加上突然爆发的冠状病毒，真就一直死宅在家了，接下来找点事立个计划吧，<br />每个复习一些面试经常提问的点 java基础 http网络之类的，以及还有系统地学习spring boot也称这次两大文献平台免费开放把毕业论文搞定顺便完善一下毕业设计。<br />嗯呐 暂时就这些吧。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>面试题汇总</title>
      <link href="/2020/01/13/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB/"/>
      <url>/2020/01/13/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="java"><a class="markdownIt-Anchor" href="#java"></a> Java</h1><span id="more"></span><h2 id="java基础"><a class="markdownIt-Anchor" href="#java基础"></a> Java基础</h2><ol><li>JDK 和 JRE 有什么区别？</li></ol><ul><li>JDK：Java Development Kit 的简称，java 开发工具包，提供了 java 的开发环境和运行环境。</li><li>JRE：Java Runtime Environment 的简称，java 运行环境，为 java 的运行提供了所需环境。<br />具体来说 JDK 其实包含了 JRE，同时还包含了编译 java 源码的编译器 javac，还包含了很多 java 程序调试和分析的工具。简单来说：如果你需要运行 java 程序，只需安装 JRE 就可以了，如果你需要编写 java 程序，需要安装 JDK。</li></ul><ol start="2"><li>== 和 equals 的区别是什么？</li></ol><h4 id="解读"><a class="markdownIt-Anchor" href="#解读"></a> == 解读</h4><p>对于基本类型和引用类型 == 的作用效果是不同的，如下所示：</p><ul><li>基本类型：比较的是值是否相同；</li><li>引用类型：比较的是引用是否相同；<br />代码:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String x = <span class="string">&quot;string&quot;</span>;</span><br><span class="line">String y = <span class="string">&quot;string&quot;</span>;</span><br><span class="line">String z = <span class="keyword">new</span> String(<span class="string">&quot;string&quot;</span>);</span><br><span class="line">System.out.println(x==y); <span class="comment">// true</span></span><br><span class="line">System.out.println(x==z); <span class="comment">// false</span></span><br><span class="line">System.out.println(x.equals(y)); <span class="comment">// true</span></span><br><span class="line">System.out.println(x.equals(z)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>代码解读：因为 x 和 y 指向的是同一个引用，所以 == 也是 true，而 new String()方法则重写开辟了内存空间，所以 == 结果为 false，而 equals 比较的一直是值，所以结果都为 true。</p><h4 id="equals-解读"><a class="markdownIt-Anchor" href="#equals-解读"></a> equals 解读</h4><p>equals 本质上就是 ==，只不过 String 和 Integer 等重写了 equals 方法，把它变成了值比较。看下面的代码就明白了。</p><p>首先来看默认情况下 equals 比较一个有相同值的对象，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Cat c1 = <span class="keyword">new</span> Cat(<span class="string">&quot;王磊&quot;</span>);</span><br><span class="line">Cat c2 = <span class="keyword">new</span> Cat(<span class="string">&quot;王磊&quot;</span>);</span><br><span class="line">System.out.println(c1.equals(c2)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>输出结果出乎我们的意料，竟然是 false？这是怎么回事，看了 equals 源码就知道了，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原来 equals 本质上就是 ==。</p><p>那问题来了，两个相同值的 String 对象，为什么返回的是 true？代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="keyword">new</span> String(<span class="string">&quot;老王&quot;</span>);</span><br><span class="line">String s2 = <span class="keyword">new</span> String(<span class="string">&quot;老王&quot;</span>);</span><br><span class="line">System.out.println(s1.equals(s2)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>同样的，当我们进入 String 的 equals 方法，找到了答案，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == anObject) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        String anotherString = (String)anObject;</span><br><span class="line">        <span class="keyword">int</span> n = value.length;</span><br><span class="line">        <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">            <span class="keyword">char</span> v1[] = value;</span><br><span class="line">            <span class="keyword">char</span> v2[] = anotherString.value;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原来是 String 重写了 Object 的 equals 方法，把引用比较改成了值比较。</p><p>总结 ：== 对于基本类型来说是值比较，对于引用类型来说是比较的是引用；而 equals 默认情况下是引用比较，只是很多类重写了 equals 方法，比如 String、Integer 等把它变成了值比较，所以一般情况下 equals 比较的是值是否相等。</p><ol start="3"><li>两个对象的 hashCode()相同，则 equals()也一定为 true，对吗？<br />不对，两个对象的 hashCode()相同，equals()不一定 true。<br />代码示例：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String str1 = <span class="string">&quot;通话&quot;</span>;</span><br><span class="line">String str2 = <span class="string">&quot;重地&quot;</span>;</span><br><span class="line">System.out.println(String.format(<span class="string">&quot;str1：%d | str2：%d&quot;</span>,  str1.hashCode(),str2.hashCode()));</span><br><span class="line">System.out.println(str1.equals(str2));</span><br></pre></td></tr></table></figure><p>执行的结果：<br />str1：1179395 | str2：1179395<br />false</p><p>代码解读：很显然“通话”和“重地”的 hashCode() 相同，然而 equals() 则为 false，因为在散列表中，hashCode()相等即两个键值对的哈希值相等，然而哈希值相等，并不一定能得出键值对相等。</p><ol start="4"><li>final 在 java 中有什么作用？</li></ol><ul><li>final 修饰的类叫最终类，该类不能被继承。</li><li>final 修饰的方法不能被重写。</li><li>final 修饰的变量叫常量，常量必须初始化，初始化之后值就不能被修改。</li></ul><ol start="5"><li>java 中的 Math.round(-1.5) 等于多少？<br />等于 -1。<br />其实是四舍六入，但是五是很有讲究的。要是遇到五则取离前一位最近的偶数。比如，这条题目，11.5返回值就是12.0；-11.5返回值就是-11.0；</li><li>基础的数据类型<br />基础类型有 8 种：byte、boolean、char、short、int、float、long、double，而 String 属于对象。</li><li>java 中操作字符串都有哪些类？它们之间有什么区别？<br />操作字符串的类有：String、StringBuffer、StringBuilder。</li></ol><p>String 和 StringBuffer、StringBuilder 的区别在于 String 声明的是不可变的对象，每次操作都会生成新的 String 对象，然后将指针指向新的 String 对象，而 StringBuffer、StringBuilder 可以在原有对象的基础上进行操作，所以在经常改变字符串内容的情况下最好不要使用 String。</p><p>StringBuffer 和 StringBuilder 最大的区别在于，StringBuffer 是线程安全的，而 StringBuilder 是非线程安全的，但 StringBuilder 的性能却高于 StringBuffer，所以在单线程环境下推荐使用 StringBuilder，多线程环境下推荐使用 StringBuffer。<br />8. String str=&quot;i&quot;与 String str=new String(“i”)一样吗？<br />不一样，因为内存的分配方式不一样。String str=&quot;i&quot;的方式，java 虚拟机会将其分配到常量池中；而 String str=new String(“i”) 则会被分到堆内存中。<br />9. 如何将字符串反转？<br />使用 StringBuilder 或者 stringBuffer 的 reverse() 方法。<br />10. String 类的常用方法都有那些？</p><ul><li>indexOf()：返回指定字符的索引。</li><li>charAt()：返回指定索引处的字符。</li><li>replace()：字符串替换。</li><li>trim()：去除字符串两端空白。</li><li>split()：分割字符串，返回一个分割后的字符串数组。</li><li>getBytes()：返回字符串的 byte 类型数组。</li><li>length()：返回字符串长度。</li><li>toLowerCase()：将字符串转成小写字母。</li><li>toUpperCase()：将字符串转成大写字符。</li><li>substring()：截取字符串。</li><li>equals()：字符串比较。</li></ul><ol start="11"><li><p>抽象类必须要有抽象方法吗？<br />不需要，抽象类不一定非要有抽象方法。</p></li><li><p>普通类和抽象类有哪些区别？<br />普通类不能包含抽象方法，抽象类可以包含抽象方法。<br />抽象类不能直接实例化，普通类可以直接实例化。</p></li><li><p>抽象类能使用 final 修饰吗？<br />不能，定义抽象类就是让其他类继承的，如果定义为 final 该类就不能被继承，这样彼此就会产生矛盾，所以 final 不能修饰抽象类</p></li><li><p>接口和抽象类有什么区别？<br />实现：抽象类的子类使用 extends 来继承；接口必须使用 implements 来实现接口。<br />构造函数：抽象类可以有构造函数；接口不能有。<br />main 方法：抽象类可以有 main 方法，并且我们能运行它；接口不能有 main 方法。<br />实现数量：类可以实现很多个接口；但是只能继承一个抽象类。<br />访问修饰符：接口中的方法默认使用 public 修饰；抽象类中的方法可以是任意访问修饰符。</p></li><li><p>java 中 IO 流分为几种？<br />按功能来分：输入流（input）、输出流（output）。</p></li></ol><p>按类型来分：字节流和字符流。</p><p>字节流和字符流的区别是：字节流按 8 位传输以字节为单位输入输出数据，字符流按 16 位传输以字符为单位输入输出数据。<br />16. BIO、NIO、AIO 有什么区别？<br />BIO：Block IO 同步阻塞式 IO，就是我们平常使用的传统 IO，它的特点是模式简单使用方便，并发处理能力低。<br />NIO：New IO 同步非阻塞 IO，是传统 IO 的升级，客户端和服务器端通过 Channel（通道）通讯，实现了多路复用。<br />AIO：Asynchronous IO 是 NIO 的升级，也叫 NIO2，实现了异步非堵塞 IO ，异步 IO 的操作基于事件和回调机制。<br />17. Files的常用方法都有哪些？<br />Files.exists()：检测文件路径是否存在。<br />Files.createFile()：创建文件。<br />Files.createDirectory()：创建文件夹。<br />Files.delete()：删除一个文件或目录。<br />Files.copy()：复制文件。<br />Files.move()：移动文件。<br />Files.size()：查看文件个数。<br />Files.read()：读取文件。<br />Files.write()：写入文件。</p><h2 id="容器"><a class="markdownIt-Anchor" href="#容器"></a> 容器</h2><ol><li><p>java 容器都有哪些？<br /><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190317184953342.png" alt="" /></p></li><li><p>Collection 和 Collections 有什么区别？<br />java.util.Collection 是一个集合接口（集合类的一个顶级接口）。它提供了对集合对象进行基本操作的通用接口方法。Collection接口在Java 类库中有很多具体的实现。Collection接口的意义是为各种具体的集合提供了最大化的统一操作方式，其直接继承接口有List与Set。<br />Collections则是集合类的一个工具类/帮助类，其中提供了一系列静态方法，用于对集合中元素进行排序、搜索以及线程安全等各种操作。</p></li><li><p>List、Set、Map 之间的区别是什么？<br /><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190317185014560.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NoYWRvd196ZWQ=,size_16,color_FFFFFF,t_70" alt="" /></p></li><li><p>HashMap 和 Hashtable 有什么区别？<br />hashMap去掉了HashTable 的contains方法，但是加上了containsValue（）和containsKey（）方法。<br />hashTable同步的，而HashMap是非同步的，效率上比hashTable要高。<br />hashMap允许空键值，而hashTable不允许。</p></li><li><p>如何决定使用 HashMap 还是 TreeMap？<br />对于在Map中插入、删除和定位元素这类操作，HashMap是最好的选择。然而，假如你需要对一个有序的key集合进行遍历，TreeMap是更好的选择。基于你的collection的大小，也许向HashMap中添加元素会更快，将map换为TreeMap进行有序key的遍历。</p></li><li><p>说一下 HashMap 的实现原理？<br />HashMap概述： HashMap是基于哈希表的Map接口的非同步实现。此实现提供所有可选的映射操作，并允许使用null值和null键。此类不保证映射的顺序，特别是它不保证该顺序恒久不变。<br />HashMap的数据结构： 在java编程语言中，最基本的结构就是两种，一个是数组，另外一个是模拟指针（引用），所有的数据结构都可以用这两个基本结构来构造的，HashMap也不例外。HashMap实际上是一个“链表散列”的数据结构，即数组和链表的结合体。<br />当我们往Hashmap中put元素时,首先根据key的hashcode重新计算hash值,根绝hash值得到这个元素在数组中的位置(下标),如果该数组在该位置上已经存放了其他元素,那么在这个位置上的元素将以链表的形式存放,新加入的放在链头,最先加入的放入链尾.如果数组中该位置没有元素,就直接将该元素放到数组的该位置上。<br />需要注意Jdk 1.8中对HashMap的实现做了优化,当链表中的节点数据超过八个之后,该链表会转为红黑树来提高查询效率,从原来的O(n)到O(logn)</p></li><li><p>如何实现数组和 List 之间的转换？<br />List转换成为数组：调用ArrayList的toArray方法。<br />数组转换成为List：调用Arrays的asList方法。</p></li><li><p>ArrayList 和 Vector 的区别是什么？<br />Vector是同步的，而ArrayList不是。然而，如果你寻求在迭代的时候对列表进行改变，你应该使用CopyOnWriteArrayList。<br />ArrayList比Vector快，它因为有同步，不会过载。<br />ArrayList更加通用，因为我们可以使用Collections工具类轻易地获取同步列表和只读列表。</p></li><li><p>说一下 HashSet 的实现原理？</p><ul><li>HashSet底层由HashMap实现</li><li>HashSet的值存放于HashMap的key上</li><li>HashMap的value统一为PRESENT</li></ul></li><li><p>Array 和 ArrayList 有何区别？<br />Array可以容纳基本类型和对象，而ArrayList只能容纳对象。<br />Array是指定大小后不可变的，而ArrayList大小是可变的。<br />Array没有提供ArrayList那么多功能，比如addAll、removeAll和iterator等。</p></li><li><p>在 Queue 中 poll()和 remove()有什么区别？<br />poll() 和 remove() 都是从队列中取出一个元素，但是 poll() 在获取元素失败的时候会返回空，但是 remove() 失败的时候会抛出异常。</p></li><li><p>哪些集合类是线程安全的？</p><p>vector：就比arraylist多了个同步化机制（线程安全），因为效率较低，现在已经不太建议使用。在web应用中，特别是前台页面，往往效率（页面响应速度）是优先考虑的。</p><p>statck：堆栈类，先进后出。</p><p>hashtable：就比hashmap多了个线程安全。</p><p>enumeration：枚举，相当于迭代器。</p></li><li><p>迭代器 Iterator 是什么？</p><p>迭代器是一种设计模式，它是一个对象，它可以遍历并选择序列中的对象，而开发人员不需要了解该序列的底层结构。迭代器通常被称为“轻量级”对象，因为创建它的代价小。</p><ol start="32"><li>Iterator 怎么使用？有什么特点？</li></ol><p>Java中的Iterator功能比较简单，并且只能单向移动：</p><ol><li><p>使用方法iterator()要求容器返回一个Iterator。第一次调用Iterator的next()方法时，它返回序列的第一个元素。注意：iterator()方法是java.lang.Iterable接口,被Collection继承。</p></li><li><p>使用next()获得序列中的下一个元素。</p></li><li><p>使用hasNext()检查序列中是否还有元素。</p></li><li><p>使用remove()将迭代器新返回的元素删除。</p></li></ol><p>Iterator是Java迭代器最简单的实现，为List设计的ListIterator具有更多的功能，它可以从两个方向遍历List，也可以从List中插入和删除元素。</p></li><li><p>Iterator 怎么使用？有什么特点？</p><p>Java中的Iterator功能比较简单，并且只能单向移动：</p><ol><li><p>使用方法iterator()要求容器返回一个Iterator。第一次调用Iterator的next()方法时，它返回序列的第一个元素。注意：iterator()方法是java.lang.Iterable接口,被Collection继承。</p></li><li><p>使用next()获得序列中的下一个元素。</p></li><li><p>使用hasNext()检查序列中是否还有元素。</p></li><li><p>使用remove()将迭代器新返回的元素删除。</p></li></ol><p>Iterator是Java迭代器最简单的实现，为List设计的ListIterator具有更多的功能，它可以从两个方向遍历List，也可以从List中插入和删除元素。</p></li><li><p>Iterator 和 ListIterator 有什么区别？</p><p>Iterator可用来遍历Set和List集合，但是ListIterator只能用来遍历List。</p><p>Iterator对集合只能是前向遍历，ListIterator既可以前向也可以后向。</p><p>ListIterator实现了Iterator接口，并包含其他的功能，比如：增加元素，替换元素，获取前一个和后一个元素的索引，等等。</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>毕业设计</title>
      <link href="/2019/12/12/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
      <url>/2019/12/12/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a class="markdownIt-Anchor" href="#引言"></a> 引言</h2><span id="more"></span><!-- ### 项目背景与问题概述#### 项目背景 基于移动互联网这个全新的时代背景,甚至有业内人士预测随着无线互联蚕食有线联市场,未来可能70%都是无线互联市场,人们日常上网的主要通道将是手机。正是预见到手机用户的无线市场的巨大发展空间,各行各业纷纷加速无线战略布局以抢占先机。移动电子商务未来的巨大发展潜力是吸引京东、当当、卓越以及淘宝等电子商务企业进入这一领域的主要诱因。程善宝指出,淘宝、京东等传统电子商务进入移动电子商务,依附商品渠道、运营经验等方面的优势,在移动电子商务领域会比电信运营商software提供商以及新兴的移动电子商务企业具备更好远景随着移动通信的发展以及互联网向移动终端的普及,网络和用户对移动终端的要求越来越高,而 Symbian, Windows Mobile PalmOS等手机平台过于封闭,不能很好的满足用户的需求,因此市场迫切需要一个开放性很强的平台。经过多年的发展,第三代数字通信(3G技术获得了广泛的接受,它为移动终端用户带来了更快的薮据传输速率。随着3G网络的使用,移动终端不再仅是通讯网络的终端,还将成为互联网的终端。因此,移动终端的应用软件和需要的服务将会有很大的发展空间。           Google为此于2007年11月推出了一个专为移动设备设计的软件平台—一 Android。 Android是一套真正意义上的开放性的移动设备综合平台,它包括操作系统、中间件和一些关键的平台应用。 Android是由 Linux+Java构成的开源软件,允许所有厂商和个人在其基础上进行开发。 android平台的开放性等特点既能促进技术(包括平台自身)的创新,又有助于降低开发成本,还可以使运营商能非常方便地制定自己的特色化的产品。因此,它具有很大的市场发展潜力问题概述    随着网络技术的不断发展，网上购物已经成为消费者的一种消费习惯，不仅服装、日用品等在网上销售火热，还有许多其他行业也在网络销售火热。中国网购市场保持高速增长，网络用户以及电商数量不断增长，2013年网购交易规模超1.85万亿元，2017年将突破4万亿元；2013年网购占零售销售总额比列达8%，2014年预计达10%；2013年网购用户规模突破3亿人，在网民中的使用率接近一半；2013年电商企业数量接近3万家，行业竞争激烈，市场一片光明。#### 问题概述对用户提供的服务有：- 注册登录- 在主界面滚动推荐的商品以及在主界面的滚动推荐下面也有更多推荐的商品。-  搜索想要的商品，加入购物车。并且下订单- 搜索后再打开搜索有搜索历史。- 超时支付系统就会取消订单- 浏览以及修改个人资料主页  网上商城系统普遍存在着没有实际体验，买到假货，运送慢，库存等问题。### 研究的意义和重要性#### 研究的意义现在购物方式多种多样，有网上购物与线下购物，如何让用户在网上购物有更好的体验是我们研究的意义。#### 研究的重要性可以有效的售卖自己的库存，用户也能足不出户的购买好商品，是双赢的局面。本系统就是以这个为目的编写出来的。#### 研究的内容本系统主要分为前端与后端。前后端使用了统一的JAVA语言作为开发语言，均使用了mvp框架；前端为Android 端的App，后端为Spring boot与 Mybatis为框架组成了程序的大体框架；## 需求分析软件需求过程是整个软件开发初始阶段，对软件的品质具有决定性的作用。软件需求工程研究如何理解和说明用户对所开发软件的要求和期望。需求就是以一种清晰、简明、一致且无二义性的方式对一个待开发系统中的各个方面有意义的陈述的集合[4]。需求必须是完整的，足以使设计师和工程师来开发一个使客户满意的软件制品。IEEE软件工程标准词汇表(1997年)中定义需求为[5]：（1）用户解决问题或达到目标所需的条件或能力(Capability)；（2）系统或系统部件要满足合同、标准、规范或其它正式规定文档所需具有的条件或能力；（3）一种反映上面(l)或(2)所描述的条件或能力的文档说明。软件需求包括三个不同的层次：业务需求、用户需求和功能需求（也包括非功能需求）[6]。### 业务需求业务需求(business requirement)是客户对软件制品目标的高层次要求。### 业务描述-能够实现注册登录、浏览以及修改个人资料、商品检索、商品选择并加入购物车、下订单和超时支付系统取消订单等功能，对网上购物的全过程进行管理-实现对网上购物过程中产生的所有业务数据的管理，如订货单、支付记录、搜索记录和发货信息的管理与维护-具有配套的系统后台管理维护功能，能够对商品信息、用户信息、系统日志等信息进行管理与维护，并能够进行对应的权限管理-响应速度合理，安全性较高-系统运行稳定，并且应易于维护### 注册业务流程图<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: 用户注册</span><br><span class="line">account=&gt;operation: 输入用户名</span><br><span class="line">pass=&gt;operation: 输入密码</span><br><span class="line">npass=&gt;operation: 再次输入密码</span><br><span class="line">name=&gt;operation: 输入真实姓名</span><br><span class="line">phone=&gt;operation: 输入手机号码</span><br><span class="line">sex=&gt;operation: 输入性别</span><br><span class="line">cond=&gt;condition: 注册信息是否有误?</span><br><span class="line">e=&gt;end: 进入商城t</span><br><span class="line">st-&gt;account-&gt;pass-&gt;npass-&gt;name-&gt;phone-&gt;sex-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;account</span><br></pre></td></tr></table></figure><h2 id="功能分析"><a class="markdownIt-Anchor" href="#功能分析"></a> 功能分析</h2><p>系统主要有注册登录、修改个人资料、浏览商品、搜索商品、下订单等功能</p><h3 id="角色分析"><a class="markdownIt-Anchor" href="#角色分析"></a> 角色分析</h3><p>以下从网上购物系统的实际需求分析，系统涉及到以下角色：</p><table><thead><tr><th style="text-align:center">角色</th><th style="text-align:center">职责或功能</th></tr></thead><tbody><tr><td style="text-align:center">客户(买家)</td><td style="text-align:center">系统主要参与者，进行用户注册与登录、修改个人资料、搜索商品以及加入购物车、下订单等功能</td></tr><tr><td style="text-align:center">系统管理员</td><td style="text-align:center">管理和维护整个系统的用户组织结构，负责对用户、角色、用户级别的增、删、改、查等管理。</td></tr></tbody></table><h3 id="功能描述"><a class="markdownIt-Anchor" href="#功能描述"></a> 功能描述</h3><ol><li>用户注册与登录<br />用户进行输入账户的帐号密码性别等各种信息来进行注册，并且登录。来实现下一层功能。</li><li>用户通过该网上商城系统用来浏览以及搜索商品</li><li>通过浏览商品来加入购物车或者下订单。</li><li>超时购买将取消订单。<br />4.修改个人信息<br />可以通过个人主页来修改个人信息。<br />5.管理员功能<br />管理员可以增删查改用户的各种信息。</li></ol><h2 id="系统设计"><a class="markdownIt-Anchor" href="#系统设计"></a> 系统设计</h2><p>网上购物系统最主要的就是针对广大用户在互联网上购物的需求和特点进行系统总体结构设计。而在购物过程中，主要是为了应对商品的选购，购物订单的下达，货款的支付，用户信息的处理和查询等操作，以便于整个购物系统的有序的进行和管理，规范化和统一化，对不同模块进行分工管理，最后由系统统一实施。</p><p>系统一共分为商品选购、货款支付、订单管理、发货信息管理共4个模块。其中商品选购主要满足买家通过系统购买商品的功能需求；货款支付主要为了满足买家购买商品时进行付款的功能需；订单管理主要满足买家对自己的订单进行维护的功能需求；发货信息管理主要为了满足买家进行发货信息维护的功能需求；</p><h3 id="功能结构设计"><a class="markdownIt-Anchor" href="#功能结构设计"></a> 功能结构设计</h3><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/12/30/VgANxafsubHoze7.png" alt="1.png" /><br />“商品选购”功能主要目的是为买家提供购买卖家提供的商品的功能；此外，该功能还负责将用户选中的商品放入购物车，对购物车进行管理。因此，商品选购模块主要涉及商品信息的查询获取以及购物车管理两个子模块。其中商品信息获取模块主要分为检索商品和查看商品详细信息两个组成部分.购物车管理又分为将商品放入购物车和将商品从购物车移除和购买数量设置三个部分。 --&gt;</p><h3 id="java后端-涉及技术及框架"><a class="markdownIt-Anchor" href="#java后端-涉及技术及框架"></a> java后端 涉及技术及框架</h3><table><thead><tr><th style="text-align:center">技术</th><th style="text-align:center">说明</th><th style="text-align:center">官网</th></tr></thead><tbody><tr><td style="text-align:center">SpringBoot</td><td style="text-align:center">容器+MVC框架</td><td style="text-align:center"><a href="https://spring.io/projects/spring-boot">spring.io</a></td></tr><tr><td style="text-align:center">MyBatis</td><td style="text-align:center">ORM框架</td><td style="text-align:center"><a href="http://www.mybatis.org/mybatis-3/zh/index.html">mybstis.org</a></td></tr><tr><td style="text-align:center">MyBatisGenerator</td><td style="text-align:center">数据层代码生成</td><td style="text-align:center"><a href="http://www.mybatis.org/generator/index.html">mybstis.org</a></td></tr><tr><td style="text-align:center">PageHelperMyBatis</td><td style="text-align:center">物理分页插件</td><td style="text-align:center"><a href="http://git.oschina.net/free/Mybatis_PageHelper">oschina.net</a></td></tr><tr><td style="text-align:center">Swagger-UI</td><td style="text-align:center">文档生产工具</td><td style="text-align:center"><a href="https://github.com/swagger-api/swagger-ui">swagger-api</a></td></tr><tr><td style="text-align:center">Redis</td><td style="text-align:center">缓存</td><td style="text-align:center"><a href="https://redis.io/">redis.io</a></td></tr></tbody></table><h3 id="android-端-涉及技术及框架"><a class="markdownIt-Anchor" href="#android-端-涉及技术及框架"></a> Android 端 涉及技术及框架</h3><table><thead><tr><th style="text-align:center">技术</th><th style="text-align:center">说明</th><th style="text-align:center">官网或github地址</th></tr></thead><tbody><tr><td style="text-align:center">rxjava3</td><td style="text-align:center">异步框架</td><td style="text-align:center"><a href="http://reactivex.io/">reactivex.io</a></td></tr><tr><td style="text-align:center">retrofit2</td><td style="text-align:center">网络框架</td><td style="text-align:center"><a href="https://square.github.io/retrofit/">square.github.io</a></td></tr><tr><td style="text-align:center">XUI</td><td style="text-align:center">UI框架</td><td style="text-align:center"><a href="https://github.com/xuexiangjys/XUI">xuexiangjys</a></td></tr><tr><td style="text-align:center">glide</td><td style="text-align:center">图片加载框架</td><td style="text-align:center"><a href="https://muyangmin.github.io/glide-docs-cn/">muyangmin</a></td></tr><tr><td style="text-align:center">gson</td><td style="text-align:center">json解析工具</td><td style="text-align:center"><a href="https://github.com/google/gson">gson</a></td></tr></tbody></table><h3 id="数据库"><a class="markdownIt-Anchor" href="#数据库"></a> 数据库</h3><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/12/12/g2Qot58ZM19iJpw.png" alt="UTOOLS1576138436432.png" /></p><h3 id="接口"><a class="markdownIt-Anchor" href="#接口"></a> 接口</h3><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/12/12/sm8QBcZLhneJw6W.png" alt="UTOOLS1576138522209.png" /></p><h3 id="mybatis-generator插件"><a class="markdownIt-Anchor" href="#mybatis-generator插件"></a> Mybatis Generator插件</h3><h4 id="生成代码"><a class="markdownIt-Anchor" href="#生成代码"></a> 生成代码</h4><ul><li>引入 MyBatis Generator 依赖</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mybatis-generator-core&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.3.7&lt;/version&gt;</span><br><span class="line">&lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ul><li>引入 MyBatis Generator Maven 插件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.3.7&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;configurationFile&gt;src/main/resources/mybatis-generator.xml&lt;/configurationFile&gt;</span><br><span class="line">&lt;overwrite&gt;true&lt;/overwrite&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;8.0.12&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><ul><li>准备 MyBatis Generator 配置文件<br />MyBatis Generator 需要一个 xml格式的配置文件，该文件的位置配在了引入 MyBatis Generator Maven 插件的 xml配置里，即src/main/resources/mybatis-generator.xml</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE generatorConfiguration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;generatorConfiguration&gt;</span><br><span class="line"></span><br><span class="line">    &lt;context id=&quot;MySql&quot; defaultModelType=&quot;flat&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;plugin type=&quot;org.mybatis.generator.plugins.SerializablePlugin&quot; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;jdbcConnection</span><br><span class="line">                driverClass=&quot;com.mysql.cj.jdbc.Driver&quot;</span><br><span class="line">                connectionURL=&quot;jdbc:mysql://localhost:3306/shopping?serverTimezone=UTC&amp;amp;useSSL=false&amp;amp;allowPublicKeyRetrieval=true&amp;amp;nullCatalogMeansCurrent=true&quot;</span><br><span class="line">                userId=&quot;root&quot;</span><br><span class="line">                password=&quot;密码&quot; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;javaModelGenerator targetPackage=&quot;com.example.mall.entity&quot; targetProject=&quot;src/main/java&quot;&gt;&lt;/javaModelGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;sqlMapGenerator targetPackage=&quot;mapper&quot;  targetProject=&quot;src/main/resources&quot;&gt;&lt;/sqlMapGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;javaClientGenerator targetPackage=&quot;com.example.mall.mapper&quot; targetProject=&quot;src/main/java&quot; type=&quot;ANNOTATEDMAPPER&quot;&gt;&lt;/javaClientGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;table tableName=&quot;user&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;modelOnly&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/context&gt;</span><br><span class="line"></span><br><span class="line">&lt;/generatorConfiguration&gt;</span><br></pre></td></tr></table></figure><ul><li>直接生成简单crud</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;user&quot;</span> <span class="attr">enableCountByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">enableUpdateByExample</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;modelOnly&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>connectionUrl中含有&amp;符号问题<br />在&amp;字符后添加 amp; 即改为 '&amp;'即可。</li><li>&lt; jdbcConnection /&gt; 数据库连接配置，至关重要</li><li><javaModelGenerator /> 指定自动生成的 POJO置于哪个包下</li><li><sqlMapGenerator /> 指定自动生成的 mapper.xml置于哪个包下</li><li><javaClientGenerator /> 指定自动生成的 DAO接口置于哪个包下</li><li><table /> 指定数据表名，可以使用_和%通配符</li></ul><h3 id="rxjava3与retrofit2配合使用模板"><a class="markdownIt-Anchor" href="#rxjava3与retrofit2配合使用模板"></a> rxjava3与retrofit2配合使用模板</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">   Retrofit retrofit = new Retrofit.Builder()</span><br><span class="line">           //这里建议：- Base URL: 总是以/结尾；- @Url: 不要以/开头</span><br><span class="line">           .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">           .addCallAdapterFactory(RxJavaCallAdapterFactory.create())//新的配置</span><br><span class="line">           .baseUrl(&quot;http://mymall.free.idcfengye.com&quot;)</span><br><span class="line">           .build();</span><br><span class="line">   MyApi apiStores = retrofit.create(MyApi.class);</span><br><span class="line">                   apiStores.login(accounttext, passwordtext)        //获取Observable对象</span><br><span class="line">                           .subscribeOn(Schedulers.newThread())//请求在新的线程中执行</span><br><span class="line">                           .observeOn(AndroidSchedulers.mainThread())//最后在主线程中执行</span><br><span class="line">                           .subscribe(new Subscriber&lt;CommonResult&lt;User&gt;&gt;() &#123;</span><br><span class="line">                               @Override</span><br><span class="line">                               public void onCompleted() &#123;</span><br><span class="line">                                   mMiniLoadingDialog.dismiss();</span><br><span class="line"></span><br><span class="line">                               &#125;</span><br><span class="line"></span><br><span class="line">                               @Override</span><br><span class="line">                               public void onError(Throwable e) &#123;</span><br><span class="line">                                   Log.i(&quot;wxl&quot;, &quot;response=&quot; + e.getMessage());</span><br><span class="line">                                 //  mMiniLoadingDialog.dismiss();</span><br><span class="line">                                   //请求失败</span><br><span class="line">                               &#125;</span><br><span class="line"></span><br><span class="line">                               @Override</span><br><span class="line">                               public void onNext(CommonResult&lt;User&gt; commonResult) &#123;</span><br><span class="line">                                   Log.i(&quot;wxl&quot;, &quot;response=&quot; + commonResult.getMessage());</span><br><span class="line"></span><br><span class="line">                                   if(commonResult.getCode()==200)&#123;</span><br><span class="line">                                       SnackbarUtils.Short(view, commonResult.getMessage())</span><br><span class="line">                                               .confirm()</span><br><span class="line">                                               .radius(30, 0, Color.GREEN)</span><br><span class="line">                                               .show();</span><br><span class="line">                                       PreferenceManager.getDefaultSharedPreferences(getApplicationContext()).edit().putString(&quot;name&quot;, accounttext).apply();</span><br><span class="line">                                       PreferenceManager.getDefaultSharedPreferences(getApplicationContext()).edit().putString(&quot;pass&quot;, passwordtext).apply();</span><br><span class="line">                                       startActivity(new Intent(LoginActivity.this,MainActivity.class));</span><br><span class="line"></span><br><span class="line">                                   &#125;else&#123;</span><br><span class="line">                                       SnackbarUtils.Short(view, commonResult.getMessage())</span><br><span class="line">                                               .danger()</span><br><span class="line">                                               .radius(30, 1, Color.GRAY)</span><br><span class="line">                                               .show();</span><br><span class="line">                                   &#125;</span><br><span class="line">                                   Log.i(&quot;wxl&quot;, &quot;response=&quot; );</span><br><span class="line">                                   //请求成功</span><br><span class="line">                               &#125;</span><br><span class="line">                           &#125;);</span><br><span class="line"></span><br><span class="line">@FormUrlEncoded</span><br><span class="line">   @POST(&quot;/user/login&quot;)</span><br><span class="line">   Observable&lt;CommonResult&lt;User&gt;&gt; login(@Field(&quot;account&quot;) String  account,</span><br><span class="line">                                        @Field(&quot;password&quot;) String  password);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="git"><a class="markdownIt-Anchor" href="#git"></a> git</h2><h3 id="git-更新出现stderr-error-bad-signature-fatal-index-file-corrupt"><a class="markdownIt-Anchor" href="#git-更新出现stderr-error-bad-signature-fatal-index-file-corrupt"></a> git 更新出现stderr: error: bad signature fatal: index file corrupt</h3><p>因为git在更新操作的时候会更新.git文件夹下的index文件，方便下一次更新的时候会找到更新的节点，而现在电脑突然崩溃，这个文件可能只更新了一部分，甚至直接导致这个文件破坏，所以再次更新的时候，发现这个index文件信息不全或者文件无法读取，这样就会出现上面的提示</p><blockquote><p>到.git平行目录下依次执行以下命令<br />$ rm -f .git/index     删除文件index，也可以手动删除<br />$ git reset       这个是git命名可以恢复指定的版本号，这里没有就默认恢复上一次正确的文件<br />重启即可<br />然后发现自己本地的代码都丢完了。。。。。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目管理作业</title>
      <link href="/2019/12/12/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E4%BD%9C%E4%B8%9A/"/>
      <url>/2019/12/12/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E4%BD%9C%E4%B8%9A/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a class="markdownIt-Anchor" href="#引言"></a> 引言</h2><span id="more"></span><h3 id="项目背景与问题概述"><a class="markdownIt-Anchor" href="#项目背景与问题概述"></a> 项目背景与问题概述</h3><h4 id="项目背景"><a class="markdownIt-Anchor" href="#项目背景"></a> 项目背景</h4><p>基于移动互联网这个全新的时代背景,甚至有业内人士预测随着无线互联蚕食有线联市场,未来可能70%都是无线互联市场,人们日常上网的主要通道将是手机。正是预见到手机用户的无线市场的巨大发展空间,各行各业纷纷加速无线战略布局以抢占先机。移动电子商务未来的巨大发展潜力是吸引京东、当当、卓越以及淘宝等电子商务企业进入这一领域的主要诱因。程善宝指出,淘宝、京东等传统电子商务进入移动电子商务,依附商品渠道、运营经验等方面的优势,在移动电子商务领域会比电信运营商software提供商以及新兴的移动电子商务企业具备更好远景随着移动通信的发展以及互联网向移动终端的普及,网络和用户对移动终端的要求越来越高,而 Symbian, Windows Mobile PalmOS等手机平台过于封闭,不能很好的满足用户的需求,因此市场迫切需要一个开放性很强的平台。经过多年的发展,第三代数字通信(3G技术获得了广泛的接受,它为移动终端用户带来了更快的薮据传输速率。随着3G网络的使用,移动终端不再仅是通讯网络的终端,还将成为互联网的终端。因此,移动终端的应用软件和需要的服务将会有很大的发展空间。</p><p>Google为此于2007年11月推出了一个专为移动设备设计的软件平台—一 Android。 Android是一套真正意义上的开放性的移动设备综合平台,它包括操作系统、中间件和一些关键的平台应用。 Android是由 Linux+Java构成的开源软件,允许所有厂商和个人在其基础上进行开发。 android平台的开放性等特点既能促进技术(包括平台自身)的创新,又有助于降低开发成本,还可以使运营商能非常方便地制定自己的特色化的产品。因此,它具有很大的市场发展潜力问题概述</p><p>随着网络技术的不断发展，网上购物已经成为消费者的一种消费习惯，不仅服装、日用品等在网上销售火热，还有许多其他行业也在网络销售火热。中国网购市场保持高速增长，网络用户以及电商数量不断增长，2013年网购交易规模超1.85万亿元，2017年将突破4万亿元；2013年网购占零售销售总额比列达8%，2014年预计达10%；2013年网购用户规模突破3亿人，在网民中的使用率接近一半；2013年电商企业数量接近3万家，行业竞争激烈，市场一片光明。</p><h4 id="问题概述"><a class="markdownIt-Anchor" href="#问题概述"></a> 问题概述</h4><p>对用户提供的服务有：</p><ul><li>注册登录</li><li>在主界面滚动推荐的商品以及在主界面的滚动推荐下面也有更多推荐的商品。</li><li>搜索想要的商品，加入购物车。并且下订单</li><li>搜索后再打开搜索有搜索历史。</li><li>超时支付系统就会取消订单</li><li>浏览以及修改个人资料主页<br />网上商城系统普遍存在着没有实际体验，买到假货，运送慢，库存等问题。</li></ul><h3 id="研究的意义和重要性"><a class="markdownIt-Anchor" href="#研究的意义和重要性"></a> 研究的意义和重要性</h3><h4 id="研究的意义"><a class="markdownIt-Anchor" href="#研究的意义"></a> 研究的意义</h4><p>现在购物方式多种多样，有网上购物与线下购物，如何让用户在网上购物有更好的体验是我们研究的意义。</p><h4 id="研究的重要性"><a class="markdownIt-Anchor" href="#研究的重要性"></a> 研究的重要性</h4><p>可以有效的售卖自己的库存，用户也能足不出户的购买好商品，是双赢的局面。本系统就是以这个为目的编写出来的。</p><h4 id="研究的内容"><a class="markdownIt-Anchor" href="#研究的内容"></a> 研究的内容</h4><p>本系统主要分为前端与后端。前后端使用了统一的JAVA语言作为开发语言，均使用了mvp框架；前端为Android 端的App，后端为Spring boot与 Mybatis为框架组成了程序的大体框架；</p><h2 id="需求分析"><a class="markdownIt-Anchor" href="#需求分析"></a> 需求分析</h2><p>软件需求过程是整个软件开发初始阶段，对软件的品质具有决定性的作用。软件需求工程研究如何理解和说明用户对所开发软件的要求和期望。<br />需求就是以一种清晰、简明、一致且无二义性的方式对一个待开发系统中的各个方面有意义的陈述的集合[4]。需求必须是完整的，足以使设计师和工程师来开发一个使客户满意的软件制品。<br />IEEE软件工程标准词汇表(1997年)中定义需求为[5]：<br />（1）用户解决问题或达到目标所需的条件或能力(Capability)；<br />（2）系统或系统部件要满足合同、标准、规范或其它正式规定文档所需具有的条件或能力；<br />（3）一种反映上面(l)或(2)所描述的条件或能力的文档说明。<br />软件需求包括三个不同的层次：业务需求、用户需求和功能需求（也包括非功能需求）[6]。</p><h3 id="业务需求"><a class="markdownIt-Anchor" href="#业务需求"></a> 业务需求</h3><p>业务需求(business requirement)是客户对软件制品目标的高层次要求。</p><h3 id="业务描述"><a class="markdownIt-Anchor" href="#业务描述"></a> 业务描述</h3><ul><li>能够实现注册登录、浏览以及修改个人资料、商品检索、商品选择并加入购物车、下订单和超时支付系统取消订单等功能，对网上购物的全过程进行管理</li><li>实现对网上购物过程中产生的所有业务数据的管理，如订货单、支付记录、搜索记录和发货信息的管理与维护</li><li>具有配套的系统后台管理维护功能，能够对商品信息、用户信息、系统日志等信息进行管理与维护，并能够进行对应的权限管理</li><li>响应速度合理，安全性较高</li><li>系统运行稳定，并且应易于维护</li></ul><h3 id="注册业务流程图"><a class="markdownIt-Anchor" href="#注册业务流程图"></a> 注册业务流程图</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: 用户注册</span><br><span class="line">account=&gt;operation: 输入用户名</span><br><span class="line">pass=&gt;operation: 输入密码</span><br><span class="line">npass=&gt;operation: 再次输入密码</span><br><span class="line">name=&gt;operation: 输入真实姓名</span><br><span class="line">phone=&gt;operation: 输入手机号码</span><br><span class="line">sex=&gt;operation: 输入性别</span><br><span class="line">cond=&gt;condition: 注册信息是否有误?</span><br><span class="line">e=&gt;end: 进入商城t</span><br><span class="line">st-&gt;account-&gt;pass-&gt;npass-&gt;name-&gt;phone-&gt;sex-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;account</span><br></pre></td></tr></table></figure><h2 id="功能分析"><a class="markdownIt-Anchor" href="#功能分析"></a> 功能分析</h2><p>系统主要有注册登录、修改个人资料、浏览商品、搜索商品、下订单等功能</p><h3 id="角色分析"><a class="markdownIt-Anchor" href="#角色分析"></a> 角色分析</h3><p>以下从网上购物系统的实际需求分析，系统涉及到以下角色：</p><table><thead><tr><th style="text-align:center">角色</th><th style="text-align:center">职责或功能</th></tr></thead><tbody><tr><td style="text-align:center">客户(买家)</td><td style="text-align:center">系统主要参与者，进行用户注册与登录、修改个人资料、搜索商品以及加入购物车、下订单等功能</td></tr><tr><td style="text-align:center">系统管理员</td><td style="text-align:center">管理和维护整个系统的用户组织结构，负责对用户、角色、用户级别的增、删、改、查等管理。</td></tr></tbody></table><h3 id="功能描述"><a class="markdownIt-Anchor" href="#功能描述"></a> 功能描述</h3><ol><li>用户注册与登录<br />用户进行输入账户的帐号密码性别等各种信息来进行注册，并且登录。来实现下一层功能。</li><li>用户通过该网上商城系统用来浏览以及搜索商品</li><li>通过浏览商品来加入购物车或者下订单。</li><li>超时购买将取消订单。<br />4.修改个人信息<br />可以通过个人主页来修改个人信息。<br />5.管理员功能<br />管理员可以增删查改用户的各种信息。</li></ol><h2 id="系统设计"><a class="markdownIt-Anchor" href="#系统设计"></a> 系统设计</h2><p>网上购物系统最主要的就是针对广大用户在互联网上购物的需求和特点进行系统总体结构设计。而在购物过程中，主要是为了应对商品的选购，购物订单的下达，货款的支付，用户信息的处理和查询等操作，以便于整个购物系统的有序的进行和管理，规范化和统一化，对不同模块进行分工管理，最后由系统统一实施。</p><p>系统一共分为商品选购、货款支付、订单管理、发货信息管理共4个模块。其中商品选购主要满足买家通过系统购买商品的功能需求；货款支付主要为了满足买家购买商品时进行付款的功能需；订单管理主要满足买家对自己的订单进行维护的功能需求；发货信息管理主要为了满足买家进行发货信息维护的功能需求；</p><h3 id="功能结构设计"><a class="markdownIt-Anchor" href="#功能结构设计"></a> 功能结构设计</h3><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/12/30/VgANxafsubHoze7.png" alt="1.png" /><br />“商品选购”功能主要目的是为买家提供购买卖家提供的商品的功能；此外，该功能还负责将用户选中的商品放入购物车，对购物车进行管理。因此，商品选购模块主要涉及商品信息的查询获取以及购物车管理两个子模块。其中商品信息获取模块主要分为检索商品和查看商品详细信息两个组成部分.购物车管理又分为将商品放入购物车和将商品从购物车移除和购买数量设置三个部分。</p><h3 id="java后端-涉及技术及框架"><a class="markdownIt-Anchor" href="#java后端-涉及技术及框架"></a> java后端 涉及技术及框架</h3><table><thead><tr><th style="text-align:center">技术</th><th style="text-align:center">说明</th><th style="text-align:center">官网</th></tr></thead><tbody><tr><td style="text-align:center">SpringBoot</td><td style="text-align:center">容器+MVC框架</td><td style="text-align:center"><a href="https://spring.io/projects/spring-boot">spring.io</a></td></tr><tr><td style="text-align:center">MyBatis</td><td style="text-align:center">ORM框架</td><td style="text-align:center"><a href="http://www.mybatis.org/mybatis-3/zh/index.html">mybstis.org</a></td></tr><tr><td style="text-align:center">MyBatisGenerator</td><td style="text-align:center">数据层代码生成</td><td style="text-align:center"><a href="http://www.mybatis.org/generator/index.html">mybstis.org</a></td></tr><tr><td style="text-align:center">PageHelperMyBatis</td><td style="text-align:center">物理分页插件</td><td style="text-align:center"><a href="http://git.oschina.net/free/Mybatis_PageHelper">oschina.net</a></td></tr><tr><td style="text-align:center">Swagger-UI</td><td style="text-align:center">文档生产工具</td><td style="text-align:center"><a href="https://github.com/swagger-api/swagger-ui">swagger-api</a></td></tr><tr><td style="text-align:center">Redis</td><td style="text-align:center">缓存</td><td style="text-align:center"><a href="https://redis.io/">redis.io</a></td></tr></tbody></table><h3 id="android-端-涉及技术及框架"><a class="markdownIt-Anchor" href="#android-端-涉及技术及框架"></a> Android 端 涉及技术及框架</h3><table><thead><tr><th style="text-align:center">技术</th><th style="text-align:center">说明</th><th style="text-align:center">官网或github地址</th></tr></thead><tbody><tr><td style="text-align:center">rxjava3</td><td style="text-align:center">异步框架</td><td style="text-align:center"><a href="http://reactivex.io/">reactivex.io</a></td></tr><tr><td style="text-align:center">retrofit2</td><td style="text-align:center">网络框架</td><td style="text-align:center"><a href="https://square.github.io/retrofit/">square.github.io</a></td></tr><tr><td style="text-align:center">XUI</td><td style="text-align:center">UI框架</td><td style="text-align:center"><a href="https://github.com/xuexiangjys/XUI">xuexiangjys</a></td></tr><tr><td style="text-align:center">glide</td><td style="text-align:center">图片加载框架</td><td style="text-align:center"><a href="https://muyangmin.github.io/glide-docs-cn/">muyangmin</a></td></tr><tr><td style="text-align:center">gson</td><td style="text-align:center">json解析工具</td><td style="text-align:center"><a href="https://github.com/google/gson">gson</a></td></tr></tbody></table><h3 id="数据库"><a class="markdownIt-Anchor" href="#数据库"></a> 数据库</h3><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/12/12/g2Qot58ZM19iJpw.png" alt="UTOOLS1576138436432.png" /></p><h3 id="接口"><a class="markdownIt-Anchor" href="#接口"></a> 接口</h3><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/12/12/sm8QBcZLhneJw6W.png" alt="UTOOLS1576138522209.png" /></p><h3 id="mybatis-generator插件"><a class="markdownIt-Anchor" href="#mybatis-generator插件"></a> Mybatis Generator插件</h3><h4 id="生成代码"><a class="markdownIt-Anchor" href="#生成代码"></a> 生成代码</h4><ul><li>引入 MyBatis Generator 依赖</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mybatis-generator-core&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.3.7&lt;/version&gt;</span><br><span class="line">&lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ul><li>引入 MyBatis Generator Maven 插件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.3.7&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;configurationFile&gt;src/main/resources/mybatis-generator.xml&lt;/configurationFile&gt;</span><br><span class="line">&lt;overwrite&gt;true&lt;/overwrite&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;8.0.12&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><ul><li>准备 MyBatis Generator 配置文件<br />MyBatis Generator 需要一个 xml格式的配置文件，该文件的位置配在了引入 MyBatis Generator Maven 插件的 xml配置里，即src/main/resources/mybatis-generator.xml</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE generatorConfiguration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;generatorConfiguration&gt;</span><br><span class="line"></span><br><span class="line">    &lt;context id=&quot;MySql&quot; defaultModelType=&quot;flat&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;plugin type=&quot;org.mybatis.generator.plugins.SerializablePlugin&quot; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;jdbcConnection</span><br><span class="line">                driverClass=&quot;com.mysql.cj.jdbc.Driver&quot;</span><br><span class="line">                connectionURL=&quot;jdbc:mysql://localhost:3306/shopping?serverTimezone=UTC&amp;amp;useSSL=false&amp;amp;allowPublicKeyRetrieval=true&amp;amp;nullCatalogMeansCurrent=true&quot;</span><br><span class="line">                userId=&quot;root&quot;</span><br><span class="line">                password=&quot;密码&quot; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;javaModelGenerator targetPackage=&quot;com.example.mall.entity&quot; targetProject=&quot;src/main/java&quot;&gt;&lt;/javaModelGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;sqlMapGenerator targetPackage=&quot;mapper&quot;  targetProject=&quot;src/main/resources&quot;&gt;&lt;/sqlMapGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;javaClientGenerator targetPackage=&quot;com.example.mall.mapper&quot; targetProject=&quot;src/main/java&quot; type=&quot;ANNOTATEDMAPPER&quot;&gt;&lt;/javaClientGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;table tableName=&quot;user&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;modelOnly&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/context&gt;</span><br><span class="line"></span><br><span class="line">&lt;/generatorConfiguration&gt;</span><br></pre></td></tr></table></figure><ul><li>直接生成简单crud</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;user&quot;</span> <span class="attr">enableCountByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">enableUpdateByExample</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;modelOnly&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>connectionUrl中含有&amp;符号问题<br />在&amp;字符后添加 amp; 即改为 '&amp;'即可。</li><li>&lt; jdbcConnection /&gt; 数据库连接配置，至关重要</li><li><javaModelGenerator /> 指定自动生成的 POJO置于哪个包下</li><li><sqlMapGenerator /> 指定自动生成的 mapper.xml置于哪个包下</li><li><javaClientGenerator /> 指定自动生成的 DAO接口置于哪个包下</li><li><table /> 指定数据表名，可以使用_和%通配符</li></ul><h3 id="rxjava3与retrofit2配合使用模板"><a class="markdownIt-Anchor" href="#rxjava3与retrofit2配合使用模板"></a> rxjava3与retrofit2配合使用模板</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">   Retrofit retrofit = new Retrofit.Builder()</span><br><span class="line">           //这里建议：- Base URL: 总是以/结尾；- @Url: 不要以/开头</span><br><span class="line">           .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">           .addCallAdapterFactory(RxJavaCallAdapterFactory.create())//新的配置</span><br><span class="line">           .baseUrl(&quot;http://mymall.free.idcfengye.com&quot;)</span><br><span class="line">           .build();</span><br><span class="line">   MyApi apiStores = retrofit.create(MyApi.class);</span><br><span class="line">                   apiStores.login(accounttext, passwordtext)        //获取Observable对象</span><br><span class="line">                           .subscribeOn(Schedulers.newThread())//请求在新的线程中执行</span><br><span class="line">                           .observeOn(AndroidSchedulers.mainThread())//最后在主线程中执行</span><br><span class="line">                           .subscribe(new Subscriber&lt;CommonResult&lt;User&gt;&gt;() &#123;</span><br><span class="line">                               @Override</span><br><span class="line">                               public void onCompleted() &#123;</span><br><span class="line">                                   mMiniLoadingDialog.dismiss();</span><br><span class="line"></span><br><span class="line">                               &#125;</span><br><span class="line"></span><br><span class="line">                               @Override</span><br><span class="line">                               public void onError(Throwable e) &#123;</span><br><span class="line">                                   Log.i(&quot;wxl&quot;, &quot;response=&quot; + e.getMessage());</span><br><span class="line">                                 //  mMiniLoadingDialog.dismiss();</span><br><span class="line">                                   //请求失败</span><br><span class="line">                               &#125;</span><br><span class="line"></span><br><span class="line">                               @Override</span><br><span class="line">                               public void onNext(CommonResult&lt;User&gt; commonResult) &#123;</span><br><span class="line">                                   Log.i(&quot;wxl&quot;, &quot;response=&quot; + commonResult.getMessage());</span><br><span class="line"></span><br><span class="line">                                   if(commonResult.getCode()==200)&#123;</span><br><span class="line">                                       SnackbarUtils.Short(view, commonResult.getMessage())</span><br><span class="line">                                               .confirm()</span><br><span class="line">                                               .radius(30, 0, Color.GREEN)</span><br><span class="line">                                               .show();</span><br><span class="line">                                       PreferenceManager.getDefaultSharedPreferences(getApplicationContext()).edit().putString(&quot;name&quot;, accounttext).apply();</span><br><span class="line">                                       PreferenceManager.getDefaultSharedPreferences(getApplicationContext()).edit().putString(&quot;pass&quot;, passwordtext).apply();</span><br><span class="line">                                       startActivity(new Intent(LoginActivity.this,MainActivity.class));</span><br><span class="line"></span><br><span class="line">                                   &#125;else&#123;</span><br><span class="line">                                       SnackbarUtils.Short(view, commonResult.getMessage())</span><br><span class="line">                                               .danger()</span><br><span class="line">                                               .radius(30, 1, Color.GRAY)</span><br><span class="line">                                               .show();</span><br><span class="line">                                   &#125;</span><br><span class="line">                                   Log.i(&quot;wxl&quot;, &quot;response=&quot; );</span><br><span class="line">                                   //请求成功</span><br><span class="line">                               &#125;</span><br><span class="line">                           &#125;);</span><br><span class="line"></span><br><span class="line">@FormUrlEncoded</span><br><span class="line">   @POST(&quot;/user/login&quot;)</span><br><span class="line">   Observable&lt;CommonResult&lt;User&gt;&gt; login(@Field(&quot;account&quot;) String  account,</span><br><span class="line">                                        @Field(&quot;password&quot;) String  password);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="git"><a class="markdownIt-Anchor" href="#git"></a> git</h2><h3 id="git-更新出现stderr-error-bad-signature-fatal-index-file-corrupt"><a class="markdownIt-Anchor" href="#git-更新出现stderr-error-bad-signature-fatal-index-file-corrupt"></a> git 更新出现stderr: error: bad signature fatal: index file corrupt</h3><p>因为git在更新操作的时候会更新.git文件夹下的index文件，方便下一次更新的时候会找到更新的节点，而现在电脑突然崩溃，这个文件可能只更新了一部分，甚至直接导致这个文件破坏，所以再次更新的时候，发现这个index文件信息不全或者文件无法读取，这样就会出现上面的提示</p><blockquote><p>到.git平行目录下依次执行以下命令<br />$ rm -f .git/index     删除文件index，也可以手动删除<br />$ git reset       这个是git命名可以恢复指定的版本号，这里没有就默认恢复上一次正确的文件<br />重启即可<br />然后发现自己本地的代码都丢完了。。。。。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软考笔记</title>
      <link href="/2019/10/03/%E8%BD%AF%E8%80%83%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/10/03/%E8%BD%AF%E8%80%83%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="软考笔记"><a class="markdownIt-Anchor" href="#软考笔记"></a> 软考笔记</h1><span id="more"></span><h2 id="计算机组成原理与体系结构"><a class="markdownIt-Anchor" href="#计算机组成原理与体系结构"></a> 计算机组成原理与体系结构</h2><h3 id="数据的表示"><a class="markdownIt-Anchor" href="#数据的表示"></a> 数据的表示</h3><ul><li><a href="https://baijiahao.baidu.com/s?id=1600356820752520271&amp;wfr=spider&amp;for=pc">进制转换</a></li><li>符号数（原码反码补码移码）</li><li>原码</li></ul><blockquote><p>正数的原码等于自身的二进制数，负数的原码第一位为1(符号位，表示负数)，后面为自身的二进制数</p></blockquote><ul><li>反码</li></ul><blockquote><p>正数的反码等于自身的二进制数，负数的反码符号位不动，其余各位按位取反</p></blockquote><ul><li>补码</li></ul><blockquote><p>正数的补码等于自身的二进制数，负数的补码是在反码的基础上+1</p></blockquote><ul><li>移码(增码)</li></ul><blockquote><p>无论正负数，只要将其补码的符号位取反即可</p></blockquote><ul><li>符号数的应用<br />在计算机中，最适合数字加减运算的数字编码是补码，最适合表示浮点数阶码的数字编码是移码。</li><li>浮点数运算<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/10/02/lWChw6vdg7yqjX4.png" alt="UTOOLS1570021206390.png" /></li></ul><blockquote><p>对阶 ——尾数计算 —— 结果格式化</p></blockquote><h3 id="cpu"><a class="markdownIt-Anchor" href="#cpu"></a> cpu</h3><ul><li>CPU结构（运算器与控制器的组成)<br />运算器、控制器、寄存器和内部总线，其中控制器不仅要保证程序的正确执行，而且要能够处理异常事件。<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/10/02/u2iZEIayJ5dFf7o.png" alt="CPU结构（运算器与控制器的组成)" /></li><li>Flynn分类法简介<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/10/02/IcKeEazCdMfuxUl.png" alt="Flynn分类法简介" /></li><li>CISC(早期 复杂)和RISC（简单） 指令<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/10/02/rDWldNtXSOTGsCM.png" alt="捕获.PNG" /></li><li>流水线的基本概念</li></ul><blockquote><p>流水线是指在程序执行时多条指令重叠进行操作的一种准并行处理实现技<br />术。各种部件同时处理是针对不同指令而言的，它们可同时为多条指令的<br />不同部分进行工作，以提高各部件的利用率和指令的平均执行速度</p></blockquote><ul><li>流水线周期及流水线执行时间计算</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/10/02/Eo4u2AS3paqkwTy.png" alt="流水线周期及流水线执行时间计算." /></p><p>考试时优先为理论时间<br />k为多少部分 例题中为k=3</p><ul><li>流水线吞吐量的计算</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/10/03/1WsV9LCH3oZqrfz.png" alt="流水线吞吐量的计算" /></p><ul><li>流水线吞效率的计算</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/10/03/OICVHQbMftSu4U6.png" alt="流水线吞吐量的计算" /></p><h3 id="计算机组成与体系结构"><a class="markdownIt-Anchor" href="#计算机组成与体系结构"></a> 计算机组成与体系结构</h3><ul><li><p>层次化存储结构<br />CPU[寄存器] —Cache[按内容存取]—内存（主存）—外存（辅存）[硬盘，光盘，U盘]</p></li><li><p>Cache概念<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/10/03/NSK8DapVZe5bhkI.png" alt="Cache概念 " /></p></li><li><p>局部性原理<br />时间局部性<br />时间局部性<br />工作集理论：工作集是进程运行时被频繁访问的的页面集合</p></li><li><p>存储器分类<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/10/03/eiTGAazDVLRcUqb.png" alt="存储器分类.PNG" /><br />RAM：随机存取存储器，可以随时读写（刷新时除外），而且速度很快，一旦断电所存储的数据将随之丢失。<br />ROM：只读存储器是一种只能读出事先所存数据的固态半导体存储器。不会因为电源关闭而消失。</p></li><li><p>存储器编址<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/10/03/8DRvHWod3sm6PAq.png" alt="UTOOLS1570108670652.png" /><br />-磁盘结构与参数<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/10/03/J8oOFPL9YAhWEyj.png" alt="UTOOLS1570109841355.png" /><br />例题&amp;讲解截图：<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/10/03/guafVXwJtzbPMLQ.png" alt="UTOOLS1570110770790.png" /><br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/10/03/nosfzQqI7VAT3O4.png" alt="UTOOLS_COMPRESS_1570110443273.png" /><br />每个物理块旋转时间为 33/11=3ms<br />最差情况：第一个 物理块存储时间等于旋转加处理时间 等于 6ms，剩下的由于磁头过了对应的区块（一直转不能停）所以剩下的物理块每块存储时间为 33+3=36，总时间为36*10+6=336==366<br />优化分布后：每块都是刚刚好一处理完 就刚刚好转到下一块：即 6 *11=66</p></li><li><p>计算机总线<br />内部总线（芯片与处理器），外部总线，控制总线（插件板与cpu接口）<br />控制总线（假设为32bit）分为：<br />数据总线（一个周期32bit数据）<br />地址总线（地址空间2的32次方 即4g）<br />控制总线（发送控制信号）</p></li><li><p>串联与并联可靠性分析<br />串联： R=R1+R2+R3+…<br />并联：R=1-（1-R1）<em>（1-R2）</em>（1-R3）<br />失效率=1-R<br />串并联：先整体 后局部<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/10/03/KJbMNazX7wAcfW6.png" alt="UTOOLS1570112402956.png" /></p></li></ul><h3 id="校验码"><a class="markdownIt-Anchor" href="#校验码"></a> 校验码</h3><p>增大码子距离实现<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/10/03/bAiopOL7v3UMn6I.png" alt="UTOOLS1570113260693.png" /></p><ul><li>循环校验码 CRC<br />通过异或 计算 （相同为0 不同为1 ）<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/10/21/6MBcRzOmlISbAx9.png" alt="UTOOLS1571660831958.png" /><br />校验码位数为除数位数-1<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/10/21/H6haTBgELxU1Glj.png" alt="UTOOLS1571663289817.png" /><br />2^R = R+x+1 (R=校验位数 x信息位数)<br />第七位为信息位 则 7 =2<sup>2+2</sup>1+2^0 则第七位 分别与 r0,r1,r2,当计算有关位校验数时 第七位的信息位参与其或以计算，校验所以有关信息位或以计算结果就是校验位的值 。<br />重新计算信息位与效验码或异 值为1 就是出现错误的位数</li></ul><h2 id="操作系统基本原理"><a class="markdownIt-Anchor" href="#操作系统基本原理"></a> 操作系统基本原理</h2><p>###进程管理</p><ul><li>进程状态<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/10/21/oK1BCQfEJcmOTrW.png" alt="UTOOLS1571668921221.png" /><br />就绪状态是仅仅缺cpu 不缺其他资源<br />挂起到静止就绪是人为主动挂起</li><li>前趋图<br />用前趋图的形式表达一系列活动的先后约束关系</li><li>同步与互斥<br />互斥： 同一时刻仅仅允许一个资源使用 （共享）<br />同步： 多个资源同时使用，速度有差异时，有速度匹配要求，差太多快的要等慢的（异步）</li><li>PV操作<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/10/28/yZGPwuTgfzlUrhS.png" alt="UTOOLS1572241178839.png" /></li></ul><p>pv操作解决并发进程之间某个约束问题 （不就是进程锁嘛）</p><p>v（）开始阻塞 ++操作 s（）开始线程–操作</p><p>前趋图 起点是 v（） 箭头指向是p（v）</p><p>死锁： 最小资源数=k（进程数）*（n-1）+1 【k：进程数 n 每个进程资源数】<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/10/29/e5f8LzMPHJdBKA3.png" alt="UTOOLS_COMPRESS_1572328747534.png" /><br />-银行家算法<br />系统安全即不会发生死锁<br />银行家算法 一个一个进程或者选项地推，走不通就是错误的；</p><h3 id="存储管理"><a class="markdownIt-Anchor" href="#存储管理"></a> 存储管理</h3><ul><li>分区管理组织<br />首次适应法: 从上到下<br />最佳适应法：从小空间到大空间分配（缺点 运行久后碎片多且小）<br />最差适应法：从大空间到小空间分配<br />循环首次适应法：首次适应法连成环 一个一个依次分配<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/10/29/mlpn6XIKCciBr2A.png" alt="UTOOLS1572330371381.png" /></li><li>页式存储组织<br />掌握逻辑地址与物理地址的转换<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/10/29/5syHLjApkCVcF43.png" alt="UTOOLS_COMPRESS_1572346978738.png" /><br />练习题：<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/10/29/YIUvXN7O1nVfdsy.png" alt="UTOOLS1572347691064.png" /><br />解题过程： 页面大小：4k=2^12 即 页内地址为12位 ，对应3个十六进制位。即题中的页内地址为题中的A29，页号为5<br />，通过查表5对应的物理地址即页帧号为6 所以完整物理地址为6A29H。不在内存无法淘汰，所以题中3，4无法淘汰，而且刚刚访问的无法淘汰，故，应该淘汰的页号为<br />0，2无法淘汰。答案为1.</li><li>段式存储组织<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/10/29/FyQvBdXnjR48Zgm.png" alt="UTOOLS1572358109067.png" /><br />段式存储组织按照代码逻辑的方式划分内存（每段不一定大小一致），便于共享。</li><li>段页式存储组织<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/10/30/zoRuIwQTtPWx1BC.png" alt="UTOOLS1572440718063.png" /></li><li>块表<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/10/30/p9sC3e4k8lFEtqY.png" alt="UTOOLS1572440825869.png" /><br />快表：cache 慢表：内存</li><li>页面置换算法<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/10/30/tsv7P4aVWgEdGeR.png" alt="UTOOLS1572449845039.png" /><br />抖动： 分配更多资源却起反效果效率降低</li><li>计算题<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/10/31/UBDh5GjcMVAotla.png" alt="UTOOLS1572451609631.png" /></li><li>索引文件结构<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/10/31/XhPmly3swdjJvpe.png" alt="UTOOLS1572452219138.png" /><br />默认13个节点的结构<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/10/31/aXof2Y37GynMwiR.png" alt="UTOOLS1572452131496.png" /></li><li>树形文件结构<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/10/31/kuZhbYV9xKzHfc5.png" alt="UTOOLS1572452579219.png" /></li><li>空闲存储空间管理<br />空闲区表法： 用一个表记录空闲区域<br />空闲链表： 用链表记录空闲区域<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/10/31/XsP1YNHD2GoZQlO.png" alt="UTOOLS1572484188104.png" /><br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/10/31/5G29uL18PJmcKHI.png" alt="UTOOLS1572484285478.png" /><br />坑点：位置是从0开始算</li></ul><h3 id="设备管理"><a class="markdownIt-Anchor" href="#设备管理"></a> 设备管理</h3><ul><li>数据传输控制方法<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/10/31/1vFV7leDjCBOzSm.png" alt="UTOOLS1572489766957.png" /></li><li>虚设备与SPOOLING技术<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/10/31/7Oz8tQwBVsbAJHP.png" alt="UTOOLS1572490426257.png" /><br />核心：开辟缓冲区 ，提高效率</li><li>微内核<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/10/31/AJKjkWtbLe3pQ5I.png" alt="UTOOLS1572490782216.png" /></li></ul><h2 id="数据库系统"><a class="markdownIt-Anchor" href="#数据库系统"></a> 数据库系统</h2><h3 id="数据库模式"><a class="markdownIt-Anchor" href="#数据库模式"></a> 数据库模式</h3><ul><li>三级模式两级映射<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/01/YsytH6IfUBKL3Te.png" alt="UTOOLS1572584681026.png" /></li><li>数据库设计过程<br />了解流程以及每个阶段的产出物<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/01/Mh8iqOV36DbuQNf.png" alt="UTOOLS1572585179196.png" /></li><li>ER图<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/01/M42kdUthio98zxW.png" alt="UTOOLS1572611460852.png" /><br />先局部后连整体<br />一对一联系 最少2个<br />一对2联系 最少2个<br />多对多 最少3个 （多对多的联系转成一个）<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/01/MOKDYS3ryk9BjwR.png" alt="UTOOLS1572611527573.png" /></li><li>关系代数<br />并： 合并并去重<br />交：公共部分<br />差：A-B 为 去掉a里面a与b的公共部分<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/01/c9jh1MQ4A8kJlzL.png" alt="UTOOLS1572611426368.png" /><br />笛卡儿积：A*B A每一行与B每一行一一对应。<br />投影：某一列或行    （有时是属性名 有时是数字编码注意编号从1开始）<br />选择： 带条件的筛选<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/01/FUXi2ShgT6tKcwz.png" alt="UTOOLS1572611376828.png" /><br />连接：两个表某两个字段（默认是相同字段做等值）</li></ul><h3 id="规范化理论"><a class="markdownIt-Anchor" href="#规范化理论"></a> 规范化理论</h3><ul><li>函数依赖<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/01/YLy2RqholCWArbT.png" alt="UTOOLS1572613898812.png" /></li><li>规范化理论价值与用途<br />非规范化的关系模式，可能存在数据冗余 ，更新，插入，删除异常</li><li>键<br />超键与候选键的区别是：超键可能存在冗余属性<br />求候选键：<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/01/iQXsZMudh2zfboS.png" alt="UTOOLS1572616371759.png" /><br />可以从这个没有其他节点指向的点（或组合点）遍历全部点</li><li>范式 【必考】<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/01/nw5sLHz6yrotdhN.png" alt="UTOOLS1572618779897.png" /><br />1nf： 没有每个键不可拆<br />2nf： 每个非主属性完全依赖主键（把不依赖的独立出去）<br />3nf：非主键不依赖非主键<br />bc范式：依赖左边必须是候选键<br />范式越高数据拆分越细，影响性能效率<br />主属性：候选键的一部分<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/01/F7rgboZ9HS4W3d1.png" alt="UTOOLS1572621434035.png" /></li><li>模式拆分<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/02/uWyUZOYeQPvactM.png" alt="UTOOLS1572676197457.png" /><br />无损：可还原<br />是否无损的方法：<br />直接将可推的内容拉同一个表看是否与原表相同；<br />表格法：<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/02/pUGVREteyCa2cFO.png" alt="UTOOLS1572676360343.png" /><br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/02/nPtNoZhaMYUeHvj.png" alt="UTOOLS1572676382968.png" /><br />集合法（只适合拆分成两份时适应）<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/02/oFTibAY16JHWGxK.png" alt="UTOOLS1572676462232.png" /></li></ul><h3 id="并发控制"><a class="markdownIt-Anchor" href="#并发控制"></a> 并发控制</h3><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/02/MW8YcwGjNkBF1X2.png" alt="UTOOLS1572678014732.png" /><br />原子性： 整个流程是整体不可分<br />一致性：内部守恒一致<br />隔离性：与外部隔离，事务直接互不影响<br />持续性：结果影响是持续性的<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/02/OgzJhXtnMQ6FiRc.png" alt="UTOOLS1572678792265.png" /></p><h3 id="完整性约束"><a class="markdownIt-Anchor" href="#完整性约束"></a> 完整性约束</h3><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/02/YNP8h5D7nBApIVF.png" alt="UTOOLS1572679211246.png" /><br />实体： 例如 非空<br />参照完整性： 例如 必须存在该部门或班级<br />对数据输入有一定约束，提高数据的可靠性</p><h3 id="数据库安全"><a class="markdownIt-Anchor" href="#数据库安全"></a> 数据库安全</h3><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/02/ivFOXKsEWN79Bw5.png" alt="UTOOLS1572679286185.png" /></p><h3 id="数据库备份与恢复"><a class="markdownIt-Anchor" href="#数据库备份与恢复"></a> 数据库备份与恢复</h3><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/02/yAPhRrnvsIS9QKz.png" alt="UTOOLS1572680129586.png" /><br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/02/ECASnsk1woj6JO4.png" alt="UTOOLS1572680596770.png" /><br />rollback语句命令实现回滚</p><h3 id="数据仓库与数据挖掘"><a class="markdownIt-Anchor" href="#数据仓库与数据挖掘"></a> 数据仓库与数据挖掘</h3><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/02/D5xKBJuiVSFLIqA.png" alt="UTOOLS1572681791208.png" /><br />数据库 ：要效率速度<br />数据仓库： 数据不改变，大规模查询分析<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/02/dwbDzMgLJCNh8xp.png" alt="UTOOLS1572682035163.png" /></p><h3 id="反规范号"><a class="markdownIt-Anchor" href="#反规范号"></a> 反规范号</h3><p>规范化逆过程<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/02/k1iGg4J958MX6NQ." alt="UTOOLS1572683257466.png" /></p><h3 id="大数据"><a class="markdownIt-Anchor" href="#大数据"></a> 大数据</h3><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/02/8egOL9oGkKjVyar.png" alt="UTOOLS1572683509557.png" /></p><h2 id="计算机网络"><a class="markdownIt-Anchor" href="#计算机网络"></a> 计算机网络</h2><h3 id="七层模型"><a class="markdownIt-Anchor" href="#七层模型"></a> 七层模型</h3><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/02/iXQnBJRqpG3sk1V.png" alt="UTOOLS1572686590172.png" /><br />一二层为局域网，第三次开始拦截广播（广播只能在局域网）<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/02/HWLA476PVeEBUGn.png" alt="UTOOLS1572686830592.png" /><br />###网络技术标准与协议<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/02/gSXT62dOCVQk7Km.png" alt="UTOOLS1572699634668.png" /><br />-DHCP<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/02/ack4K3SPX6UBstJ.png" alt="UTOOLS1572700755337.png" /><br />递归查询与迭代查询<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/02/o9cwamtSsvRB3CI.png" alt="UTOOLS1572700798492.png" /></p><h3 id="网络类型与拓扑结构"><a class="markdownIt-Anchor" href="#网络类型与拓扑结构"></a> 网络类型与拓扑结构</h3><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/02/lKnyvAOE92QLxq1.png" alt="UTOOLS1572700934367.png" /></p><h3 id="网络规划与设计"><a class="markdownIt-Anchor" href="#网络规划与设计"></a> 网络规划与设计</h3><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/03/1dl4SKrU8i6QFzg.png" alt="UTOOLS1572766879217.png" /></p><ul><li>分层设计<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/03/q4WoM9dkQFycx7r.png" alt="UTOOLS1572766819425.png" /></li></ul><h3 id="ip地址"><a class="markdownIt-Anchor" href="#ip地址"></a> ip地址</h3><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/03/nBQb7t3cGRNgxdC.png" alt="UTOOLS1572769783230.png" /><br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/03/Rs3gK7F5XiCoSxL.png" alt="UTOOLS1572770078167.png" /><br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/03/y63JW5qHksNUhug.png" alt="UTOOLS1572769886050.png" /><br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/03/vUGD9Iald6mSzCh.png" alt="UTOOLS1572769924046.png" /><br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/03/tlpHgzJdUrEOw76.png" alt="UTOOLS1572770000323.png" /><br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/03/VaJ4bZUil6AXEOP.png" alt="UTOOLS1572770042648.png" /></p><h3 id="html"><a class="markdownIt-Anchor" href="#html"></a> html</h3><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/03/vtLfy4DkKVXAHU5.png" alt="UTOOLS1572770703317.png" /></p><h3 id="无线网"><a class="markdownIt-Anchor" href="#无线网"></a> 无线网</h3><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/03/u8KmcdGoYyBLJMh.png" alt="UTOOLS1572770780447.png" /></p><h3 id="接入技术"><a class="markdownIt-Anchor" href="#接入技术"></a> 接入技术</h3><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/03/I4DKMFpRc3ygqLC.png" alt="UTOOLS1572771936879.png" /></p><h3 id="ipv6"><a class="markdownIt-Anchor" href="#ipv6"></a> ipv6</h3><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/03/EuUbJmWlziVpOP9.png" alt="UTOOLS1572772411391.png" /><br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/03/lqKQThaZEnUHzjc.png" alt="UTOOLS1572788931833.png" /></p><h2 id="信息安全"><a class="markdownIt-Anchor" href="#信息安全"></a> 信息安全</h2><h3 id="信息系统安全属性"><a class="markdownIt-Anchor" href="#信息系统安全属性"></a> 信息系统安全属性</h3><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/03/lqKQThaZEnUHzjc.png" alt="UTOOLS1572788931833.png" /></p><h3 id="对称加密与非对称加密"><a class="markdownIt-Anchor" href="#对称加密与非对称加密"></a> 对称加密与非对称加密</h3><p>对称加密 （加密解密用同一个密钥）<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/03/Jq6PbkXe4HWVtpd.png" alt="UTOOLS1572789192226.png" /><br />非对称加密（加密速度慢）<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/03/HvFjXNf4xbugZwo.png" alt="UTOOLS1572789314289.png" /><br />对称加密技术：<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/03/YAubPFndgSVNMa3.png" alt="UTOOLS1572789852189.png" /><br />非对称加密技术（甲乙各有私钥公钥，且只能用对应私钥解密例如：甲公钥加密只能由甲私钥解密。给甲发数据就用甲公钥加密数据。）<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/03/3ARzOjbE1ZetscX.png" alt="UTOOLS1572789882966.png" /></p><h3 id="信息摘要"><a class="markdownIt-Anchor" href="#信息摘要"></a> 信息摘要</h3><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/03/ezSQH1qTIWX7k6s.png" alt="UTOOLS1572790560432.png" /></p><h3 id="数字签名"><a class="markdownIt-Anchor" href="#数字签名"></a> 数字签名</h3><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/03/GKnruoBh4vYEkgO.png" alt="UTOOLS1572791247039.png" /></p><h3 id="数字证书与pgp"><a class="markdownIt-Anchor" href="#数字证书与pgp"></a> 数字证书与PGP</h3><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/03/Bd5Apoz9lgcWiqN.png" alt="UTOOLS1572791871174.png" /></p><h3 id="练习题"><a class="markdownIt-Anchor" href="#练习题"></a> 练习题</h3><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/03/IoUsrM7gmY5tvu2.png" alt="UTOOLS1572792542826.png" /></p><h3 id="各个网络层次的安全保障"><a class="markdownIt-Anchor" href="#各个网络层次的安全保障"></a> 各个网络层次的安全保障</h3><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/03/FVxoeQpMsUtcavG.png" alt="UTOOLS1572796016634.png" /></p><h3 id="网络威胁与攻击"><a class="markdownIt-Anchor" href="#网络威胁与攻击"></a> 网络威胁与攻击</h3><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/04/mWQMYIABEx4OVDb.png" alt="UTOOLS1572797962812.png" /><br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/04/fStnXjk6v9soZPc.png" alt="UTOOLS1572798056264.png" /></p><h3 id="防火墙"><a class="markdownIt-Anchor" href="#防火墙"></a> 防火墙</h3><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/04/O4LCjJ1zy2lgqbs.png" alt="UTOOLS1572799640113.png" /></p><h2 id="数据结构与算法"><a class="markdownIt-Anchor" href="#数据结构与算法"></a> 数据结构与算法</h2><h3 id="数组"><a class="markdownIt-Anchor" href="#数组"></a> 数组</h3><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/04/XRfIa7Nrwi4qFPK.png" alt="UTOOLS1572837441108.png" /></p><h3 id="稀疏矩阵"><a class="markdownIt-Anchor" href="#稀疏矩阵"></a> 稀疏矩阵</h3><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/04/VKrZSja6BRFLQue.png" alt="UTOOLS1572837954222.png" /><br />求公式时直接用代入法</p><h3 id="线性表"><a class="markdownIt-Anchor" href="#线性表"></a> 线性表</h3><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/04/V8K9nMZ6NwWQS4E.png" alt="UTOOLS1572838196976.png" /><br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/04/c9SldAQ1LZVen5o.png" alt="UTOOLS1572839484349.png" /></p><h3 id="队列与栈"><a class="markdownIt-Anchor" href="#队列与栈"></a> 队列与栈</h3><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/04/1q25etUSswjpfE9.png" alt="UTOOLS1572840379062.png" /></p><h3 id="广义表"><a class="markdownIt-Anchor" href="#广义表"></a> 广义表</h3><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/04/J4za6OuyCh5sIe3.png" alt="UTOOLS1572840735391.png" /></p><h3 id="二叉树"><a class="markdownIt-Anchor" href="#二叉树"></a> 二叉树</h3><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/04/8vbnVZ4oRFXlxNC.png" alt="UTOOLS1572841462131.png" /><br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/04/t2Jea8blGQdoFTI.png" alt="UTOOLS1572841531534.png" /></p><ul><li>前中后续遍历<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/04/ObwfNuerSPzqYAx.png" alt="UTOOLS1572842657719.png" /></li><li>构造二叉树 ： 先找根节点 然后分左右 然后左找根 一步步递归下去<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/04/DAZHhJXqyUmO9eg.png" alt="UTOOLS1572842260443.png" /><br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/04/OM9GkPlY6RD2AUQ.png" alt="UTOOLS1572846477084.png" /></li><li>最优二叉树（哈夫曼树）<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/04/2FniSxfAoUhORc7.png" alt="UTOOLS1572848584759.png" /></li><li>线段树<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/04/ku5EdU74BPKDlJw.png" alt="UTOOLS1572851028134.png" /></li><li>平衡二叉树<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/04/BCXynTA7qIrojFW.png" alt="UTOOLS1572852420066.png" /></li></ul><h3 id="图"><a class="markdownIt-Anchor" href="#图"></a> 图</h3><p>树与图的区别在于树没有环路<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/04/9sS1TKxW8JBwCOg.png" alt="UTOOLS1572852512867.png" /></p><ul><li>接邻矩阵<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/04/LF9HijWRmloZEtB.png" alt="UTOOLS1572852559835.png" /><br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/04/qAa26GZWtxUFOTK.png" alt="UTOOLS1572852683999.png" /></li><li>遍历<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/04/B6AbEtUxeVR4gLY.png" alt="UTOOLS1572852925425.png" /><br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/04/ifCuM9Y7DbIJWRx.png" alt="UTOOLS1572854986567.png" /></li><li>拓扑序列<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/04/ifCuM9Y7DbIJWRx.png" alt="UTOOLS1572854986567.png" /></li><li>最小生成树<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/04/9YmMGoz48gLjOi1.png" alt="UTOOLS1572856431978.png" /><br />普里奥算法：选一个点为红点集，剩下的为蓝点集，从蓝点集选一个最短的点连接最近的红点，并将该点纳入红点集，然后循环从蓝点集选一个距离红点集最短的点连接并纳入红点集如此反复循环，不许形成环路。<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/04/BSIq7jfCgtLPbd4.png" alt="UTOOLS1572856645859.png" /><br />克鲁斯卡尔算法： 直接选n-1条最短不成环的边相连<br />###算法<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/04/s5vBmYyCg78knHb.png" alt="UTOOLS1572857121011.png" /><br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/04/sdYAyB1ptf9QLMx.png" alt="UTOOLS1572857164770.png" /><br />-查找问题<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/04/Hces361Uw9txabk.png" alt="UTOOLS1572857210733.png" /><br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/04/pkYColwXDrPTHvK.png" alt="UTOOLS1572857263017.png" /><br />折半查找在查找成功时关键字的比较次数最多为[log2n」+1次<br />折半查找的时间复杂度为O(log2n）<br /><img src= "/img/loading.gif" data-lazy-src="https://s2.ax1x.com/2019/11/04/Kxq2rR.png" alt="Kxq2rR.png" /><br /><img src= "/img/loading.gif" data-lazy-src="https://s2.ax1x.com/2019/11/04/KxqfVx.png" alt="KxqfVx.png" /></li><li>排序<br /><img src= "/img/loading.gif" data-lazy-src="https://s2.ax1x.com/2019/11/04/KzC2E4.png" alt="KzC2E4.png" /><br /><img src= "/img/loading.gif" data-lazy-src="https://s2.ax1x.com/2019/11/04/KxOO4f.png" alt="KxOO4f.png" /></li><li>插入排序<br /><img src= "/img/loading.gif" data-lazy-src="https://s2.ax1x.com/2019/11/04/KxXiEq.png" alt="KxXiEq.png" /></li><li>希尔排序<br /><img src= "/img/loading.gif" data-lazy-src="https://s2.ax1x.com/2019/11/04/KxXV8U.png" alt="KxXV8U.png" /></li><li>直接插入排序<br /><img src= "/img/loading.gif" data-lazy-src="https://s2.ax1x.com/2019/11/04/KxXKbR.png" alt="KxXKbR.png" /></li><li>冒泡排序<br /><img src= "/img/loading.gif" data-lazy-src="https://s2.ax1x.com/2019/11/04/KxXYxe.png" alt="KxXYxe.png" /><br />-归并排序<br /><img src= "/img/loading.gif" data-lazy-src="https://s2.ax1x.com/2019/11/04/KxXUrd.png" alt="KxXUrd.png" /><br />-堆排序<br /><img src= "/img/loading.gif" data-lazy-src="https://s2.ax1x.com/2019/11/04/KxzFL4.png" alt="KxzFL4.png" /><br />建堆<br /><img src= "/img/loading.gif" data-lazy-src="https://s2.ax1x.com/2019/11/04/KxznW6.png" alt="KxznW6.png" /><br />排序<br /><img src= "/img/loading.gif" data-lazy-src="https://s2.ax1x.com/2019/11/04/KxzlOe.png" alt="KxzlOe.png" /></li><li>快速排序<br /><img src= "/img/loading.gif" data-lazy-src="https://s2.ax1x.com/2019/11/04/KzS8jU.png" alt="KzS8jU.png" /></li><li>基数排序<br /><img src= "/img/loading.gif" data-lazy-src="https://s2.ax1x.com/2019/11/04/KzpQVH.png" alt="KzpQVH.png" /></li></ul><h3 id="算法下午题"><a class="markdownIt-Anchor" href="#算法下午题"></a> 算法(下午题)</h3><ul><li>分治<br /><img src= "/img/loading.gif" data-lazy-src="https://s2.ax1x.com/2019/11/04/KzVCq0.png" alt="KzVCq0.png" /><br /><img src= "/img/loading.gif" data-lazy-src="https://s2.ax1x.com/2019/11/04/KzVZRJ.png" alt="KzVZRJ.png" /><br /><img src= "/img/loading.gif" data-lazy-src="https://s2.ax1x.com/2019/11/04/KzVldK.png" alt="KzVldK.png" /></li><li>回溯<br /><img src= "/img/loading.gif" data-lazy-src="https://s2.ax1x.com/2019/11/04/KzVBo8.png" alt="KzVBo8.png" /></li><li>贪心<br /><img src= "/img/loading.gif" data-lazy-src="https://s2.ax1x.com/2019/11/04/KzVIFU.png" alt="KzVIFU.png" /></li><li>动态规划<br /><img src= "/img/loading.gif" data-lazy-src="https://s2.ax1x.com/2019/11/04/KzVjw6.png" alt="KzVjw6.png" /></li></ul><h2 id="程序设计语言与语言处理程序基础编译原理"><a class="markdownIt-Anchor" href="#程序设计语言与语言处理程序基础编译原理"></a> 程序设计语言与语言处理程序基础（编译原理）</h2><p><img src= "/img/loading.gif" data-lazy-src="https://s2.ax1x.com/2019/11/05/KzWwnO.png" alt="KzWwnO.png" /><br />-编译过程<br /><img src= "/img/loading.gif" data-lazy-src="https://s2.ax1x.com/2019/11/05/KzWhDS.png" alt="KzWhDS.png" /></p><ul><li>文法<br />定义<img src= "/img/loading.gif" data-lazy-src="https://s2.ax1x.com/2019/11/05/KzOCPf.png" alt="KzOCPf.png" /><br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/05/q9b4LeCKhSRyO7H.png" alt="UTOOLS1572917104744.png" /><br />语法数：<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/05/uFTPLMDOrZx6fNS.png" alt="UTOOLS1572917151353.png" /><br />给定字符串起点能不能到终点<br />-有限自动机<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/05/mRhbE2KdgIrBqCF.png" alt="UTOOLS1572918060751.png" /><br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/05/nPXBtZfoH7wFR9L.png" alt="UTOOLS1572918093513.png" /><br />例题：<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/05/cdOfw5aY3hmoNEx.png" alt="UTOOLS1572918005523.png" /><br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/05/tvjdClL1iDpehrk.png" alt="UTOOLS1572918214333.png" /></li><li>表达式<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/05/xITmh15Zjrv3XdU.png" alt="UTOOLS1572918387319.png" /></li><li>值传导 和引用传导<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/05/PEAJ5NzuBdVpkoK.png" alt="UTOOLS1572918483619.png" /></li><li>程序语言特点<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/05/t1vlRVwjsyJX8Sb.png" alt="UTOOLS1572918589720.png" /></li></ul><h2 id="法律法规"><a class="markdownIt-Anchor" href="#法律法规"></a> 法律法规</h2><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/05/2YhTSxseK1U4A6t.png" alt="UTOOLS1572922734899.png" /></p><ul><li>保护期限<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/05/RLnDIFbHoTNVyUi.png" alt="UTOOLS1572923194153.png" /></li><li>知识产权人确定<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/05/QPehLT9UJ76Vgym.png" alt="UTOOLS1572923964240.png" /><br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/05/kPipf7J4dqXxNv3.png" alt="UTOOLS1572923997358.png" /></li><li>侵权判定<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/05/KQwGBdtAofrbXkY.png" alt="UTOOLS1572925335514.png" /><br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/05/sm7tC4QXnJWrwGE.png" alt="UTOOLS1572925723855.png" /><br />-标准化<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/05/aUEeQNRT9AtKD5j.png" alt="UTOOLS1572925956850.png" /><br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/05/zPStXyebF53VMlw.png" alt="UTOOLS1572926221031.png" /></li></ul><h2 id="多媒体基础"><a class="markdownIt-Anchor" href="#多媒体基础"></a> 多媒体基础</h2><ul><li>音频<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/05/y3X7NETGn1wgDtR.png" alt="UTOOLS1572931961560.png" /><br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/05/eV2ukO3DEQN5xoF.png" alt="UTOOLS1572943633025.png" /></li><li>媒体种类<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/05/RT8Fs4ScfdqYku6.png" alt="UTOOLS1572943789838.png" /></li><li>多媒体计算<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/05/bCiM8towXxfAu4p.png" alt="UTOOLS1572944249885.png" /><br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/05/yM3GZcmLgnhTlNC.png" alt="UTOOLS1572944337244.png" /></li><li>多媒体标准<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/05/kpbTHGlY37IeOLi.png" alt="UTOOLS1572945029261.png" /><br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/05/LSYamEQ3W4xdsqv.png" alt="UTOOLS1572945527699.png" /></li><li>有损无损<br />![UTOOLS1572945753742.png](<a href="https://i.loli.net/2019/11/05/j4vMhzHVLs5GEwt.png">https://i.loli.net/2019/11/05/j4vMhzHVLs5GEwt.png</a></li></ul><h2 id="系统开发基础"><a class="markdownIt-Anchor" href="#系统开发基础"></a> 系统开发基础</h2><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/05/DbIt4Q6qlc7ECjX.png" alt="UTOOLS1572950522608.png" /></p><h3 id="瀑布模型适合需求明确或二次开发"><a class="markdownIt-Anchor" href="#瀑布模型适合需求明确或二次开发"></a> 瀑布模型（适合需求明确或二次开发）</h3><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/05/wvSBxtl2WcrZ47H.png" alt="UTOOLS1572950544828.png" /><br />###原型 演化模型 增量模型<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/05/W6rJuMRvcZNiGma.png" alt="UTOOLS1572950728867.png" /></p><h3 id="螺旋模型"><a class="markdownIt-Anchor" href="#螺旋模型"></a> 螺旋模型</h3><p>特点 有风险分析<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/05/Tx28OeSpDsdloVu.png" alt="UTOOLS1572950914991.png" /><br />优先选原型.</p><h3 id="v模型"><a class="markdownIt-Anchor" href="#v模型"></a> v模型</h3><p>特点：测试细化 需求对应验收。在需求分析时写验收测试与系统测试，概要设计写集成测试，详细设计写单元测试。测试贯穿开发始终。</p><h3 id="喷泉模型"><a class="markdownIt-Anchor" href="#喷泉模型"></a> 喷泉模型</h3><p>特点 : 面向对象，迭代 无间隙</p><h3 id="rad"><a class="markdownIt-Anchor" href="#rad"></a> rad</h3><p>快<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/05/gAeD5ivnTar86RI.png" alt="UTOOLS1572964445101.png" /></p><ul><li>构件组装模型（CDSB）<br />特点 提高复用性 ，开发时长短，软件成本降低，可靠性增加。<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/05/Fm5CSQeq2xT8E4J.png" alt="UTOOLS1572965585350.png" /></li><li>敏捷开发方法<br />特点 ： 小型项目<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/06/KzAnX8SMbPYUyeT.png" alt="UTOOLS1573041220510.png" /></li></ul><p>###结构化方法<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/06/kQqplKoGIgbA6Pi.png" alt="UTOOLS1573041559992.png" /><br />结构化： 不够灵活（系统与现实有区别）</p><h3 id="需求分类与需求获取"><a class="markdownIt-Anchor" href="#需求分类与需求获取"></a> 需求分类与需求获取</h3><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/06/ZiuVhnm6zKstSXG.png" alt="UTOOLS1573043230677.png" /></p><h3 id="结构化设计"><a class="markdownIt-Anchor" href="#结构化设计"></a> 结构化设计</h3><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/06/4xBXNJ8uUthfzqY.png" alt="UTOOLS1573043621853.png" /><br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/06/2cXaGJ4VWKL1BvO.png" alt="UTOOLS1573043717420.png" /><br />内聚：一个模块内部空间联系紧密程度<br />耦合 ： 模块之间的联系紧密程度</p><h3 id="软件测试"><a class="markdownIt-Anchor" href="#软件测试"></a> 软件测试</h3><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/06/V4bURv3LsCQAqZn.png" alt="UTOOLS1573044025053.png" /><br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/06/fBXnkpmNZCtq7UL.png" alt="UTOOLS1573044818610.png" /></p><ul><li>用例设计<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/06/EXlMrKeT2pxfmOV.png" alt="UTOOLS1573045611404.png" /></li><li>测试阶段<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/06/O1LtfvakH3WX2MN.png" alt="UTOOLS1573046959866.png" /></li><li>环路（mccabe）复杂度<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/06/EhP6fN7dj4GWDb8.png" alt="UTOOLS1573047428436.png" /></li><li>运行与维护<br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/06/Wiwgc4mPslT5tr1.png" alt="UTOOLS1573047592968.png" /><br />完善性： 变得更吊<br />适应性：适应环境</li></ul><h3 id="cmmi"><a class="markdownIt-Anchor" href="#cmmi"></a> CMMI</h3><h3 id="项目管理"><a class="markdownIt-Anchor" href="#项目管理"></a> 项目管理</h3><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/06/lH6eA8IpPTiSyXU.png" alt="UTOOLS1573049954485.png" /><br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/06/ujRmXUsYzKaiF1P.png" alt="UTOOLS1573049991090.png" /><br /><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/06/9xovRMnSFUE357O.png" alt="UTOOLS1573050177710.png" /></p><h2 id="面向对象设计"><a class="markdownIt-Anchor" href="#面向对象设计"></a> 面向对象设计</h2><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/07/k4uysnmzTEepVdO.png" alt="UTOOLS1573058801494.png" /></p><h3 id="设计原则"><a class="markdownIt-Anchor" href="#设计原则"></a> 设计原则</h3><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/11/07/ZL2FExqhnQlWPVJ.png" alt="UTOOLS1573058939908.png" /></p>]]></content>
      
      
      
        <tags>
            
            <tag> 软考笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红黑树</title>
      <link href="/2019/08/03/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
      <url>/2019/08/03/%E7%BA%A2%E9%BB%91%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="红黑树"><a class="markdownIt-Anchor" href="#红黑树"></a> 红黑树</h1><p><strong>红黑树</strong>（英语：Red–black tree）是一种<strong>自平衡</strong>二叉查找树，是在计算机科学中用到的一种数据结构。</p><ul><li><p><strong>平衡树</strong>是计算机科学中的一类改进的二叉查找树。一般的二叉查找树的查询复杂度是跟目标结点到树根的距离（即深度）有关，因此当结点的深度普遍较大时，查询的均摊复杂度会上升，为了更高效的查询，平衡树应运而生了</p></li><li><p><strong>红黑树</strong>相对于AVL树来说，牺牲了部分平衡性以换取插入/删除操作时少量的旋转操作，整体来说性能要优于AVL树。</p></li></ul><hr /><h3 id="性质"><a class="markdownIt-Anchor" href="#性质"></a> 性质</h3><p>红黑树是每个节点都带有颜色属性的二叉查找树，颜色为红色或黑色。在二叉查找树强制一般要求以外，对于任何有效的红黑树我们增加了如下的额外要求：</p><ul><li>节点是红色或黑色。</li><li>根是黑色。</li><li>所有叶子都是黑色（叶子是NIL节点）。</li><li>每个红色节点必须有两个黑色的子节点。（从每个叶子到根的所有路径上不能有两个连续的红色节点。）</li><li>从任一节点到其每个叶子的所有简单路径都包含相同数目的黑色节点。<br />这些约束确保了红黑树的关键特性：从根到叶子的最长的可能路径不多于最短的可能路径的两倍长。性质4导致了路径不能有两个毗连的红色节点就足够了。最短的可能路径都是黑色节点，最长的可能路径有交替的红色和黑色节点。因为根据性质5所有最长的路径都有相同数目的黑色节点，这就表明了没有路径能多于任何其他路径的两倍长。</li></ul><hr /><p>###插入<br />将要插入的节点标为N，N的父节点标为P，N的祖父节点标为G，N的叔父节点标为U。</p><p>一个寻找叔节点和祖节点的模板</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">node* <span class="title">grandparent</span><span class="params">(node *n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n-&gt;parent-&gt;parent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">node* <span class="title">uncle</span><span class="params">(node *n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n-&gt;parent == <span class="built_in">grandparent</span>(n)-&gt;left)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">grandparent</span> (n)-&gt;right;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">grandparent</span> (n)-&gt;left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>情形1</strong>:新节点N位于树的根上，没有父节点。在这种情形下，我们把它重绘为黑色以满足性质2</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_case1</span><span class="params">(node *n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n-&gt;parent == <span class="literal">NULL</span>)</span><br><span class="line">        n-&gt;color = BLACK;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">insert_case2</span> (n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>情形2</strong>:新节点的父节点P是黑色，直接插入。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_case2</span><span class="params">(node *n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n-&gt;parent-&gt;color == BLACK)</span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">/* 树仍旧有效*/</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">insert_case3</span> (n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>情形2</strong>:新节点的父节点P是黑色，直接插入。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_case2</span><span class="params">(node *n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n-&gt;parent-&gt;color == BLACK)</span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">/* 树仍旧有效*/</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">insert_case3</span> (n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>情形3</strong>:如果父节点P和叔父节点U二者都是红色，（此时新插入节点N做为P的左子节点或右子节点都属于情形3，这里右图仅显示N做为P左子的情形）则我们可以将它们两个重绘为黑色并重绘祖父节点G为红色（用来保持性质5）。现在我们的新节点N有了一个黑色的父节点P。因为通过父节点P或叔父节点U的任何路径都必定通过祖父节点G，在这些路径上的黑节点数目没有改变。但是，红色的祖父节点G可能是根节点，这就违反了性质2，也有可能祖父节点G的父节点是红色的，这就违反了性质4。为了解决这个问题，我们在祖父节点G上递归地进行情形1的整个过程。（把G当成是新加入的节点进行各种情形的检查）</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_case3</span><span class="params">(node *n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">uncle</span>(n) != <span class="literal">NULL</span> &amp;&amp; <span class="built_in">uncle</span> (n)-&gt;color == RED) &#123;</span><br><span class="line">        n-&gt;parent-&gt;color = BLACK;</span><br><span class="line">        <span class="built_in">uncle</span> (n)-&gt;color = BLACK;</span><br><span class="line">        <span class="built_in">grandparent</span> (n)-&gt;color = RED;</span><br><span class="line">        <span class="built_in">insert_case1</span>(<span class="built_in">grandparent</span>(n));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">insert_case4</span> (n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="http://images.zhuoke.xyz/1547010653388.png" alt="Alt text" /></p><ul><li><strong>情形4</strong>:父节点P是红色而叔父节点U是黑色或缺少，并且新节点N是其父节点P的右子节点而父节点P又是其父节点的左子节点。在这种情形下，我们进行一次左旋转调换新节点和其父节点的角色</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_case4</span><span class="params">(node *n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == n-&gt;parent-&gt;right &amp;&amp; n-&gt;parent == <span class="built_in">grandparent</span>(n)-&gt;left) &#123;</span><br><span class="line">        <span class="built_in">rotate_left</span>(n-&gt;parent);</span><br><span class="line">        n = n-&gt;left;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(n == n-&gt;parent-&gt;left &amp;&amp; n-&gt;parent == <span class="built_in">grandparent</span>(n)-&gt;right) &#123;</span><br><span class="line">        <span class="built_in">rotate_right</span>(n-&gt;parent);</span><br><span class="line">        n = n-&gt;right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">insert_case5</span> (n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="http://images.zhuoke.xyz/1547010979252.png" alt="Alt text" /></p><ul><li><strong>情形5</strong>：父节点P是红色而叔父节点U是黑色或缺少，新节点N是其父节点的左子节点，而父节点P又是其父节点G的左子节点。在这种情形下，我们进行针对祖父节点G的一次右旋转；在旋转产生的树中，以前的父节点P现在是新节点N和以前的祖父节点G的父节点。我们知道以前的祖父节点G是黑色，否则父节点P就不可能是红色（如果P和G都是红色就违反了性质4，所以G必须是黑色）。我们切换以前的父节点P和祖父节点G的颜色，结果的树满足性质4。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_case5</span><span class="params">(node *n)</span></span>&#123;</span><br><span class="line">    n-&gt;parent-&gt;color = BLACK;</span><br><span class="line">    <span class="built_in">grandparent</span> (n)-&gt;color = RED;</span><br><span class="line">    <span class="keyword">if</span>(n == n-&gt;parent-&gt;left &amp;&amp; n-&gt;parent == <span class="built_in">grandparent</span>(n)-&gt;left) &#123;</span><br><span class="line">        <span class="built_in">rotate_right</span>(<span class="built_in">grandparent</span>(n));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/* Here, n == n-&gt;parent-&gt;right &amp;&amp; n-&gt;parent == grandparent (n)-&gt;right */</span></span><br><span class="line">        <span class="built_in">rotate_left</span>(<span class="built_in">grandparent</span>(n));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="http://images.zhuoke.xyz/1547011428707.png" alt="Alt text" /></p><hr /><p>###删除</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取权限</title>
      <link href="/2018/11/28/%E8%8E%B7%E5%8F%96%E6%9D%83%E9%99%90/"/>
      <url>/2018/11/28/%E8%8E%B7%E5%8F%96%E6%9D%83%E9%99%90/</url>
      
        <content type="html"><![CDATA[<h1 id="获取权限"><a class="markdownIt-Anchor" href="#获取权限"></a> 获取权限</h1><span id="more"></span><h3 id="权限类型"><a class="markdownIt-Anchor" href="#权限类型"></a> 权限类型</h3><ul><li><p>普通权限<br />在AndroidManifest中声明 例:<br /><uses-permission android:name="android.permission.READ_CONTACTS" />AndroidManifest</p></li><li><p>危险权限<br />动态添加：必须由用户手动同意授权<br />危险权限列表：<br /><img src= "/img/loading.gif" data-lazy-src="https://www.dropbox.com/s/mqialvy3utk99cc/%E6%9D%83%E9%99%90%E8%A1%A8.png?dl=0&amp;raw=1" alt="权限表.png" /></p></li><li><p>特殊权限</p></li></ul><h3 id="动态申请权限"><a class="markdownIt-Anchor" href="#动态申请权限"></a> 动态申请权限</h3><ul><li>调用 ContextCompat 中 checkSelfPermission (Context context,<br />String permission)方法 与  PackageManager.PERMISSION_GRANTED 作比较 根据是否相等 判断是否已授权<br />-调用  ActivityCompat.requestPermissions(Activity String[] permissions, int requestCode）获取权限<br />获取联系人demo</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ArrayAdapter&lt;String&gt; adapter;</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; contactsList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        ListView contactsView = (ListView) findViewById(R.id.contacts_view);</span><br><span class="line">        adapter = <span class="keyword">new</span> ArrayAdapter&lt;String&gt;(<span class="keyword">this</span>, android.R.layout. simple_list_item_1, contactsList);</span><br><span class="line">        contactsView.setAdapter(adapter);</span><br><span class="line">        <span class="keyword">if</span> (ContextCompat.checkSelfPermission(<span class="keyword">this</span>, Manifest.permission.READ_CONTACTS) != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">            ActivityCompat.requestPermissions(<span class="keyword">this</span>, <span class="keyword">new</span> String[]&#123; Manifest.permission.READ_CONTACTS &#125;, <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            readContacts();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readContacts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Cursor cursor = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 查询联系人数据</span></span><br><span class="line">            cursor = getContentResolver().query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (cursor != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span> (cursor.moveToNext()) &#123;</span><br><span class="line">                    <span class="comment">// 获取联系人姓名</span></span><br><span class="line">                    String displayName = cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME));</span><br><span class="line">                    <span class="comment">// 获取联系人手机号</span></span><br><span class="line">                    String number = cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));</span><br><span class="line">                    contactsList.add(displayName + <span class="string">&quot;\n&quot;</span> + number);</span><br><span class="line">                &#125;</span><br><span class="line">                adapter.notifyDataSetChanged();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (cursor != <span class="keyword">null</span>) &#123;</span><br><span class="line">                cursor.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, String[] permissions, <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (requestCode) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">if</span> (grantResults.length &gt; <span class="number">0</span> &amp;&amp; grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">                    readContacts();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;You denied the permission&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 第一行代码笔记 </tag>
            
            <tag> 权限 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络技术</title>
      <link href="/2018/11/18/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF/"/>
      <url>/2018/11/18/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="网络技术"><a class="markdownIt-Anchor" href="#网络技术"></a> 网络技术</h1><span id="more"></span><p>声明权限</p><blockquote>   <uses-permission android:name="android.permission.INTERNET" /></blockquote><h2 id="webview"><a class="markdownIt-Anchor" href="#webview"></a> WebView</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">WebView webView = (WebView) findViewById(R.id.web_view);</span><br><span class="line">   webView.getSettings().setJavaScriptEnabled(<span class="keyword">true</span>);  <span class="comment">//通过getSettings()设置浏览器属性  setJavaScriptEnabled(true)让Webview支持javaScript脚本</span></span><br><span class="line">   webView.loadUrl(<span class="string">&quot;https://www.baidu.com&quot;</span>); </span><br><span class="line">   webView.setWebViewClient(<span class="keyword">new</span> WebViewClient() &#123;  </span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (url == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">try</span>&#123;</span><br><span class="line">               <span class="keyword">if</span>(!url.startsWith(<span class="string">&quot;http://&quot;</span>) &amp;&amp; !url.startsWith(<span class="string">&quot;https://&quot;</span>))&#123;</span><br><span class="line">                   Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW, Uri.parse(url));</span><br><span class="line">                   startActivity(intent);</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;<span class="keyword">catch</span> (Exception e)&#123;<span class="comment">//防止crash (如果手机上没有安装处理某个scheme开头的url的APP, 会导致crash)</span></span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">true</span>;<span class="comment">//没有安装该app时，返回true，表示拦截自定义链接，但不跳转，避免弹出上面的错误页面</span></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">           <span class="comment">//返回值是true的时候控制去WebView打开，为false调用系统浏览器或第三方浏览器</span></span><br><span class="line">           view.loadUrl(url);</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><h5 id="解决err_unknown_url_scheme这个错误"><a class="markdownIt-Anchor" href="#解决err_unknown_url_scheme这个错误"></a> 解决ERR_UNKNOWN_URL_SCHEME这个错误</h5><p>给WebView设置WebViewClient，并重写WebViewClient中的shouldOverrideUrlLoading方法.<br />首先我们来了解下shouldOverrideUrlLoading(WebView view, String url)方法，该方法会在加载超链接时回调过来，所以通过重写shouldOverrideUrlLoading，可以实现对网页中超链接的拦截；返回值为boolean型，是true的时候控制去WebView打开，为false调用系统浏览器或第三方浏览器。默认false</p><h2 id="http协议访问"><a class="markdownIt-Anchor" href="#http协议访问"></a> Http协议访问</h2><h4 id="httpurlconnection"><a class="markdownIt-Anchor" href="#httpurlconnection"></a> HttpURLConnection</h4><p>1.传入URL对象通过openConnection()获取HttpURLConnection对象</p><blockquote><pre><code>               URL url = new URL(&quot;http://www.baidu.com&quot;);               connection = (HttpURLConnection) url.openConnection();</code></pre></blockquote><p>2.设置HTTP属性 如 请求方法 get post  连接超时</p><blockquote><pre><code>               connection.setRequestMethod(&quot;GET&quot;);               connection.setConnectTimeout(8000);               connection.setReadTimeout(8000);</code></pre></blockquote><p>3.获取输入流并读取</p><blockquote></blockquote><pre><code>                InputStream in = connection.getInputStream();                // 下面对获取到的输入流进行读取                reader = new BufferedReader(new InputStreamReader(in));                StringBuilder response = new StringBuilder();                String line;                while ((line = reader.readLine()) != null) &#123;                    response.append(line);                &#125;                showResponse(response.toString());</code></pre><blockquote></blockquote><p>4.输出流</p><blockquote></blockquote><pre><code>                connection.setRequestMethod(&quot;GET&quot;);                DataOutputStream outputStream = new DataOutputStream(connection.getOutputStream());                outputStream.writeBytes(&quot;xxxxxxx&quot;);</code></pre><blockquote></blockquote><p>5.关闭连接</p><blockquote><pre><code>                    connection.disconnect();</code></pre></blockquote><p>一般在应用中的 放在中多线程实例</p><pre class="highlight"><code class="java">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendHttpRequest</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String address, <span class="hljs-keyword">final</span> HttpCallbackListener listener)</span> </span>&#123;        <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Runnable() &#123;            <span class="hljs-meta">@Override</span>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;                HttpURLConnection connection = <span class="hljs-keyword">null</span>;                <span class="hljs-keyword">try</span> &#123;                    URL url = <span class="hljs-keyword">new</span> URL(address);                    connection = (HttpURLConnection) url.openConnection();                    connection.setRequestMethod(<span class="hljs-string">"GET"</span>);                    connection.setConnectTimeout(<span class="hljs-number">8000</span>);                    connection.setReadTimeout(<span class="hljs-number">8000</span>);                    connection.setDoInput(<span class="hljs-keyword">true</span>);                    connection.setDoOutput(<span class="hljs-keyword">true</span>);                    InputStream in = connection.getInputStream();                    BufferedReader reader = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(in));                    StringBuilder response = <span class="hljs-keyword">new</span> StringBuilder();                    String line;                    <span class="hljs-keyword">while</span> ((line = reader.readLine()) != <span class="hljs-keyword">null</span>) &#123;                        response.append(line);                    &#125;                    <span class="hljs-keyword">if</span> (listener != <span class="hljs-keyword">null</span>) &#123;                        <span class="hljs-comment">// 回调onFinish()方法</span>                        listener.onFinish(response.toString());                    &#125;                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;                    <span class="hljs-keyword">if</span> (listener != <span class="hljs-keyword">null</span>) &#123;                        <span class="hljs-comment">// 回调onError()方法</span>                        listener.onError(e);                    &#125;                &#125; <span class="hljs-keyword">finally</span> &#123;                    <span class="hljs-keyword">if</span> (connection != <span class="hljs-keyword">null</span>) &#123;                        connection.disconnect();                    &#125;                &#125;            &#125;        &#125;).start();    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendOkHttpRequest</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String address, <span class="hljs-keyword">final</span> okhttp3.Callback callback)</span> </span>&#123;        Request request = <span class="hljs-keyword">new</span> Request.Builder()                .url(address)                .build();        client.newCall(request).enqueue(callback);   &#125;&lt;!--code￼<span class="hljs-number">1</span>--&gt;#### GSON自动将JSON格式映射成对象。<span class="hljs-number">1</span>.加库&gt;     implementation <span class="hljs-string">'com.google.code.gson:gson:2.7'</span><span class="hljs-number">2</span>.解析&gt;        Gson gson = <span class="hljs-keyword">new</span> Gson();&gt;        JAVABean javabean = gson.fromJson(jsondata, Person<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;        当是Json数组时 借助TypeToken将期望解析成的数据类型（javabean）传入fromjson（）中。&lt;!--code￼<span class="hljs-number">2</span>--&gt;        </code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 第一行代码笔记 </tag>
            
            <tag> 网络技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018-省赛-Java语言大学C组</title>
      <link href="/2018/11/05/2018-%E7%9C%81%E8%B5%9B-Java%E8%AF%AD%E8%A8%80%E5%A4%A7%E5%AD%A6C%E7%BB%84/"/>
      <url>/2018/11/05/2018-%E7%9C%81%E8%B5%9B-Java%E8%AF%AD%E8%A8%80%E5%A4%A7%E5%AD%A6C%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<p>2018第九届蓝桥杯Java语言C组&amp;非官方答案</p><span id="more"></span><h1 id="2018-省赛-java语言大学c组"><a class="markdownIt-Anchor" href="#2018-省赛-java语言大学c组"></a> 2018-省赛-Java语言大学C组</h1><h5 id="1哪天返回"><a class="markdownIt-Anchor" href="#1哪天返回"></a> 1:哪天返回</h5><p>小明被不明势力劫持。后被扔到x星站再无问津。小明得知每天都有飞船飞往地球，但需要108元的船票，而他却身无分文。<br />他决定在x星战打工。好心的老板答应包食宿，第1天给他1元钱。<br />并且，以后的每一天都比前一天多2元钱，直到他有足够的钱买票。<br />请计算一下，小明在第几天就能凑够108元，返回地球。</p><p>要求提交的是一个整数，表示第几天。请不要提交任何多余的内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> t=<span class="number">1</span>,n=<span class="number">1</span>,m=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(m&lt;<span class="number">108</span>) &#123;</span><br><span class="line">t++;</span><br><span class="line">n+=<span class="number">2</span>;</span><br><span class="line">m+=n;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2猴子分香蕉"><a class="markdownIt-Anchor" href="#2猴子分香蕉"></a> 2；猴子分香蕉</h5><p>5只猴子是好朋友，在海边的椰子树上睡着了。这期间，有商船把一大堆香蕉忘记在沙滩上离去。<br />第1只猴子醒来，把香蕉均分成5堆，还剩下1个，就吃掉并把自己的一份藏起来继续睡觉。<br />第2只猴子醒来，重新把香蕉均分成5堆，还剩下2个，就吃掉并把自己的一份藏起来继续睡觉。<br />第3只猴子醒来，重新把香蕉均分成5堆，还剩下3个，就吃掉并把自己的一份藏起来继续睡觉。<br />第4只猴子醒来，重新把香蕉均分成5堆，还剩下4个，就吃掉并把自己的一份藏起来继续睡觉。<br />第5只猴子醒来，重新把香蕉均分成5堆，哈哈，正好不剩！</p><p>请计算一开始最少有多少个香蕉。</p><p>需要提交的是一个整数，不要填写任何多余的内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">5</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">4</span>;i&gt;<span class="number">0</span>;i--)sum=sum*<span class="number">5</span>+i;</span><br><span class="line">System.out.println(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4第几个幸运数"><a class="markdownIt-Anchor" href="#4第几个幸运数"></a> 4；第几个幸运数</h5><p>到x星球旅行的游客都被发给一个整数，作为游客编号。<br />x星的国王有个怪癖，他只喜欢数字3,5和7。<br />国王规定，游客的编号如果只含有因子：3,5,7,就可以获得一份奖品。</p><p>我们来看前10个幸运数字是：<br />3 5 7 9 15 21 25 27 35 45<br />因而第11个幸运数字是：49</p><p>小明领到了一个幸运数字 59084709587505，他去领奖的时候，人家要求他准确地说出这是第几个幸运数字，否则领不到奖品。</p><p>请你帮小明计算一下，59084709587505是第几个幸运数字。</p><p>需要提交的是一个整数，请不要填写任何多余内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> ArrayList&lt;Long&gt;  threelist =<span class="keyword">new</span>  ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">static</span> ArrayList&lt;Long&gt;  list =<span class="keyword">new</span>  ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">static</span> ArrayList&lt;Long&gt;  fivelist =<span class="keyword">new</span>  ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">static</span> ArrayList&lt;Long&gt;  sevenlist =<span class="keyword">new</span>  ArrayList&lt;&gt;();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">Scanner str =<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">long</span> input = str.nextLong();</span><br><span class="line"><span class="keyword">long</span> num=<span class="number">3</span>;</span><br><span class="line">add(<span class="number">3</span>);</span><br><span class="line">add(<span class="number">5</span>);</span><br><span class="line">add(<span class="number">7</span>);</span><br><span class="line"><span class="keyword">while</span>(num!=input) &#123;</span><br><span class="line">num=Math.min(Math.min(threelist.get(<span class="number">0</span>)*<span class="number">3</span>, fivelist.get(<span class="number">0</span>)*<span class="number">5</span>), sevenlist.get(<span class="number">0</span>)*<span class="number">7</span>);</span><br><span class="line"><span class="keyword">if</span>(num/threelist.get(<span class="number">0</span>)==<span class="number">3</span>) threelist.remove(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(num/fivelist.get(<span class="number">0</span>)==<span class="number">5</span>) fivelist.remove(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(num/sevenlist.get(<span class="number">0</span>)==<span class="number">7</span>) sevenlist.remove(<span class="number">0</span>);</span><br><span class="line">add(num);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(list.size()+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">long</span> i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!list.contains(i)) &#123;</span><br><span class="line">list.add(i);</span><br><span class="line">threelist.add(i);</span><br><span class="line">fivelist.add(i);</span><br><span class="line">sevenlist.add(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5书号验证"><a class="markdownIt-Anchor" href="#5书号验证"></a> 5:书号验证</h5><p>2004年起，国际ISBN中心出版了《13位国际标准书号指南》。<br />原有10位书号前加978作为商品分类标识；校验规则也改变。<br />校验位的加权算法与10位ISBN的算法不同，具体算法是：<br />用1分别乘ISBN的前12位中的奇数位（从左边开始数起），用3乘以偶数位，乘积之和以10为模，10与模值的差值再对10取模（即取个位的数字）即可得到校验位的值，其值范围应该为0~9。</p><p>下面的程序实现了该算法，请仔细阅读源码，填写缺失的部分。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">f</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> k=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.length(); i++)&#123;</span><br><span class="line"><span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span> || c==<span class="string">&#x27; &#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">sum +=(k%<span class="number">2</span>+<span class="number">1</span>)*<span class="number">3</span>*(<span class="keyword">int</span>)(<span class="string">&#x27;c&#x27;</span>-<span class="number">48</span>)+(k%<span class="number">2</span>)*(<span class="keyword">int</span>)(<span class="string">&#x27;c&#x27;</span>-<span class="number">48</span>) ;  <span class="comment">//填空</span></span><br><span class="line">k++;</span><br><span class="line"><span class="keyword">if</span>(k&gt;<span class="number">12</span>) <span class="keyword">break</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> s.charAt(s.length()-<span class="number">1</span>)-<span class="string">&#x27;0&#x27;</span> == (<span class="number">10</span>-sum % <span class="number">10</span>)%<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">System.out.println(f(<span class="string">&quot;978-7-301-04815-3&quot;</span>));</span><br><span class="line">System.out.println(f(<span class="string">&quot;978-7-115-38821-6&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6打印大x"><a class="markdownIt-Anchor" href="#6打印大x"></a> 6:打印大X</h5><p>如下的程序目的是在控制台打印输出大X。<br />可以控制两个参数：图形的高度，以及笔宽。</p><p>用程序中的测试数据输出效果：<br />(如果显示有问题，可以参看p1.png)</p><p>高度=15, 笔宽=3</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">***           ***</span><br><span class="line"> ***         ***</span><br><span class="line">  ***       ***</span><br><span class="line">   ***     ***</span><br><span class="line">    ***   ***</span><br><span class="line">     *** ***</span><br><span class="line">      *****</span><br><span class="line">       ***</span><br><span class="line">      *****</span><br><span class="line">     *** ***</span><br><span class="line">    ***   ***</span><br><span class="line">   ***     ***</span><br><span class="line">  ***       ***</span><br><span class="line"> ***         ***</span><br><span class="line">***           ***</span><br><span class="line">高度=8, 笔宽=5</span><br><span class="line">*****  *****</span><br><span class="line"> **********</span><br><span class="line">  ********</span><br><span class="line">   ******</span><br><span class="line">   ******</span><br><span class="line">  ********</span><br><span class="line"> **********</span><br><span class="line">*****  *****</span><br><span class="line"></span><br><span class="line">请仔细分析程序流程，填写缺失的代码。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class A</span><br><span class="line">&#123;</span><br><span class="line">static void f(int h, int w)&#123;</span><br><span class="line">System.out.println(String.format(&quot;高度=%d, 笔宽=%d&quot;,h,w));</span><br><span class="line">int a1 = 0;</span><br><span class="line">int a2 = h - 1;</span><br><span class="line"></span><br><span class="line">for(int k=0; k&lt;h; k++)&#123;</span><br><span class="line">int p = Math.min(a1,a2);</span><br><span class="line">int q = Math.max(a1+w,a2+w);</span><br><span class="line"></span><br><span class="line">for(int i=0; i&lt;p; i++) System.out.print(&quot; &quot;);</span><br><span class="line"></span><br><span class="line">if(q-p&lt;w*2)&#123;</span><br><span class="line">for(int i=0; i&lt;q-p; i++) System.out.print(&quot;*&quot;);; //填空</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">for(int i=0; i&lt;w; i++) System.out.print(&quot;*&quot;);</span><br><span class="line">for(int i=0; i&lt;q-p-w*2; i++) System.out.print(&quot; &quot;);</span><br><span class="line">for(int i=0; i&lt;w; i++) System.out.print(&quot;*&quot;);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">a1++;</span><br><span class="line">a2--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">f(15,3);</span><br><span class="line">f(8,5);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">注意：只填写缺失的代码，不要拷贝已经存在的代码。</span><br></pre></td></tr></table></figure><h5 id="8等腰三角形"><a class="markdownIt-Anchor" href="#8等腰三角形"></a> 8：等腰三角形</h5><p>本题目要求你在控制台输出一个由数字组成的等腰三角形。<br />具体的步骤是：</p><ol><li>先用1,2,3，…的自然数拼一个足够长的串</li><li>用这个串填充三角形的三条边。从上方顶点开始，逆时针填充。<br />比如，当三角形高度是8时：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">       1</span><br><span class="line">      2 1</span><br><span class="line">     3   8</span><br><span class="line">    4     1</span><br><span class="line">   5       7</span><br><span class="line">  6         1</span><br><span class="line"> 7           6</span><br><span class="line">891011121314151</span><br></pre></td></tr></table></figure><p>输入，一个正整数n(3&lt;n&lt;300),表示三角形的高度<br />输出，用数字填充的等腰三角形。</p><p>为了便于测评，我们要求空格一律用&quot;.&quot;代替。</p><p>例如：<br />输入：<br />5</p><p>程序应该输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">....1</span><br><span class="line">...2.1</span><br><span class="line">..3...2</span><br><span class="line">.4.....1</span><br><span class="line">567891011</span><br></pre></td></tr></table></figure><p>再例如：<br />输入：<br />10</p><p>程序应该输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.........1</span><br><span class="line">........2.2</span><br><span class="line">.......3...2</span><br><span class="line">......4.....2</span><br><span class="line">.....5.......1</span><br><span class="line">....6.........2</span><br><span class="line">...7...........0</span><br><span class="line">..8.............2</span><br><span class="line">.9...............9</span><br><span class="line">1011121314151617181</span><br></pre></td></tr></table></figure><p>资源约定：<br />峰值内存消耗（含虚拟机） &lt; 256M<br />CPU消耗  &lt; 1000ms</p><p>请严格按要求输出，不要画蛇添足地打印类似：“请您输入…” 的多余内容。</p><p>所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。<br />不要使用package语句。不要使用jdk1.7及以上版本的特性。<br />主类的名字必须是：Main，否则按无效代码处理。</p><h5 id="标8小朋友崇拜圈"><a class="markdownIt-Anchor" href="#标8小朋友崇拜圈"></a> 标8：小朋友崇拜圈</h5><p>班里N个小朋友，每个人都有自己最崇拜的一个小朋友（也可以是自己）。<br />在一个游戏中，需要小朋友坐一个圈，<br />每个小朋友都有自己最崇拜的小朋友在他的右手边。<br />求满足条件的圈最大多少人？</p><p>小朋友编号为1,2,3,…N<br />输入第一行，一个整数N（3&lt;N&lt;100000）<br />接下来一行N个整数，由空格分开。</p><p>要求输出一个整数，表示满足条件的最大圈的人数。</p><p>例如：<br />输入：<br />9<br />3 4 2 5 3 8 4 6 9</p><p>则程序应该输出：<br />4</p><p>解释：<br /><img src= "/img/loading.gif" data-lazy-src="https://www.dropbox.com/s/3u7m7a9cc9dckr2/p1.png?dl=0&amp;raw=1" alt="p1.png" /><br />如图所示，崇拜关系用箭头表示，红色表示不在圈中。<br />显然，最大圈是[2 4 5 3] 构成的圈</p><p>再例如：<br />输入：<br />30<br />22 28 16 6 27 21 30 1 29 10 9 14 24 11 7 2 8 5 26 4 12 3 25 18 20 19 23 17 13 15</p><p>程序应该输出：<br />16</p><p>资源约定：<br />峰值内存消耗（含虚拟机） &lt; 256M<br />CPU消耗  &lt; 1000ms</p><p>请严格按要求输出，不要画蛇添足地打印类似：“请您输入…” 的多余内容。</p><p>所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。<br />不要使用package语句。不要使用jdk1.7及以上版本的特性。<br />主类的名字必须是：Main，否则按无效代码处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">Scanner str = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> n = str.nextInt();</span><br><span class="line"><span class="keyword">int</span> a[] = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">a[i]=str.nextInt();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> Max=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line">ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">j=i;</span><br><span class="line"><span class="keyword">while</span>(list.indexOf(a[j])==-<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">list.add(a[j]);</span><br><span class="line">j=a[j];</span><br><span class="line">&#125;</span><br><span class="line">Max=Math.max(list.size(), Max);</span><br><span class="line">list.clear();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Max);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5耐摔指数"><a class="markdownIt-Anchor" href="#5耐摔指数"></a> 5:耐摔指数</h5><p>x星球的居民脾气不太好，但好在他们生气的时候唯一的异常举动是：摔手机。<br />各大厂商也就纷纷推出各种耐摔型手机。x星球的质监局规定了手机必须经过耐摔测试，并且评定出一个耐摔指数来，之后才允许上市流通。</p><p>x星球有很多高耸入云的高塔，刚好可以用来做耐摔测试。塔的每一层高度都是一样的，与地球上稍有不同的是，他们的第一层不是地面，而是相当于我们的2楼。</p><p>如果手机从第7层扔下去没摔坏，但第8层摔坏了，则手机耐摔指数=7。<br />特别地，如果手机从第1层扔下去就坏了，则耐摔指数=0。<br />如果到了塔的最高层第n层扔没摔坏，则耐摔指数=n</p><p>为了减少测试次数，从每个厂家抽样3部手机参加测试。</p><p>如果已知了测试塔的高度，并且采用最佳策略，在最坏的运气下最多需要测试多少次才能确定手机的耐摔指数呢？</p><p>输入数据，一个整数n（3&lt;n&lt;10000）,表示测试塔的高度。<br />输出一个整数，表示最多测试多少次。</p><p>例如：<br />输入：<br />3</p><p>程序应该输出：<br />2</p><p>解释：<br />手机a从2楼扔下去，坏了，就把b手机从1楼扔；否则a手机继续3层扔下</p><p>再例如：<br />输入：<br />7</p><p>程序应该输出：<br />3</p><p>解释：<br />a手机从4层扔，坏了，则下面有3层，b,c 两部手机2次足可以测出指数；<br />若是没坏，手机充足，上面5,6,7 三层2次也容易测出。</p><p>资源约定：<br />峰值内存消耗（含虚拟机） &lt; 256M<br />CPU消耗  &lt; 1000ms</p><p>请严格按要求输出，不要画蛇添足地打印类似：“请您输入…” 的多余内容。</p><p>所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。<br />不要使用package语句。不要使用jdk1.7及以上版本的特性。<br />主类的名字必须是：Main，否则按无效代码处理。</p><hr /><p>笨笨有话说：<br />我觉得3个手机太难了，要是2个手机还可以考虑一下。</p><p>歪歪有话说：<br />想什么呢，你！要是1部手机还用你编程啊？那样的话只好从下往上一层一层测。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Scanner str =new  Scanner(System.in);</span><br><span class="line">System.out.println(num(str.nextInt()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static int num(int nextInt) &#123;</span><br><span class="line">// TODO 自动生成的方法存根</span><br><span class="line">if(nextInt&lt;=3) return 2;</span><br><span class="line">return num(nextInt/2)+1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据持久化</title>
      <link href="/2018/10/30/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96%20(2)/"/>
      <url>/2018/10/30/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96%20(2)/</url>
      
        <content type="html"><![CDATA[<p>Android 数据持久化笔记</p><span id="more"></span><h2 id="文件存储"><a class="markdownIt-Anchor" href="#文件存储"></a> 文件存储</h2><h3 id="写入文件"><a class="markdownIt-Anchor" href="#写入文件"></a> 写入文件</h3><p>调用Context类中openFileOutput方法 返回一个FileOutputStream<br /><img src= "/img/loading.gif" data-lazy-src="https://www.dropbox.com/s/ziymnixtht413hg/KN~Z_B8_H~W%60AEKF4TMN%29%25O.png?dl=0&amp;raw=1" alt="KNZ_B8_HW`AEKF4TMN)%O.png" /><br />openFileOutput（文件名（不允许包含路径，默认存储到/data/data/<packagename>/file/),操作模式：MODE_PRIVATE（方法默认的模式 覆盖） or MODE_APPEND（追加）.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String data = <span class="string">&quot;Data&quot;</span>;</span><br><span class="line">    FileOutputStream out = <span class="keyword">null</span>;</span><br><span class="line">    BufferedWriter writer = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        out = openFileOutput(<span class="string">&quot;data&quot;</span>, Context.MODE_APPEND);</span><br><span class="line">        writer = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(out));</span><br><span class="line">        writer.write(data);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (writer != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                writer.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通过device file explorer（在右下角）或Android Device Monitor(权限解决办法：<a href="https://www.jianshu.com/p/d8a9a2918c61">https://www.jianshu.com/p/d8a9a2918c61</a>)查看data中的文件 实在没办法解决 就用回api24</p><h3 id="读取文件"><a class="markdownIt-Anchor" href="#读取文件"></a> 读取文件</h3><p><img src= "/img/loading.gif" data-lazy-src="https://www.dropbox.com/s/7fumv5cptdcfeli/OKW4PN%28T7C5EW_67BXFJ5YP.png?dl=0&amp;raw=1" alt="OKW4PN(T7C5EW_67BXFJ5YP.png" /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">load</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    FileInputStream in </span>= <span class="keyword">null</span>;</span><br><span class="line">    BufferedReader reader =<span class="keyword">null</span>;</span><br><span class="line">    StringBuilder content = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        in = openFileInput(<span class="string">&quot;data&quot;</span>);</span><br><span class="line">        reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in));</span><br><span class="line">        String line=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> ((line = reader.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            content.append(line);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (reader!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                reader.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> content.toString();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="sharedpreferences-存储"><a class="markdownIt-Anchor" href="#sharedpreferences-存储"></a> SharedPreferences 存储</h2><p>SharedPreferences是使用键值对形式存储数据，使用Xml格式管理数据。</p><h3 id="获取sharedpreferences对象的三个方式"><a class="markdownIt-Anchor" href="#获取sharedpreferences对象的三个方式"></a> 获取SharedPreferences对象的三个方式：</h3><ul><li>Context类中的getSharedPreferences（）方法<br />第一个参数指定SharedPreferences文件名称 第二个参数指定模式（除MODE_PRIVATE其他模式均废除）</li><li>Activity类中getPreferences（）方法<br />仅接受 mode 参数 (0)，使用当前活动类名作为SharedPreferences文件名</li><li>PreferenceManager类中getDefaultSharedPreferences（）方法<br />接收一个Context对象，使用当前当前应用程序包名作为SharedPreferences文件名</li></ul><h3 id="使用sharedpreferences存储数据"><a class="markdownIt-Anchor" href="#使用sharedpreferences存储数据"></a> 使用SharedPreferences存储数据</h3><ul><li>1.调用SharePreferences对象的edit（）方法获取一个SharePreferences.Editor对象</li><li>2.向SharePreferences.Editor 对象添加数据。例如 添加一个String对象用 putString()方法。</li><li>3.调用apply（）方法提交数据。完成存储。</li></ul><h3 id="使用sharedpreferences读取数据"><a class="markdownIt-Anchor" href="#使用sharedpreferences读取数据"></a> 使用SharedPreferences读取数据</h3><ul><li>1.获取SharePreferences对象方法</li><li>2.调用SharePreferences对象的getString()等方法获取数据。<br />一个记住密码的Demo</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SharedPreferences preferences;</span><br><span class="line">    <span class="keyword">private</span> EditText name;</span><br><span class="line">    <span class="keyword">private</span> EditText passwordEdit;</span><br><span class="line">    <span class="keyword">private</span> CheckBox rememberpass;</span><br><span class="line">    <span class="keyword">private</span> Button login;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        preferences = PreferenceManager.getDefaultSharedPreferences(<span class="keyword">this</span>);</span><br><span class="line">        name =   (EditText)findViewById(R.id.name);</span><br><span class="line">        passwordEdit = (EditText)findViewById(R.id.password);</span><br><span class="line">        rememberpass = (CheckBox)findViewById(R.id.remember_password);</span><br><span class="line">        login = (Button)findViewById(R.id.button);</span><br><span class="line">        <span class="keyword">boolean</span> isRemember = preferences.getBoolean(<span class="string">&quot;remember_password&quot;</span>,<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span>(isRemember)&#123;</span><br><span class="line">            String account =preferences.getString(<span class="string">&quot;account&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">            String password =preferences.getString(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">            name.setText(account);</span><br><span class="line">            passwordEdit.setText(password);</span><br><span class="line">            rememberpass.setChecked(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        login.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> SharedPreferences.Editor editor;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                String account =name.getText().toString();</span><br><span class="line">                String password =passwordEdit.getText().toString();</span><br><span class="line">                <span class="keyword">if</span>(account.equals(<span class="string">&quot;admin&quot;</span>)&amp;&amp;password.equals(<span class="string">&quot;123456&quot;</span>))&#123;</span><br><span class="line">                    editor = preferences.edit();</span><br><span class="line">                    <span class="keyword">if</span>(rememberpass.isChecked())&#123;</span><br><span class="line">                        editor.putBoolean(<span class="string">&quot;remember_password&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">                        editor.putString(<span class="string">&quot;account&quot;</span>,account);</span><br><span class="line">                        editor.putString(<span class="string">&quot;password&quot;</span>,password);</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        editor.clear();</span><br><span class="line">                    &#125;</span><br><span class="line">                    editor.apply();</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">&quot;登陆成功！&quot;</span>,Toast.LENGTH_LONG).show();</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">&quot;登陆失败！&quot;</span>,Toast.LENGTH_LONG).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="sqlite-数据库存储"><a class="markdownIt-Anchor" href="#sqlite-数据库存储"></a> SQLite 数据库存储</h2><h3 id="构建sqliteopenhelper-管理sqlite的帮助类"><a class="markdownIt-Anchor" href="#构建sqliteopenhelper-管理sqlite的帮助类"></a> 构建SQLiteOpenHelper  （管理SQLite的帮助类）</h3><ul><li>SQLiteOpenHelper（）<br /><img src= "/img/loading.gif" data-lazy-src="https://www.dropbox.com/s/wqhbtbb8pmkhuu5/E%60%29NJZNT%60LE5%25%25YJH9AC%601L.png?dl=0&amp;raw=1" alt="ELE5%%YJH9AC`1L.png" /><br />然而并不知道第三个参数Cursor是什么鬼东西，一般调用时传入null；<br />使用该抽象类需要继承这个类并重写OnCreate（）与onUpgrade（）两个抽象方法；</li><li>OnCreate（SQLiteDatabase db）<br />Called when the database is created for the first time. This is where the creation of tables and the initial population of the tables should happen.</li><li>onUpgrade (SQLiteDatabase db, int oldVersion, int newVersion)<br />Called when the database needs to be upgraded. The implementation should use this method to drop tables, add tables, or do anything else it needs to upgrade to the new schema version.</li></ul><h3 id="创建数据库"><a class="markdownIt-Anchor" href="#创建数据库"></a> 创建数据库</h3><p>使用getWritableDatabase()或getReadableDatabase（）创建数据库。但由于这两个方法需要较长时间才能返回，不建议在主线程（UI线层）中使用。<br />创表语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table Book (</span><br><span class="line">            id integer primary key autoincrement, </span><br><span class="line">            author text, </span><br><span class="line">            price real, </span><br><span class="line">            pages integer, </span><br><span class="line">            name text)</span><br><span class="line">            // blob 二进制类型 real 浮点数类型</span><br></pre></td></tr></table></figure><p>Demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDatabaseHelper</span> <span class="keyword">extends</span> <span class="title">SQLiteOpenHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CREATE_BOOK = <span class="string">&quot;create table Book (&quot;</span></span><br><span class="line">            + <span class="string">&quot;id integer primary key autoincrement, &quot;</span></span><br><span class="line">            + <span class="string">&quot;author text, &quot;</span></span><br><span class="line">            + <span class="string">&quot;price real, &quot;</span></span><br><span class="line">            + <span class="string">&quot;pages integer, &quot;</span></span><br><span class="line">            + <span class="string">&quot;name text)&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyDatabaseHelper</span><span class="params">(Context context, String name,</span></span></span><br><span class="line"><span class="params"><span class="function">                            SQLiteDatabase.CursorFactory factory, <span class="keyword">int</span> version)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, name, factory, version);</span><br><span class="line">        mContext = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(SQLiteDatabase db)</span> </span>&#123;</span><br><span class="line">        db.execSQL(CREATE_BOOK);</span><br><span class="line">        Toast.makeText(mContext, <span class="string">&quot;Create succeeded&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpgrade</span><span class="params">(SQLiteDatabase db, <span class="keyword">int</span> oldVersion, <span class="keyword">int</span> newVersion)</span> </span>&#123;</span><br><span class="line">        db.execSQL(<span class="string">&quot;drop table if exists Book&quot;</span>);</span><br><span class="line">        db.execSQL(<span class="string">&quot;drop table if exists Category&quot;</span>);</span><br><span class="line">        onCreate(db);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MainActivity 中的调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MyDatabaseHelper dbHelper = new MyDatabaseHelper(this, &quot;BookStore.db&quot;, null, 1);</span><br><span class="line">dbHelper.getWritableDatabase();</span><br></pre></td></tr></table></figure><h3 id="升级数据库"><a class="markdownIt-Anchor" href="#升级数据库"></a> 升级数据库</h3><ul><li>修改SQLiteOpenHelper构造方法中第四个参数比之前大 就会调用onUpgrade（）方法。</li><li>修改onUpgrade()方法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) &#123;</span><br><span class="line">    db.execSQL(&quot;drop table if exists Book&quot;);</span><br><span class="line">    onCreate(db);</span><br><span class="line">//如果存在 Book表就将其删除，并调用onCreate(db)重新创建。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="crud"><a class="markdownIt-Anchor" href="#crud"></a> CRUD</h2><p>借助使用getWritableDatabase()或getReadableDatabase（）创建数据库返回的SQLiteDatabase对象进行CRUD操作。</p><h5 id="查询数据retrieve"><a class="markdownIt-Anchor" href="#查询数据retrieve"></a> 查询数据（Retrieve）</h5><ul><li>insert (String table,String nullColumnHack, ContentValues values)<br />利用ContentValues中put()方法重载添加数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SQLiteDatabase db = dbHelper.getWritableDatabase();</span><br><span class="line">ContentValues values = new ContentValues();</span><br><span class="line">// 开始组装第一条数据</span><br><span class="line">values.put(&quot;name&quot;, &quot;The Da Vinci Code&quot;);</span><br><span class="line">values.put(&quot;author&quot;, &quot;Dan Brown&quot;);</span><br><span class="line">values.put(&quot;pages&quot;, 454);</span><br><span class="line">values.put(&quot;price&quot;, 16.96);// id 列被设为自增长，不需要赋值</span><br><span class="line">db.insert(&quot;Book&quot;, null, values); // 插入数据</span><br><span class="line">values.clear();//清空values</span><br></pre></td></tr></table></figure><h5 id="更新数据updata"><a class="markdownIt-Anchor" href="#更新数据updata"></a> 更新数据（Updata）</h5><ul><li>update (String table,ContentValues values,String whereClause, String[] whereArgs)<br />ContentValues values：装更新的数据<br />String whereClause, String[] whereArgs：指定更新的某一行或某几行。（默认更新所有行）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SQLiteDatabase db = dbHelper.getWritableDatabase();</span><br><span class="line">                ContentValues values = new ContentValues();</span><br><span class="line">                values.put(&quot;price&quot;, 10.99);</span><br><span class="line">                db.update(&quot;Book&quot;, values, &quot;name = ?&quot;, new String[] &#123; &quot;The Da Vinci Code&quot; &#125;);//占位符 ? 通过 new String[] &#123; &quot;The Da Vinci Code&quot; &#125; 提供的字符串为内容</span><br></pre></td></tr></table></figure><h5 id="删除数据delete"><a class="markdownIt-Anchor" href="#删除数据delete"></a> 删除数据（Delete）</h5><ul><li>delete (String table,String whereClause,String[] whereArgs)<br />String whereClause, String[] whereArgs：指定删除的某一行或某几行。（默认删除所有行）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SQLiteDatabase db = dbHelper.getWritableDatabase();</span><br><span class="line">db.delete(&quot;Book&quot;, &quot;pages &gt; ?&quot;, new String[] &#123; &quot;500&quot; &#125;);//删除pages&gt;500的数据</span><br></pre></td></tr></table></figure><h5 id="查询数据create"><a class="markdownIt-Anchor" href="#查询数据create"></a> 查询数据（Create）</h5><p><img src= "/img/loading.gif" data-lazy-src="https://www.dropbox.com/s/x83afp2zgh4skmn/ZEIOM6D%24QR6X%40%28%28AHXFIP09.png?dl=0&amp;raw=1" alt="ZEIOM6D$QR6X@((AHXFIP09.png" /><br />强行翻译~~~<br />直接上简单粗暴的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">SQLiteDatabase db = dbHelper.getWritableDatabase();</span><br><span class="line">                // 查询Book表中所有的数据</span><br><span class="line">                Cursor cursor = db.query(&quot;Book&quot;, null, null, null, null, null, null);</span><br><span class="line">                if (cursor.moveToFirst()) &#123;</span><br><span class="line">                    do &#123;</span><br><span class="line">                        // 遍历Cursor对象，</span><br><span class="line">                        String name = cursor.getString(cursor.getColumnIndex(&quot;name&quot;));</span><br><span class="line">                        String author = cursor.getString(cursor.getColumnIndex(&quot;author&quot;));</span><br><span class="line">                        int pages = cursor.getInt(cursor.getColumnIndex(&quot;pages&quot;));</span><br><span class="line">                        double price = cursor.getDouble(cursor.getColumnIndex(&quot;price&quot;));</span><br><span class="line">                    &#125; while (cursor.moveToNext());</span><br><span class="line">                &#125;</span><br><span class="line">                cursor.close();</span><br></pre></td></tr></table></figure><h5 id="直接使用sql操作数据库"><a class="markdownIt-Anchor" href="#直接使用sql操作数据库"></a> 直接使用SQL操作数据库</h5><ul><li>db.execSQL(“INSERT INTO table_name (列1, 列2,…) VALUES (?,?,?,?)”,new String[]{“值1”, “值2”,…});</li><li>db.execSQL(updata table_name set 列1=?  列2=?  …, new String[]{“值1”, “值2”,…});</li><li>db.execSQL(delete from table_name where set 列1 &gt; “?”, new String[]{“值”});</li><li>db.rawQuery(“select * from Book”,null);<br />##LitePal 操作数据库</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 数据持久化 </tag>
            
            <tag> Android </tag>
            
            <tag> 第一行代码笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学公式</title>
      <link href="/2018/10/21/%E5%85%AC%E5%BC%8F/"/>
      <url>/2018/10/21/%E5%85%AC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="公式"><a class="markdownIt-Anchor" href="#公式"></a> 公式</h1><h3 id="三角函数"><a class="markdownIt-Anchor" href="#三角函数"></a> 三角函数</h3><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>i</mi><msup><mi>n</mi><mn>2</mn></msup><mi>a</mi><mo>+</mo><mi>c</mi><mi>o</mi><msup><mi>s</mi><mn>2</mn></msup><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">sin^2a +cos^2=1 </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p>seca=\frac{1}{cosa}$$      $$csca=\frac{1}{sina}<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mi>α</mi><mo>±</mo><mi>β</mi><mo stretchy="false">)</mo><mo>=</mo><mi>c</mi><mi>o</mi><mi>s</mi><mi>α</mi><mi>c</mi><mi>o</mi><mi>s</mi><mi>β</mi><mo>∓</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>α</mi><mi>s</mi><mi>i</mi><mi>n</mi><mi>β</mi></mrow><annotation encoding="application/x-tex">cos(\alpha\pm\beta) = cos\alpha cos\beta \mp sin\alpha sin\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">±</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∓</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>α</mi><mo>±</mo><mi>β</mi><mi mathvariant="normal">）</mi><mo>=</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>α</mi><mi>s</mi><mi>i</mi><mi>n</mi><mi>β</mi><mo>±</mo><mi>c</mi><mi>o</mi><mi>s</mi><mi>α</mi><mi>c</mi><mi>o</mi><mi>s</mi><mi>β</mi></mrow><annotation encoding="application/x-tex">sin(\alpha \pm \beta）=sin\alpha sin\beta \pm cos\alpha cos\beta </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">±</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mord cjk_fallback">）</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">±</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>+</mo><mi>t</mi><mi>a</mi><msup><mi>n</mi><mn>2</mn></msup><mi>α</mi><mo>=</mo><mi>s</mi><mi>e</mi><msup><mi>c</mi><mn>2</mn></msup><mi>α</mi><mo>=</mo><mfrac><mn>1</mn><mrow><mi>c</mi><mi>o</mi><msup><mi>s</mi><mn>2</mn></msup><mi>α</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">1+tan^2\alpha = sec^2\alpha=\frac{1}{cos^2\alpha}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><h3 id="倍角公式"><a class="markdownIt-Anchor" href="#倍角公式"></a> 倍角公式</h3><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mn>2</mn><mi>a</mi><mo>=</mo><mn>2</mn><mi>s</mi><mi>i</mi><mi>n</mi><mi>α</mi><mi>c</mi><mi>o</mi><mi>s</mi><mi>α</mi></mrow><annotation encoding="application/x-tex">sin2a=2sin\alpha cos\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord">2</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mn>2</mn><mi>a</mi><mo>=</mo><mi>c</mi><mi>o</mi><msup><mi>s</mi><mn>2</mn></msup><mi>α</mi><mo>−</mo><mi>s</mi><mi>i</mi><msup><mi>n</mi><mn>2</mn></msup><mi>α</mi><mo>=</mo><mn>2</mn><mi>c</mi><mi>o</mi><msup><mi>s</mi><mn>2</mn></msup><mi>α</mi><mo>−</mo><mn>1</mn><mo>=</mo><mn>1</mn><mo>−</mo><mn>2</mn><mi>s</mi><mi>i</mi><msup><mi>n</mi><mn>2</mn></msup><mi>α</mi></mrow><annotation encoding="application/x-tex">cos2a = cos^2\alpha - sin^2\alpha =2cos^2\alpha-1= 1-2sin^2\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord">2</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span></span></span></span></span></p><h3 id="低价无穷小"><a class="markdownIt-Anchor" href="#低价无穷小"></a> 低价无穷小</h3>{\lim_{x \to 0}}sinx~~~~~~~x$$          $${\lim_{x \to 0}}tanx~~~~~~~~~x{\lim_{x \to 0}}arcsinx~~~x$$         $${\lim_{x \to 0}}arctanx~~~xln(1+x) ~~~~~x$$          $$e^x-1      ~~~~~~~~~~~~x1-cosx ~~~~~~\frac{1}{2}x^2$$     $$(1+x)^a-1  ~~~axa^x-1~~~~~~~~~xlna$$      $$\sqrt[n]{1+x}-1 ~~~~\frac{1}{n}x<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mo><mi>log</mi><mo>⁡</mo></mo><mi>a</mi></msub><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>x</mi><mo stretchy="false">)</mo><mtext>      </mtext><mfrac><mn>1</mn><mrow><mi>l</mi><mi>n</mi><mi>a</mi></mrow></mfrac><mi>x</mi><mo stretchy="false">(</mo><mi>a</mi><mo>&gt;</mo><mn>0.</mn><mi>a</mi><mo>≠</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\log_a(1+x)~~~~~~\frac{1}{lna}x (a&gt;0.a \not=1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.057252em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">n</span><span class="mord mathdefault">a</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><h3 id="两个重要极限"><a class="markdownIt-Anchor" href="#两个重要极限"></a> 两个重要极限</h3><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><mn>0</mn></mrow></munder><mfrac><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mi>x</mi></mrow><mi>x</mi></mfrac><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">{\lim_{x \to 0}}\frac{sinx}{x}=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.0536280000000002em;vertical-align:-0.717108em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.082892em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight">0</span></span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.717108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3365200000000002em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mfrac><mn>1</mn><mi>x</mi></mfrac><msup><mo stretchy="false">)</mo><mi>x</mi></msup><mo>=</mo><mi>e</mi></mrow><annotation encoding="application/x-tex">{\lim_{x \to \infty}}(1+\frac{1}{x})^x =e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.45em;vertical-align:-0.7em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.1em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">e</span></span></span></span></span></p><h3 id="导数基本公式"><a class="markdownIt-Anchor" href="#导数基本公式"></a> 导数基本公式</h3>C^{'}=0$$                                                     $$(x^n)^{'}=nx^{n-1}(\log_ax)^{'}=\frac{1}{xlna}(a>0,a\not=1)$$            $$(lnx)^{'}=\frac{1}{x}(a^x)^{'} = a^xlna(a>0),a\not=1) $$               $$（e^x）^{'}=e^x(sinx)^{'}=cosx$$                                        $$(cosx)^{'}=-sinx(tanx)^{'}=\frac{1}{cos^2x}=sec^2x$$                      $$(cotx)^{'}=-\frac{1}{sin^2x}=-csc^2x$$jm$$(secx)^{'}=secxtanx$$                                $$(cscx)^{'}=-cscxcotx(arcsinx)^{'}=\frac{1}{\sqrt{1-x^2}}$$                          $$(arccosx)^{'}=-\frac{1}{\sqrt{1-x^2}}(arctanx)^{'}=\frac{1}{1+x^2}$$                                  $$(arccotx)^{'}=-\frac{1}{1+x^2}<h3 id="不定积分"><a class="markdownIt-Anchor" href="#不定积分"></a> 不定积分</h3>\int kdx=kx+C$$                                             $$\int x^ndx = \frac{x^{n+1}}{n+1}+C (n\not=-1)\int \frac{dx}{x}=ln|x|+C$$                                           $$\int e^xdx=e^x+C\int a^xdx=\frac{a^x}{lna}+C$$                                        $$\int cosxdx=sinx+C\int sinxdx=-cosx+C$$                               $$\int \frac{dx}{\sqrt{1-x^2}{}}=arcsinx+C\int -\frac{dx}{\sqrt{1-x^2}}=arccosx+C$$                    $$\int \frac{dx}{1+x^2}=arctanx+C\int -\frac{dx}{1+x^2}=arccotx+C$$                        $$\int \frac{dx}{cos^2x}=\int sec^2xdx=tanx+C\int \frac{dx}{sin^2x}=\int csc^2xdx=-cotx+C $$        $$\int secxtanxdx=secx+C<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∫</mo><mi>c</mi><mi>s</mi><mi>c</mi><mi>x</mi><mi>c</mi><mi>o</mi><mi>t</mi><mi>x</mi><mi>d</mi><mi>x</mi><mo>=</mo><mo>−</mo><mi>c</mi><mi>s</mi><mi>c</mi><mi>x</mi><mo>+</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">\int cscxcotxdx=-cscx+C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.22225em;vertical-align:-0.86225em;"></span><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">s</span><span class="mord mathdefault">c</span><span class="mord mathdefault">x</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">t</span><span class="mord mathdefault">x</span><span class="mord mathdefault">d</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord mathdefault">c</span><span class="mord mathdefault">s</span><span class="mord mathdefault">c</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span></span></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数学公式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划（DP）</title>
      <link href="/2018/10/21/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%88DP)/"/>
      <url>/2018/10/21/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%88DP)/</url>
      
        <content type="html"><![CDATA[<p>动态规划算法的核心就是通过状态转移将原题转换为数个相似小问题。</p><span id="more"></span><h2 id="初识动态规划"><a class="markdownIt-Anchor" href="#初识动态规划"></a> 初识动态规划：</h2><h4 id="动态规划的基本方法递推"><a class="markdownIt-Anchor" href="#动态规划的基本方法递推"></a> 动态规划的基本方法：递推</h4><p>一个经典的例子:  Fibonacci数列</p><blockquote><p>Fibonacci数列的递推公式为：Fn=Fn-1+Fn-2，其中F1=F2=1。</p></blockquote><p>求解Fn，需知道Fn-1，Fn-2，而求Fn-1又需要知道Fn-2，Fn-3，需要一步步递推至F1，F2<br />我们使用一个递归方法来实现该简单算法<br />当我们输入6时根据递推公式 Fn=Fn-1+Fn-2 即：<br />F(6)=F(5)+F(4)<br />=【F(4)+F(3)】+【F(3)+F(2)】=…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> fibonacci( n-<span class="number">1</span>)+fibonacci(n-<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假如我们输入的是6，那么我们执行的递归树如下：<br /><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdn.net/20170715205029376?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzMwOTg3MA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="avatar" /><br />显然在递归树中我们有多个节点被重复计算，例如F（2）被重复计算了5次，而且调用每一个函数的时候都要保留上下文，所以空间与时间上使用都极大，我们可以在计算过程中保存计算过节点的值，这样可以极大地节省时间和空间上的消耗。</p><h4 id="记忆化搜索"><a class="markdownIt-Anchor" href="#记忆化搜索"></a> 记忆化搜索</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;=<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">int</span> []Memo=<span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">            Memo[i]=-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> fib(n, Memo);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> []Memo)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(Memo[n]!=-<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> Memo[n];</span><br><span class="line">    <span class="comment">//如果已经求出了fib（n）的值直接返回，否则将求出的值保存在Memo备忘录中。</span></span><br><span class="line">        <span class="keyword">if</span>(n&lt;=<span class="number">2</span>)</span><br><span class="line">            Memo[n]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> Memo[n]=fib( n-<span class="number">1</span>,Memo)+fib(n-<span class="number">2</span>,Memo);  </span><br><span class="line">        <span class="keyword">return</span> Memo[n];</span><br><span class="line">    &#125;</span><br><span class="line">````</span><br><span class="line">- 创建了初始化一个n+<span class="number">1</span>大小的Memo数组（默认值设为-<span class="number">1</span>）来保存求出的斐波拉契数列中的每一个值</span><br><span class="line">- 每次计算fib（n）前检查Memo数组中是否已存储了fib（n)计算的结果，若有直接返回fib（n）的值</span><br><span class="line">- 如果没有计算后将值保存在fib（n）里面。</span><br><span class="line">#### -状态和状态转移           </span><br><span class="line">&gt; 在介绍递推和记忆化搜索的时候，都会涉及到一个词---状态，它表示了解决某一问题的中间结果，这是一个比较抽象的概念</span><br><span class="line"></span><br><span class="line">例题中的Fn，还是Fn-<span class="number">1</span>，都是题目中n不同状态中Fn对应的不同状态，无论是递推还是记忆化搜索，首先要设计出合适的状态，然后通过状态的特征建立状态转移方程(Fn=Fn-<span class="number">1</span>+Fn-<span class="number">2</span> )就是一个简单的状态转移方程）。</span><br><span class="line">#### -最优化原理和最优子结构</span><br><span class="line">&gt; 在介如果问题的最优解包含的子问题的解也是最优的，就称该问题具有最有子结构，即满足最优化原理。</span><br><span class="line"></span><br><span class="line">但这种用一个类似备忘录来存储计算过的结果的记忆化搜索还是利用了递归，上面算法不管怎样，计算fib（<span class="number">6</span>）的时候最后还是要计算出fib（<span class="number">1</span>），fib（<span class="number">2</span>），而动态规划的核心，先计算子问题，再由子问题计算父问题。</span><br><span class="line">所以不如直接由F1，F2 一步步逆推出Fn</span><br><span class="line">```<span class="function">java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;=<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">int</span> []Memo=<span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        Memo[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        Memo[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Memo[i]=Memo[i-<span class="number">1</span>]+Memo[i-<span class="number">2</span>];</span><br><span class="line">        &#125;       </span><br><span class="line">        <span class="keyword">return</span> Memo[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自底向上方法也是利用数组保存了先计算的值，为后面的调用服务。观察参与循环的只有 i，i-1 , i-2三项，因此该方法的空间可以进一步使用三个变量循环保留i，i-1 , i-2三项的值就好。这样从fib（1）到fib（n）只需要计算一次且遍历一次即可得出答案。<br />（本例其实并不能很好体现最优子结构，最长单调子序列有更好的体现）</p><h4 id="-决策和无后效性"><a class="markdownIt-Anchor" href="#-决策和无后效性"></a> - 决策和无后效性</h4><blockquote><p>一个状态演变到另一个状态，往往是通过“决策”来进行的。有了“决策”，就会有状态转移。而无后效性，就是一旦某个状态确定后，它之前的状态无法对它之后的状态产生“效应”（影响）。</p></blockquote><p>即是说当你计算出Fn-2与Fn-1时，即便Fn-1 求值过程中需要Fn-3，但计算Fn的值时 Fn-3已不影响Fn的值。</p><h2 id="动态规划模型"><a class="markdownIt-Anchor" href="#动态规划模型"></a> 动态规划模型：</h2><h4 id="1线性模型"><a class="markdownIt-Anchor" href="#1线性模型"></a> 1.线性模型</h4><blockquote><p>线性指的是状态的排布是呈线性的。</p></blockquote><pre><code>举例一个是经典的动态规划问题，被称为最长单调子序列。 【例题】给定一个长度为n(1 &lt;= n &lt;= 1000)的整数序列a[i]，求它的一个子序列(子序列即在原序列任意位置删除0或多个元素后的序列)，满足如下条件：  1、该序列单调递增；  2、在所有满足条件1的序列中长度是最长的；</code></pre><p>看到这种题目第一反应是直接dfs，把每一种情况枚举出来，但对于长度为n的数列长度没增加一个单位，子序列的数量是前者的指数级，我们可以尝试用动态规划，每次结果都在更短的情况下推出来，例如 可以在长度为n的序列基础上将长度n+1的序列的最长单调子序列推出来。假设第i个数取的情况下已经搜索出的最大长度记录在数组d中，即用d[i]表示当前搜索到的以a[i]结尾的最长单调子序列的长度，那么如果下次搜索得到的序列长度小于等于d[i]，就不必往下搜索了（因为即便继续往后枚举，能够得到的解必定不会比之前更长）；反之，则需要更新d[i]的值。最后d[d.lenght-1]即是整个数列的最长单调子序列的长度了。</p><p><img src= "/img/loading.gif" data-lazy-src="http://cppblog.com/images/cppblog_com/menjitianya/donggui_8.png" alt="avatar" /><br />如图，红色路径表示第一次搜索得到的一个最长子序列1、2、3、5，蓝色路径表示第二次搜索，当枚举第3个元素取的情况时，发现以第3个数结尾的最长长度d[3] = 3，比本次枚举的长度要大（本次枚举的长度为2），所以放弃往下枚举，大大减少了搜索的状态空间。<br />这时候，我们其实已经不经意间设计好了状态，就是上文中提到的那个d[i]数组，它表示的是以a[i]结尾的最长单调子序列的长度，那么对于任意的i，d[i] 一定等于 d[j] + 1 ( j &lt; i )，而且还得满足 a[j] &lt; a[i]。因为这里的d[i]表示的是最长长度，所以d[i]的表达式可以更加明确，即：</p><blockquote><p>d[i] = max{ d[j] | j &lt; i &amp;&amp; a[j] &lt; a[i] } + 1</p></blockquote><p>这个表达式很好的阐释了最优化原理，其中d[j]作为d[i]的子问题，d[i]最长（优）当且仅当d[j]最长（优）。当然，这个方程就是这个问题的状态转移方程。状态总数量O(n), 每次转移需要用到前i项的结果，平摊下来也是O(n)的,所以该问题的时间复杂度是O(n^2)，然而它并不是求解这类问题的最优解，下文会提到最长单调子序列的O(nlogn)的优化算法。</p><p>接下来举例一个个人感觉可以很好将动态规划跟贪心区分开的一道例题（之前一直弄不清贪心与动态规划的区别）</p><pre><code>    在一个夜黑风高的晚上，有n（n &lt;= 50）个小朋友在桥的这边，现在他们需要过桥，但是由于桥很窄，每次只允许不大于两人通过，他们只有一个手电筒，所以每次过桥的两个人需要把手电筒带回来，i号小朋友过桥的时间为T[i]，两个人过桥的总时间为二者中时间长者。问所有小朋友过桥的总时间最短是多少。</code></pre><p>一开始用贪心的想法直接让最快的人 ，来回跑送人过桥~可是后来实例一推就发现并不是总的最优的算法，<br />我们先将所有人按花费时间递增进行排序，假设前i个人过河花费的最少时间为opt[i]，那么考虑前i-1个人过河的情况，即河这边还有1个人，河那边有i-1个人，并且这时候手电筒肯定在对岸，所以<br />opt[i] = opt[i-1] + a[1] + a[i]        (让花费时间最少的人把手电筒送过来，然后和第i个人一起过河)<br />如果河这边还有两个人，一个是第i号，另外一个无所谓，河那边有i-2个人，并且手电筒肯定在对岸，所以2、区间模型<br />opt[i] = opt[i-2] + a[1] + a[i] + 2*a[2]    (让花费时间最少的人把电筒送过来，然后第i个人和另外一个人一起过河，由于花费时间最少的人在这边，所以下一次送手电筒过来的一定是花费次少的，送过来后花费最少的和花费次少的一起过河，解决问题)<br />所以</p><blockquote><p>opt[i] = min{opt[i-1] + a[1] + a[i] , opt[i-2] + a[1] + a[i] + 2*a[2] }</p></blockquote><h4 id="2区间模型"><a class="markdownIt-Anchor" href="#2区间模型"></a> 2.区间模型</h4><blockquote><p>区间模型的状态表示一般为d[i][j]，表示区间[i, j]上的最优解，然后通过状态转移计算出[i+1, j]或者[i, j+1]上的最优解，逐步扩大区间的范围，最终求得[1, len]的最优解。</p></blockquote><pre><code>  【例题7】给定一个长度为n（n &lt;= 1000）的字符串A，求插入最少多少个字符使得它变成一个回文串。</code></pre><p>典型的区间模型，回文串拥有很明显的子结构特征，即当字符串X是一个回文串时，在X两边各添加一个字符’a’后，aXa仍然是一个回文串，我们用d[i][j]来表示A[i…j]这个子串变成回文串所需要添加的最少的字符数，那么对于A[i] == A[j]的情况，很明显有 d[i][j] = d[i+1][j-1] （这里需要明确一点，当i+1 &gt; j-1时也是有意义的，它代表的是空串，空串也是一个回文串，所以这种情况下d[i+1][j-1] = 0）；当A[i] != A[j]时，我们将它变成更小的子问题求解，我们有两种决策：<br />1、在A[j]后面添加一个字符A[i]；<br />2、在A[i]前面添加一个字符A[j]；<br />根据两种决策列出状态转移方程为：</p><blockquote><pre><code> d[i][j] = min&#123; d[i+1][j], d[i][j-1] &#125; + 1;  </code></pre></blockquote><h4 id="3背包模型"><a class="markdownIt-Anchor" href="#3背包模型"></a> 3.背包模型</h4><p>摘选<a href="https://raw.githubusercontent.com/tianyicui/pack/master/V2.pdf">背包九讲</a>各个类型</p><h5 id="01背包"><a class="markdownIt-Anchor" href="#01背包"></a> 01背包</h5><pre><code>        有N种物品（每种物品1件）和一个容量为V的背包。放入第 i 种物品耗费的空间是Ci，得到的价值是Wi。求解将哪些物品装入背包可使价值总和最大。</code></pre><p>f[i][v]表示前i种物品恰好放入一个容量为v的背包可以获得的最大价值。<br />决策为第i个物品在前i-1个物品放置完毕后，是选择放还是不放，状态转移方程为：</p><blockquote><p>f[i][v] = max{ f[i-1][v], f[i-1][v - Ci] +Wi }</p></blockquote><p>（空间复杂度可利用滚动数组进行优化达到O(V)）。</p><blockquote><p>f[[v] = max{ f[v], f[v - Ci] +Wi }</p></blockquote><h5 id="完全背包"><a class="markdownIt-Anchor" href="#完全背包"></a> 完全背包</h5><pre><code>           有N种物品（每种物品无限件）和一个容量为V的背包。放入第 i 种物品耗费的空间是Ci，得到的价值是Wi。求解将哪些物品装入背包可使价值总和最大。           f[i][v]表示前i种物品恰好放入一个容量为v的背包可以获得的最大价值。</code></pre><blockquote><p>f[i][v] = max{ f[i-1][v - kCi] + kWi  | 0 &lt;= k &lt;= v/Ci }</p></blockquote><p>(当k的取值为0,1时，这就是01背包的状态转移方程）<br />时间复杂度O( VNsum{V/Ci} )，空间复杂度在用滚动数组优化后可以达到O( V )。<br />进行优化后（此处省略500字），状态转移方程变成：</p><blockquote><p>f[i][v] = max{ f[i-1][v],  f[i][v - Ci] +Wi }</p></blockquote><p>时间复杂度降为O(VN)。</p><h5 id="多重背包"><a class="markdownIt-Anchor" href="#多重背包"></a> 多重背包</h5><pre><code>           有N种物品（每种物品Mi件）和一个容量为V的背包。放入第i种物品耗费的空间是Ci，得到的价值是Wi。求解将哪些物品装入背包可使价值总和最大。</code></pre><p>f[i][v]表示前i种物品恰好放入一个容量为v的背包可以获得的最大价值。<br />f[i][v] = max{ f[i-1][v - kCi] + kWi  | 0 &lt;= k &lt;= Mi }<br />时间复杂度O( Vsum(Mi) )，空间复杂度仍然可以用滚动数组优化后可以达到O( V )。<br />优化：采用二进制拆分物品，将Mi个物品拆分成容量为1、2、4、8、… 2^k、Mi-( 2^(k+1) - 1 ) 个对应价值为Wi、2Wi、4Wi、8Wi、…、2^kWi、（Mi-( 2^(k+1) - 1 )）Wi的物品，然后采用01背包求解。<br />这样做的时间复杂度降为O(Vsum(logMi) )。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四级计划</title>
      <link href="/2018/07/10/%E5%9B%9B%E7%BA%A7%E8%AE%A1%E5%88%92/"/>
      <url>/2018/07/10/%E5%9B%9B%E7%BA%A7%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h1 id="四级计划"><a class="markdownIt-Anchor" href="#四级计划"></a> 四级计划</h1><h2 id="词汇"><a class="markdownIt-Anchor" href="#词汇"></a> 词汇</h2><ol><li>每天使用墨墨(艾宾浩斯遗忘曲线)计划词汇30（每天背单词时间固定一小时总量可变）。时间比较短只记核心2千词了</li><li>尽量多觉记忆（听说读写）</li><li>看四级视频时 讲义视频巩固单词</li></ol><h2 id="语法"><a class="markdownIt-Anchor" href="#语法"></a> 语法</h2><ol><li>找一个四级零基础语法基础视频（八月中旬看完）</li></ol><h2 id="听力"><a class="markdownIt-Anchor" href="#听力"></a> 听力</h2><p><img src= "/img/loading.gif" data-lazy-src="http://images.zhuoke.xyz/image-20200718183942776.png" alt="分值分布" /></p><ol><li>考试中占比较大，每日英语听力多听真、题吧，每周至少看（五部精听法）一套真题听力。<img src= "/img/loading.gif" data-lazy-src="http://images.zhuoke.xyz/image-20200718183222607.png" alt="" /></li><li>策略技巧<ul><li>预览选项</li><li>根据keywords来听</li></ul></li><li>做题方式</li></ol><p><img src= "/img/loading.gif" data-lazy-src="http://images.zhuoke.xyz/image-20200718184426229.png" alt="image-20200718184426229" /></p><h2 id="阅读"><a class="markdownIt-Anchor" href="#阅读"></a> 阅读</h2><ol><li><p>题型<img src= "/img/loading.gif" data-lazy-src="http://images.zhuoke.xyz/image-20200718185119593.png" alt="" /></p></li><li><p>分值比重<img src= "/img/loading.gif" data-lazy-src="http://images.zhuoke.xyz/image-20200718185208546.png" alt="image-20200718185208546" /></p></li><li><p>做题顺序<img src= "/img/loading.gif" data-lazy-src="http://images.zhuoke.xyz/image-20200718185032088.png" alt="image-20200718185032088" /></p></li><li><p>阅读问题</p><p><img src= "/img/loading.gif" data-lazy-src="http://images.zhuoke.xyz/image-20200718185503912.png" alt="image-20200718185503912" /></p><p>5.技巧</p><p><img src= "/img/loading.gif" data-lazy-src="http://images.zhuoke.xyz/image-20200718190035325.png" alt="image-20200718190035325" /></p><p>6.选词填空</p><p><img src= "/img/loading.gif" data-lazy-src="http://images.zhuoke.xyz/image-20200718190215450.png" alt="image-20200718190215450" /></p><p>最大问题还是<strong>词汇量</strong></p></li></ol><hr /><h2 id="写作"><a class="markdownIt-Anchor" href="#写作"></a> 写作</h2><p><img src= "/img/loading.gif" data-lazy-src="http://images.zhuoke.xyz/image-20200718190702957.png" alt="image-20200718190702957" /></p><h2 id="翻译"><a class="markdownIt-Anchor" href="#翻译"></a> 翻译</h2><h3 id="题型"><a class="markdownIt-Anchor" href="#题型"></a> 题型</h3><p>共1题，考试时间30分钟。段落汉译英，翻<br />译内容涉及中国的历史、文化、经济、社<br />会发展等。长度为140~160个汉字。</p><ul><li><p>历史文化一般为过去时态，</p></li><li><p>经济社会一般为完成时态。</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
